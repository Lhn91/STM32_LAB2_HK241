
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002688  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002794  08002794  00003794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027c8  080027c8  0000405c  2**0
                  CONTENTS
  4 .ARM          00000000  080027c8  080027c8  0000405c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027c8  080027c8  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027c8  080027c8  000037c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027cc  080027cc  000037cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080027d0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000005c  0800282c  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  0800282c  00004260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000834a  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a40  00000000  00000000  0000c3cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0000de10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000797  00000000  00000000  0000e800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017587  00000000  00000000  0000ef97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b94a  00000000  00000000  0002651e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085a84  00000000  00000000  00031e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b78ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b18  00000000  00000000  000b7930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000ba448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800277c 	.word	0x0800277c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800277c 	.word	0x0800277c

0800014c <convert_to_binary_array>:
#include "led_matrix.h"
const int MAX_LED_MATRIX = 8;
int index_led_matrix = 0;


uint8_t* convert_to_binary_array(uint8_t value) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
    uint8_t* binary_array = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8000156:	2008      	movs	r0, #8
 8000158:	f002 f9c6 	bl	80024e8 <malloc>
 800015c:	4603      	mov	r3, r0
 800015e:	60bb      	str	r3, [r7, #8]

    if (binary_array == NULL) {
 8000160:	68bb      	ldr	r3, [r7, #8]
 8000162:	2b00      	cmp	r3, #0
 8000164:	d101      	bne.n	800016a <convert_to_binary_array+0x1e>
        return NULL;
 8000166:	2300      	movs	r3, #0
 8000168:	e017      	b.n	800019a <convert_to_binary_array+0x4e>
    }

    for (int i = 0; i < 8; i++) {
 800016a:	2300      	movs	r3, #0
 800016c:	60fb      	str	r3, [r7, #12]
 800016e:	e010      	b.n	8000192 <convert_to_binary_array+0x46>
        binary_array[i] = (value >> (7 - i)) & 0x01;
 8000170:	79fa      	ldrb	r2, [r7, #7]
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	f1c3 0307 	rsb	r3, r3, #7
 8000178:	fa42 f303 	asr.w	r3, r2, r3
 800017c:	b2da      	uxtb	r2, r3
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	68b9      	ldr	r1, [r7, #8]
 8000182:	440b      	add	r3, r1
 8000184:	f002 0201 	and.w	r2, r2, #1
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	3301      	adds	r3, #1
 8000190:	60fb      	str	r3, [r7, #12]
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	2b07      	cmp	r3, #7
 8000196:	ddeb      	ble.n	8000170 <convert_to_binary_array+0x24>
    }

    return binary_array;
 8000198:	68bb      	ldr	r3, [r7, #8]
}
 800019a:	4618      	mov	r0, r3
 800019c:	3710      	adds	r7, #16
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
	...

080001a4 <resetRow>:
void resetRow(){
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001ae:	4817      	ldr	r0, [pc, #92]	@ (800020c <resetRow+0x68>)
 80001b0:	f001 f9ae 	bl	8001510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001ba:	4814      	ldr	r0, [pc, #80]	@ (800020c <resetRow+0x68>)
 80001bc:	f001 f9a8 	bl	8001510 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001c6:	4811      	ldr	r0, [pc, #68]	@ (800020c <resetRow+0x68>)
 80001c8:	f001 f9a2 	bl	8001510 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001d2:	480e      	ldr	r0, [pc, #56]	@ (800020c <resetRow+0x68>)
 80001d4:	f001 f99c 	bl	8001510 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, RESET);
 80001d8:	2200      	movs	r2, #0
 80001da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001de:	480b      	ldr	r0, [pc, #44]	@ (800020c <resetRow+0x68>)
 80001e0:	f001 f996 	bl	8001510 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001ea:	4808      	ldr	r0, [pc, #32]	@ (800020c <resetRow+0x68>)
 80001ec:	f001 f990 	bl	8001510 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, RESET);
 80001f0:	2200      	movs	r2, #0
 80001f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001f6:	4805      	ldr	r0, [pc, #20]	@ (800020c <resetRow+0x68>)
 80001f8:	f001 f98a 	bl	8001510 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000202:	4802      	ldr	r0, [pc, #8]	@ (800020c <resetRow+0x68>)
 8000204:	f001 f984 	bl	8001510 <HAL_GPIO_WritePin>
}
 8000208:	bf00      	nop
 800020a:	bd80      	pop	{r7, pc}
 800020c:	40010c00 	.word	0x40010c00

08000210 <getRow>:

void getRow(uint8_t* binary_array) {
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 8; i++) {
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
 800021c:	e057      	b.n	80002ce <getRow+0xbe>
        if (binary_array[i] == 1) {
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	687a      	ldr	r2, [r7, #4]
 8000222:	4413      	add	r3, r2
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	2b01      	cmp	r3, #1
 8000228:	d14e      	bne.n	80002c8 <getRow+0xb8>
           switch(i){
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	2b07      	cmp	r3, #7
 800022e:	d84b      	bhi.n	80002c8 <getRow+0xb8>
 8000230:	a201      	add	r2, pc, #4	@ (adr r2, 8000238 <getRow+0x28>)
 8000232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000236:	bf00      	nop
 8000238:	08000259 	.word	0x08000259
 800023c:	08000267 	.word	0x08000267
 8000240:	08000275 	.word	0x08000275
 8000244:	08000283 	.word	0x08000283
 8000248:	08000291 	.word	0x08000291
 800024c:	0800029f 	.word	0x0800029f
 8000250:	080002ad 	.word	0x080002ad
 8000254:	080002bb 	.word	0x080002bb
          case 0:HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000258:	2201      	movs	r2, #1
 800025a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800025e:	4820      	ldr	r0, [pc, #128]	@ (80002e0 <getRow+0xd0>)
 8000260:	f001 f956 	bl	8001510 <HAL_GPIO_WritePin>
                   	   	   	   break ;
 8000264:	e030      	b.n	80002c8 <getRow+0xb8>
		  case 1:HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000266:	2201      	movs	r2, #1
 8000268:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800026c:	481c      	ldr	r0, [pc, #112]	@ (80002e0 <getRow+0xd0>)
 800026e:	f001 f94f 	bl	8001510 <HAL_GPIO_WritePin>
					   break ;
 8000272:	e029      	b.n	80002c8 <getRow+0xb8>
		  case 2:HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800027a:	4819      	ldr	r0, [pc, #100]	@ (80002e0 <getRow+0xd0>)
 800027c:	f001 f948 	bl	8001510 <HAL_GPIO_WritePin>
					   break ;
 8000280:	e022      	b.n	80002c8 <getRow+0xb8>
		  case 3:HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000282:	2201      	movs	r2, #1
 8000284:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000288:	4815      	ldr	r0, [pc, #84]	@ (80002e0 <getRow+0xd0>)
 800028a:	f001 f941 	bl	8001510 <HAL_GPIO_WritePin>
					   break ;
 800028e:	e01b      	b.n	80002c8 <getRow+0xb8>
		  case 4:HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 8000290:	2201      	movs	r2, #1
 8000292:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000296:	4812      	ldr	r0, [pc, #72]	@ (80002e0 <getRow+0xd0>)
 8000298:	f001 f93a 	bl	8001510 <HAL_GPIO_WritePin>
					   break ;
 800029c:	e014      	b.n	80002c8 <getRow+0xb8>
		  case 5:HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002a4:	480e      	ldr	r0, [pc, #56]	@ (80002e0 <getRow+0xd0>)
 80002a6:	f001 f933 	bl	8001510 <HAL_GPIO_WritePin>
					   break ;
 80002aa:	e00d      	b.n	80002c8 <getRow+0xb8>
		  case 6:HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80002b2:	480b      	ldr	r0, [pc, #44]	@ (80002e0 <getRow+0xd0>)
 80002b4:	f001 f92c 	bl	8001510 <HAL_GPIO_WritePin>
                              	   break ;
 80002b8:	e006      	b.n	80002c8 <getRow+0xb8>
		  case 7:HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 80002ba:	2201      	movs	r2, #1
 80002bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002c0:	4807      	ldr	r0, [pc, #28]	@ (80002e0 <getRow+0xd0>)
 80002c2:	f001 f925 	bl	8001510 <HAL_GPIO_WritePin>
                   	   break ;
 80002c6:	bf00      	nop
    for (int i = 0; i < 8; i++) {
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	3301      	adds	r3, #1
 80002cc:	60fb      	str	r3, [r7, #12]
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	2b07      	cmp	r3, #7
 80002d2:	dda4      	ble.n	800021e <getRow+0xe>
           }
        }
    }
}
 80002d4:	bf00      	nop
 80002d6:	bf00      	nop
 80002d8:	3710      	adds	r7, #16
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40010c00 	.word	0x40010c00

080002e4 <resetCol>:

void resetCol(){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2104      	movs	r1, #4
 80002ec:	4816      	ldr	r0, [pc, #88]	@ (8000348 <resetCol+0x64>)
 80002ee:	f001 f90f 	bl	8001510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, RESET);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2108      	movs	r1, #8
 80002f6:	4814      	ldr	r0, [pc, #80]	@ (8000348 <resetCol+0x64>)
 80002f8:	f001 f90a 	bl	8001510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000302:	4811      	ldr	r0, [pc, #68]	@ (8000348 <resetCol+0x64>)
 8000304:	f001 f904 	bl	8001510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800030e:	480e      	ldr	r0, [pc, #56]	@ (8000348 <resetCol+0x64>)
 8000310:	f001 f8fe 	bl	8001510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800031a:	480b      	ldr	r0, [pc, #44]	@ (8000348 <resetCol+0x64>)
 800031c:	f001 f8f8 	bl	8001510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000326:	4808      	ldr	r0, [pc, #32]	@ (8000348 <resetCol+0x64>)
 8000328:	f001 f8f2 	bl	8001510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000332:	4805      	ldr	r0, [pc, #20]	@ (8000348 <resetCol+0x64>)
 8000334:	f001 f8ec 	bl	8001510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, RESET);
 8000338:	2200      	movs	r2, #0
 800033a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800033e:	4802      	ldr	r0, [pc, #8]	@ (8000348 <resetCol+0x64>)
 8000340:	f001 f8e6 	bl	8001510 <HAL_GPIO_WritePin>
}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40010800 	.word	0x40010800

0800034c <getCol>:

void getCol(uint8_t* binary_array) {
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i++) {
 8000354:	2300      	movs	r3, #0
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	e055      	b.n	8000406 <getCol+0xba>
	        if (binary_array[i] == 0) {
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	687a      	ldr	r2, [r7, #4]
 800035e:	4413      	add	r3, r2
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d14c      	bne.n	8000400 <getCol+0xb4>
	          switch(i){
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	2b07      	cmp	r3, #7
 800036a:	d849      	bhi.n	8000400 <getCol+0xb4>
 800036c:	a201      	add	r2, pc, #4	@ (adr r2, 8000374 <getCol+0x28>)
 800036e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000372:	bf00      	nop
 8000374:	08000395 	.word	0x08000395
 8000378:	080003a1 	.word	0x080003a1
 800037c:	080003ad 	.word	0x080003ad
 8000380:	080003bb 	.word	0x080003bb
 8000384:	080003c9 	.word	0x080003c9
 8000388:	080003d7 	.word	0x080003d7
 800038c:	080003e5 	.word	0x080003e5
 8000390:	080003f3 	.word	0x080003f3
	           case 0:HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 8000394:	2201      	movs	r2, #1
 8000396:	2104      	movs	r1, #4
 8000398:	481f      	ldr	r0, [pc, #124]	@ (8000418 <getCol+0xcc>)
 800039a:	f001 f8b9 	bl	8001510 <HAL_GPIO_WritePin>
	           	        	   	   	   break ;
 800039e:	e02f      	b.n	8000400 <getCol+0xb4>
	           case 1:HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 80003a0:	2201      	movs	r2, #1
 80003a2:	2108      	movs	r1, #8
 80003a4:	481c      	ldr	r0, [pc, #112]	@ (8000418 <getCol+0xcc>)
 80003a6:	f001 f8b3 	bl	8001510 <HAL_GPIO_WritePin>
	           	                   	   break ;
 80003aa:	e029      	b.n	8000400 <getCol+0xb4>
	           case 2:HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003b2:	4819      	ldr	r0, [pc, #100]	@ (8000418 <getCol+0xcc>)
 80003b4:	f001 f8ac 	bl	8001510 <HAL_GPIO_WritePin>
	           	                   	   break ;
 80003b8:	e022      	b.n	8000400 <getCol+0xb4>
	           case 3:HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, SET);
 80003ba:	2201      	movs	r2, #1
 80003bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003c0:	4815      	ldr	r0, [pc, #84]	@ (8000418 <getCol+0xcc>)
 80003c2:	f001 f8a5 	bl	8001510 <HAL_GPIO_WritePin>
	           	                   	   break ;
 80003c6:	e01b      	b.n	8000400 <getCol+0xb4>
	           case 4:HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003ce:	4812      	ldr	r0, [pc, #72]	@ (8000418 <getCol+0xcc>)
 80003d0:	f001 f89e 	bl	8001510 <HAL_GPIO_WritePin>
	           	                   	   break ;
 80003d4:	e014      	b.n	8000400 <getCol+0xb4>
	           case 5:HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003dc:	480e      	ldr	r0, [pc, #56]	@ (8000418 <getCol+0xcc>)
 80003de:	f001 f897 	bl	8001510 <HAL_GPIO_WritePin>
	           	                   	   break ;
 80003e2:	e00d      	b.n	8000400 <getCol+0xb4>
	           case 6:HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003ea:	480b      	ldr	r0, [pc, #44]	@ (8000418 <getCol+0xcc>)
 80003ec:	f001 f890 	bl	8001510 <HAL_GPIO_WritePin>
	           	                   	   break ;
 80003f0:	e006      	b.n	8000400 <getCol+0xb4>
	           case 7:HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003f8:	4807      	ldr	r0, [pc, #28]	@ (8000418 <getCol+0xcc>)
 80003fa:	f001 f889 	bl	8001510 <HAL_GPIO_WritePin>
	           	                   	   break ;
 80003fe:	bf00      	nop
	for (int i = 0; i < 8; i++) {
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	3301      	adds	r3, #1
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	2b07      	cmp	r3, #7
 800040a:	dda6      	ble.n	800035a <getCol+0xe>
	          }
	        }

	 }
}
 800040c:	bf00      	nop
 800040e:	bf00      	nop
 8000410:	3710      	adds	r7, #16
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40010800 	.word	0x40010800

0800041c <updateLEDMatrix>:

 void updateLEDMatrix (int index, uint8_t matrix_buffer_col[], uint8_t matrix_buffer_row[]){
 800041c:	b580      	push	{r7, lr}
 800041e:	b086      	sub	sp, #24
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
	 uint8_t *binary_array_row = convert_to_binary_array(matrix_buffer_row[index]);
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	4413      	add	r3, r2
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff fe8b 	bl	800014c <convert_to_binary_array>
 8000436:	6178      	str	r0, [r7, #20]
	 uint8_t *binary_array_col = convert_to_binary_array(matrix_buffer_col[index]);
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	68ba      	ldr	r2, [r7, #8]
 800043c:	4413      	add	r3, r2
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff fe83 	bl	800014c <convert_to_binary_array>
 8000446:	6138      	str	r0, [r7, #16]
	   if (binary_array_row == NULL || binary_array_col == NULL) {
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d00f      	beq.n	800046e <updateLEDMatrix+0x52>
 800044e:	693b      	ldr	r3, [r7, #16]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d00c      	beq.n	800046e <updateLEDMatrix+0x52>
	        return;
	    }
	 getRow(binary_array_row);
 8000454:	6978      	ldr	r0, [r7, #20]
 8000456:	f7ff fedb 	bl	8000210 <getRow>
	 getCol(binary_array_col);
 800045a:	6938      	ldr	r0, [r7, #16]
 800045c:	f7ff ff76 	bl	800034c <getCol>
	 free(binary_array_row);
 8000460:	6978      	ldr	r0, [r7, #20]
 8000462:	f002 f849 	bl	80024f8 <free>
	 free(binary_array_col);
 8000466:	6938      	ldr	r0, [r7, #16]
 8000468:	f002 f846 	bl	80024f8 <free>
 800046c:	e000      	b.n	8000470 <updateLEDMatrix+0x54>
	        return;
 800046e:	bf00      	nop
}
 8000470:	3718      	adds	r7, #24
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <updateClockBuffer.0>:
  uint8_t matrix_buffer_row[8] = {0x18, 0x3C, 0x66, 0x66, 0x7E, 0x7E, 0x66, 0x66};
  setTimer(1000,0);
  setTimer(4000,1);
  while (1)
  {
	  void updateClockBuffer(){
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	4663      	mov	r3, ip
 8000480:	f8c7 c004 	str.w	ip, [r7, #4]
		  led_buffer[0] = hour/10;
 8000484:	695a      	ldr	r2, [r3, #20]
 8000486:	4917      	ldr	r1, [pc, #92]	@ (80004e4 <updateClockBuffer.0+0x6c>)
 8000488:	fb81 0102 	smull	r0, r1, r1, r2
 800048c:	1089      	asrs	r1, r1, #2
 800048e:	17d2      	asrs	r2, r2, #31
 8000490:	1a8a      	subs	r2, r1, r2
 8000492:	605a      	str	r2, [r3, #4]
		  led_buffer[1] = hour%10;
 8000494:	6958      	ldr	r0, [r3, #20]
 8000496:	4a13      	ldr	r2, [pc, #76]	@ (80004e4 <updateClockBuffer.0+0x6c>)
 8000498:	fb82 1200 	smull	r1, r2, r2, r0
 800049c:	1091      	asrs	r1, r2, #2
 800049e:	17c2      	asrs	r2, r0, #31
 80004a0:	1a89      	subs	r1, r1, r2
 80004a2:	460a      	mov	r2, r1
 80004a4:	0092      	lsls	r2, r2, #2
 80004a6:	440a      	add	r2, r1
 80004a8:	0052      	lsls	r2, r2, #1
 80004aa:	1a81      	subs	r1, r0, r2
 80004ac:	6099      	str	r1, [r3, #8]
		  led_buffer[2] = minute/10;
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	490c      	ldr	r1, [pc, #48]	@ (80004e4 <updateClockBuffer.0+0x6c>)
 80004b2:	fb81 0102 	smull	r0, r1, r1, r2
 80004b6:	1089      	asrs	r1, r1, #2
 80004b8:	17d2      	asrs	r2, r2, #31
 80004ba:	1a8a      	subs	r2, r1, r2
 80004bc:	60da      	str	r2, [r3, #12]
		  led_buffer[3] = minute%10;
 80004be:	6818      	ldr	r0, [r3, #0]
 80004c0:	4a08      	ldr	r2, [pc, #32]	@ (80004e4 <updateClockBuffer.0+0x6c>)
 80004c2:	fb82 1200 	smull	r1, r2, r2, r0
 80004c6:	1091      	asrs	r1, r2, #2
 80004c8:	17c2      	asrs	r2, r0, #31
 80004ca:	1a89      	subs	r1, r1, r2
 80004cc:	460a      	mov	r2, r1
 80004ce:	0092      	lsls	r2, r2, #2
 80004d0:	440a      	add	r2, r1
 80004d2:	0052      	lsls	r2, r2, #1
 80004d4:	1a81      	subs	r1, r0, r2
 80004d6:	6119      	str	r1, [r3, #16]
	  }
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	66666667 	.word	0x66666667

080004e8 <main>:
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08e      	sub	sp, #56	@ 0x38
 80004ec:	af00      	add	r7, sp, #0
int main(void)
 80004ee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80004f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_Init();
 80004f4:	f000 fcfc 	bl	8000ef0 <HAL_Init>
  SystemClock_Config();
 80004f8:	f000 f8b2 	bl	8000660 <SystemClock_Config>
  MX_GPIO_Init();
 80004fc:	f000 f938 	bl	8000770 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000500:	f000 f8ea 	bl	80006d8 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT (&htim2);
 8000504:	4850      	ldr	r0, [pc, #320]	@ (8000648 <main+0x160>)
 8000506:	f001 fc63 	bl	8001dd0 <HAL_TIM_Base_Start_IT>
  int index_led = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	637b      	str	r3, [r7, #52]	@ 0x34
  int hour = 15, minute = 8, second = 50;
 800050e:	230f      	movs	r3, #15
 8000510:	627b      	str	r3, [r7, #36]	@ 0x24
 8000512:	2308      	movs	r3, #8
 8000514:	613b      	str	r3, [r7, #16]
 8000516:	2332      	movs	r3, #50	@ 0x32
 8000518:	633b      	str	r3, [r7, #48]	@ 0x30
  int led_buffer[4]= {hour/10, hour%10, minute/10, minute%10};
 800051a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800051c:	4a4b      	ldr	r2, [pc, #300]	@ (800064c <main+0x164>)
 800051e:	fb82 1203 	smull	r1, r2, r2, r3
 8000522:	1092      	asrs	r2, r2, #2
 8000524:	17db      	asrs	r3, r3, #31
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	617b      	str	r3, [r7, #20]
 800052a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800052c:	4b47      	ldr	r3, [pc, #284]	@ (800064c <main+0x164>)
 800052e:	fb83 2301 	smull	r2, r3, r3, r1
 8000532:	109a      	asrs	r2, r3, #2
 8000534:	17cb      	asrs	r3, r1, #31
 8000536:	1ad2      	subs	r2, r2, r3
 8000538:	4613      	mov	r3, r2
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	4413      	add	r3, r2
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	1aca      	subs	r2, r1, r3
 8000542:	61ba      	str	r2, [r7, #24]
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	4a41      	ldr	r2, [pc, #260]	@ (800064c <main+0x164>)
 8000548:	fb82 1203 	smull	r1, r2, r2, r3
 800054c:	1092      	asrs	r2, r2, #2
 800054e:	17db      	asrs	r3, r3, #31
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	61fb      	str	r3, [r7, #28]
 8000554:	6939      	ldr	r1, [r7, #16]
 8000556:	4b3d      	ldr	r3, [pc, #244]	@ (800064c <main+0x164>)
 8000558:	fb83 2301 	smull	r2, r3, r3, r1
 800055c:	109a      	asrs	r2, r3, #2
 800055e:	17cb      	asrs	r3, r1, #31
 8000560:	1ad2      	subs	r2, r2, r3
 8000562:	4613      	mov	r3, r2
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	4413      	add	r3, r2
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	1aca      	subs	r2, r1, r3
 800056c:	623a      	str	r2, [r7, #32]
  uint8_t matrix_buffer_col[8] = {0xFE, 0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F};
 800056e:	4a38      	ldr	r2, [pc, #224]	@ (8000650 <main+0x168>)
 8000570:	f107 0308 	add.w	r3, r7, #8
 8000574:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000578:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t matrix_buffer_row[8] = {0x18, 0x3C, 0x66, 0x66, 0x7E, 0x7E, 0x66, 0x66};
 800057c:	4a35      	ldr	r2, [pc, #212]	@ (8000654 <main+0x16c>)
 800057e:	463b      	mov	r3, r7
 8000580:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000584:	e883 0003 	stmia.w	r3, {r0, r1}
  setTimer(1000,0);
 8000588:	2100      	movs	r1, #0
 800058a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800058e:	f000 fb71 	bl	8000c74 <setTimer>
  setTimer(4000,1);
 8000592:	2101      	movs	r1, #1
 8000594:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000598:	f000 fb6c 	bl	8000c74 <setTimer>
for(int i = 0; i<8; i++){
 800059c:	2300      	movs	r3, #0
 800059e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80005a0:	e010      	b.n	80005c4 <main+0xdc>
	 updateLEDMatrix(i, matrix_buffer_col, matrix_buffer_row);
 80005a2:	463a      	mov	r2, r7
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	4619      	mov	r1, r3
 80005aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80005ac:	f7ff ff36 	bl	800041c <updateLEDMatrix>
	 HAL_Delay(30);
 80005b0:	201e      	movs	r0, #30
 80005b2:	f000 fcff 	bl	8000fb4 <HAL_Delay>
	 resetRow();
 80005b6:	f7ff fdf5 	bl	80001a4 <resetRow>
	 resetCol();
 80005ba:	f7ff fe93 	bl	80002e4 <resetCol>
for(int i = 0; i<8; i++){
 80005be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005c0:	3301      	adds	r3, #1
 80005c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80005c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005c6:	2b07      	cmp	r3, #7
 80005c8:	ddeb      	ble.n	80005a2 <main+0xba>

}
	  //updateLEDMatrix(3, matrix_buffer_col, matrix_buffer_row);
	  //TODO
	  if(timer_flag[0] == 1){
 80005ca:	4b23      	ldr	r3, [pc, #140]	@ (8000658 <main+0x170>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d1e4      	bne.n	800059c <main+0xb4>
			  second ++;
 80005d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005d4:	3301      	adds	r3, #1
 80005d6:	633b      	str	r3, [r7, #48]	@ 0x30
			  if ( second >= 60) {
 80005d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005da:	2b3b      	cmp	r3, #59	@ 0x3b
 80005dc:	dd04      	ble.n	80005e8 <main+0x100>
				  second = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	633b      	str	r3, [r7, #48]	@ 0x30
				  minute ++;
 80005e2:	693b      	ldr	r3, [r7, #16]
 80005e4:	3301      	adds	r3, #1
 80005e6:	613b      	str	r3, [r7, #16]
			  }
			  if( minute >= 60) {
 80005e8:	693b      	ldr	r3, [r7, #16]
 80005ea:	2b3b      	cmp	r3, #59	@ 0x3b
 80005ec:	dd04      	ble.n	80005f8 <main+0x110>
				  minute = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
				  hour ++;
 80005f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005f4:	3301      	adds	r3, #1
 80005f6:	627b      	str	r3, [r7, #36]	@ 0x24
			  }
			  if( hour >=24){
 80005f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005fa:	2b17      	cmp	r3, #23
 80005fc:	dd01      	ble.n	8000602 <main+0x11a>
				  hour = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	627b      	str	r3, [r7, #36]	@ 0x24
			  }
		   updateClockBuffer();
 8000602:	f107 0310 	add.w	r3, r7, #16
 8000606:	469c      	mov	ip, r3
 8000608:	f7ff ff36 	bl	8000478 <updateClockBuffer.0>
		   update7SEG(index_led,led_buffer);
 800060c:	f107 0310 	add.w	r3, r7, #16
 8000610:	3304      	adds	r3, #4
 8000612:	4619      	mov	r1, r3
 8000614:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000616:	f000 f911 	bl	800083c <update7SEG>
		   index_led++;
 800061a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800061c:	3301      	adds	r3, #1
 800061e:	637b      	str	r3, [r7, #52]	@ 0x34
		   if(index_led == 4){
 8000620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000622:	2b04      	cmp	r3, #4
 8000624:	d101      	bne.n	800062a <main+0x142>
			   index_led = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	637b      	str	r3, [r7, #52]	@ 0x34
		   }
		   HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 800062a:	2110      	movs	r1, #16
 800062c:	480b      	ldr	r0, [pc, #44]	@ (800065c <main+0x174>)
 800062e:	f000 ff87 	bl	8001540 <HAL_GPIO_TogglePin>
		   HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8000632:	2120      	movs	r1, #32
 8000634:	4809      	ldr	r0, [pc, #36]	@ (800065c <main+0x174>)
 8000636:	f000 ff83 	bl	8001540 <HAL_GPIO_TogglePin>

		   setTimer(1000,0);
 800063a:	2100      	movs	r1, #0
 800063c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000640:	f000 fb18 	bl	8000c74 <setTimer>
  {
 8000644:	e7aa      	b.n	800059c <main+0xb4>
 8000646:	bf00      	nop
 8000648:	20000078 	.word	0x20000078
 800064c:	66666667 	.word	0x66666667
 8000650:	08002794 	.word	0x08002794
 8000654:	0800279c 	.word	0x0800279c
 8000658:	200000e8 	.word	0x200000e8
 800065c:	40010800 	.word	0x40010800

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b090      	sub	sp, #64	@ 0x40
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0318 	add.w	r3, r7, #24
 800066a:	2228      	movs	r2, #40	@ 0x28
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fff8 	bl	8002664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000682:	2302      	movs	r3, #2
 8000684:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000686:	2301      	movs	r3, #1
 8000688:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068a:	2310      	movs	r3, #16
 800068c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800068e:	2300      	movs	r3, #0
 8000690:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0318 	add.w	r3, r7, #24
 8000696:	4618      	mov	r0, r3
 8000698:	f000 ff6c 	bl	8001574 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80006a2:	f000 f8c5 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 f9da 	bl	8001a78 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006ca:	f000 f8b1 	bl	8000830 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3740      	adds	r7, #64	@ 0x40
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ec:	463b      	mov	r3, r7
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006f4:	4b1d      	ldr	r3, [pc, #116]	@ (800076c <MX_TIM2_Init+0x94>)
 80006f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	@ (800076c <MX_TIM2_Init+0x94>)
 80006fe:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000702:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000704:	4b19      	ldr	r3, [pc, #100]	@ (800076c <MX_TIM2_Init+0x94>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800070a:	4b18      	ldr	r3, [pc, #96]	@ (800076c <MX_TIM2_Init+0x94>)
 800070c:	2209      	movs	r2, #9
 800070e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000710:	4b16      	ldr	r3, [pc, #88]	@ (800076c <MX_TIM2_Init+0x94>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000716:	4b15      	ldr	r3, [pc, #84]	@ (800076c <MX_TIM2_Init+0x94>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800071c:	4813      	ldr	r0, [pc, #76]	@ (800076c <MX_TIM2_Init+0x94>)
 800071e:	f001 fb07 	bl	8001d30 <HAL_TIM_Base_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000728:	f000 f882 	bl	8000830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800072c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000730:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	4619      	mov	r1, r3
 8000738:	480c      	ldr	r0, [pc, #48]	@ (800076c <MX_TIM2_Init+0x94>)
 800073a:	f001 fc85 	bl	8002048 <HAL_TIM_ConfigClockSource>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000744:	f000 f874 	bl	8000830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000748:	2300      	movs	r3, #0
 800074a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000750:	463b      	mov	r3, r7
 8000752:	4619      	mov	r1, r3
 8000754:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_TIM2_Init+0x94>)
 8000756:	f001 fe5d 	bl	8002414 <HAL_TIMEx_MasterConfigSynchronization>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000760:	f000 f866 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	3718      	adds	r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000078 	.word	0x20000078

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000784:	4b22      	ldr	r3, [pc, #136]	@ (8000810 <MX_GPIO_Init+0xa0>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a21      	ldr	r2, [pc, #132]	@ (8000810 <MX_GPIO_Init+0xa0>)
 800078a:	f043 0304 	orr.w	r3, r3, #4
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <MX_GPIO_Init+0xa0>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0304 	and.w	r3, r3, #4
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079c:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <MX_GPIO_Init+0xa0>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000810 <MX_GPIO_Init+0xa0>)
 80007a2:	f043 0308 	orr.w	r3, r3, #8
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <MX_GPIO_Init+0xa0>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0308 	and.w	r3, r3, #8
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 80007b4:	2200      	movs	r2, #0
 80007b6:	f64f 71fc 	movw	r1, #65532	@ 0xfffc
 80007ba:	4816      	ldr	r0, [pc, #88]	@ (8000814 <MX_GPIO_Init+0xa4>)
 80007bc:	f000 fea8 	bl	8001510 <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, seg1_Pin|seg2_Pin|seg3_Pin|ROW2_Pin
 80007c0:	2200      	movs	r2, #0
 80007c2:	f64f 717f 	movw	r1, #65407	@ 0xff7f
 80007c6:	4814      	ldr	r0, [pc, #80]	@ (8000818 <MX_GPIO_Init+0xa8>)
 80007c8:	f000 fea2 	bl	8001510 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 80007cc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80007d0:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2302      	movs	r3, #2
 80007dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	4619      	mov	r1, r3
 80007e4:	480b      	ldr	r0, [pc, #44]	@ (8000814 <MX_GPIO_Init+0xa4>)
 80007e6:	f000 fd17 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : seg1_Pin seg2_Pin seg3_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin seg4_Pin seg5_Pin seg6_Pin
                           seg7_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = seg1_Pin|seg2_Pin|seg3_Pin|ROW2_Pin
 80007ea:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 80007ee:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|seg4_Pin|seg5_Pin|seg6_Pin
                          |seg7_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2302      	movs	r3, #2
 80007fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	4619      	mov	r1, r3
 8000802:	4805      	ldr	r0, [pc, #20]	@ (8000818 <MX_GPIO_Init+0xa8>)
 8000804:	f000 fd08 	bl	8001218 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000808:	bf00      	nop
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40021000 	.word	0x40021000
 8000814:	40010800 	.word	0x40010800
 8000818:	40010c00 	.word	0x40010c00

0800081c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
 void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	 timerRun();
 8000824:	f000 fa46 	bl	8000cb4 <timerRun>

}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <Error_Handler+0x8>

0800083c <update7SEG>:
 *  Created on: Sep 10, 2024
 *      Author: 84859
 */
#include "seg7.h"

 void update7SEG ( int index, int led_buffer[]){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
	  		 switch ( index ){
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b03      	cmp	r3, #3
 800084a:	d87e      	bhi.n	800094a <update7SEG+0x10e>
 800084c:	a201      	add	r2, pc, #4	@ (adr r2, 8000854 <update7SEG+0x18>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000865 	.word	0x08000865
 8000858:	0800089d 	.word	0x0800089d
 800085c:	080008d7 	.word	0x080008d7
 8000860:	08000911 	.word	0x08000911
	  		 case 0:
	  		 // Display the first 7 SEG with led_buffer [0]
	  			 display7SEG(led_buffer[0]);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f875 	bl	8000958 <display7SEG>
	  			 HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2140      	movs	r1, #64	@ 0x40
 8000872:	4838      	ldr	r0, [pc, #224]	@ (8000954 <update7SEG+0x118>)
 8000874:	f000 fe4c 	bl	8001510 <HAL_GPIO_WritePin>
	  			 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
 8000878:	2201      	movs	r2, #1
 800087a:	2180      	movs	r1, #128	@ 0x80
 800087c:	4835      	ldr	r0, [pc, #212]	@ (8000954 <update7SEG+0x118>)
 800087e:	f000 fe47 	bl	8001510 <HAL_GPIO_WritePin>
	  			 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000888:	4832      	ldr	r0, [pc, #200]	@ (8000954 <update7SEG+0x118>)
 800088a:	f000 fe41 	bl	8001510 <HAL_GPIO_WritePin>
	  			 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
 800088e:	2201      	movs	r2, #1
 8000890:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000894:	482f      	ldr	r0, [pc, #188]	@ (8000954 <update7SEG+0x118>)
 8000896:	f000 fe3b 	bl	8001510 <HAL_GPIO_WritePin>

	  		 break ;
 800089a:	e057      	b.n	800094c <update7SEG+0x110>
	  		 case 1:
	  			 display7SEG(led_buffer[1]);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	3304      	adds	r3, #4
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f858 	bl	8000958 <display7SEG>
	  			 HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2140      	movs	r1, #64	@ 0x40
 80008ac:	4829      	ldr	r0, [pc, #164]	@ (8000954 <update7SEG+0x118>)
 80008ae:	f000 fe2f 	bl	8001510 <HAL_GPIO_WritePin>
	  			 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2180      	movs	r1, #128	@ 0x80
 80008b6:	4827      	ldr	r0, [pc, #156]	@ (8000954 <update7SEG+0x118>)
 80008b8:	f000 fe2a 	bl	8001510 <HAL_GPIO_WritePin>
	  			 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008c2:	4824      	ldr	r0, [pc, #144]	@ (8000954 <update7SEG+0x118>)
 80008c4:	f000 fe24 	bl	8001510 <HAL_GPIO_WritePin>
	  			 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008ce:	4821      	ldr	r0, [pc, #132]	@ (8000954 <update7SEG+0x118>)
 80008d0:	f000 fe1e 	bl	8001510 <HAL_GPIO_WritePin>
	  		  // Display the second 7 SEG with led_buffer [1]
	  		  break ;
 80008d4:	e03a      	b.n	800094c <update7SEG+0x110>
	  		  case 2:
	  			  display7SEG(led_buffer[2]);
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	3308      	adds	r3, #8
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 f83b 	bl	8000958 <display7SEG>
	  				 HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	2140      	movs	r1, #64	@ 0x40
 80008e6:	481b      	ldr	r0, [pc, #108]	@ (8000954 <update7SEG+0x118>)
 80008e8:	f000 fe12 	bl	8001510 <HAL_GPIO_WritePin>
	  				 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2180      	movs	r1, #128	@ 0x80
 80008f0:	4818      	ldr	r0, [pc, #96]	@ (8000954 <update7SEG+0x118>)
 80008f2:	f000 fe0d 	bl	8001510 <HAL_GPIO_WritePin>
	  				 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008fc:	4815      	ldr	r0, [pc, #84]	@ (8000954 <update7SEG+0x118>)
 80008fe:	f000 fe07 	bl	8001510 <HAL_GPIO_WritePin>
	  				 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000908:	4812      	ldr	r0, [pc, #72]	@ (8000954 <update7SEG+0x118>)
 800090a:	f000 fe01 	bl	8001510 <HAL_GPIO_WritePin>
	  		  // Display the third 7 SEG with led_buffer [2]
	  		  break ;
 800090e:	e01d      	b.n	800094c <update7SEG+0x110>
	  		  case 3:
	  			  display7SEG(led_buffer[3]);
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	330c      	adds	r3, #12
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f81e 	bl	8000958 <display7SEG>
	  				 HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
 800091c:	2201      	movs	r2, #1
 800091e:	2140      	movs	r1, #64	@ 0x40
 8000920:	480c      	ldr	r0, [pc, #48]	@ (8000954 <update7SEG+0x118>)
 8000922:	f000 fdf5 	bl	8001510 <HAL_GPIO_WritePin>
	  				 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
 8000926:	2201      	movs	r2, #1
 8000928:	2180      	movs	r1, #128	@ 0x80
 800092a:	480a      	ldr	r0, [pc, #40]	@ (8000954 <update7SEG+0x118>)
 800092c:	f000 fdf0 	bl	8001510 <HAL_GPIO_WritePin>
	  				 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
 8000930:	2201      	movs	r2, #1
 8000932:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000936:	4807      	ldr	r0, [pc, #28]	@ (8000954 <update7SEG+0x118>)
 8000938:	f000 fdea 	bl	8001510 <HAL_GPIO_WritePin>
	  				 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000942:	4804      	ldr	r0, [pc, #16]	@ (8000954 <update7SEG+0x118>)
 8000944:	f000 fde4 	bl	8001510 <HAL_GPIO_WritePin>
	  		  // Display the forth 7 SEG with led_buffer [3]
	  		  break ;
 8000948:	e000      	b.n	800094c <update7SEG+0x110>
	  		  default :
	  		  break ;
 800094a:	bf00      	nop
	  		  }
	  	}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40010800 	.word	0x40010800

08000958 <display7SEG>:

void display7SEG(int num){
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	switch(num){
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b09      	cmp	r3, #9
 8000964:	f200 8180 	bhi.w	8000c68 <display7SEG+0x310>
 8000968:	a201      	add	r2, pc, #4	@ (adr r2, 8000970 <display7SEG+0x18>)
 800096a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800096e:	bf00      	nop
 8000970:	08000999 	.word	0x08000999
 8000974:	080009e1 	.word	0x080009e1
 8000978:	08000a29 	.word	0x08000a29
 800097c:	08000a71 	.word	0x08000a71
 8000980:	08000ab9 	.word	0x08000ab9
 8000984:	08000b01 	.word	0x08000b01
 8000988:	08000b49 	.word	0x08000b49
 800098c:	08000b91 	.word	0x08000b91
 8000990:	08000bd9 	.word	0x08000bd9
 8000994:	08000c21 	.word	0x08000c21
		 case 0:
			 HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	2101      	movs	r1, #1
 800099c:	48b4      	ldr	r0, [pc, #720]	@ (8000c70 <display7SEG+0x318>)
 800099e:	f000 fdb7 	bl	8001510 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2102      	movs	r1, #2
 80009a6:	48b2      	ldr	r0, [pc, #712]	@ (8000c70 <display7SEG+0x318>)
 80009a8:	f000 fdb2 	bl	8001510 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2104      	movs	r1, #4
 80009b0:	48af      	ldr	r0, [pc, #700]	@ (8000c70 <display7SEG+0x318>)
 80009b2:	f000 fdad 	bl	8001510 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2108      	movs	r1, #8
 80009ba:	48ad      	ldr	r0, [pc, #692]	@ (8000c70 <display7SEG+0x318>)
 80009bc:	f000 fda8 	bl	8001510 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(seg5_GPIO_Port, seg5_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2110      	movs	r1, #16
 80009c4:	48aa      	ldr	r0, [pc, #680]	@ (8000c70 <display7SEG+0x318>)
 80009c6:	f000 fda3 	bl	8001510 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(seg6_GPIO_Port, seg6_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2120      	movs	r1, #32
 80009ce:	48a8      	ldr	r0, [pc, #672]	@ (8000c70 <display7SEG+0x318>)
 80009d0:	f000 fd9e 	bl	8001510 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(seg7_GPIO_Port, seg7_Pin, GPIO_PIN_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2140      	movs	r1, #64	@ 0x40
 80009d8:	48a5      	ldr	r0, [pc, #660]	@ (8000c70 <display7SEG+0x318>)
 80009da:	f000 fd99 	bl	8001510 <HAL_GPIO_WritePin>

			   break;
 80009de:	e143      	b.n	8000c68 <display7SEG+0x310>

		 case 1:
			 HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2102      	movs	r1, #2
 80009e4:	48a2      	ldr	r0, [pc, #648]	@ (8000c70 <display7SEG+0x318>)
 80009e6:	f000 fd93 	bl	8001510 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2104      	movs	r1, #4
 80009ee:	48a0      	ldr	r0, [pc, #640]	@ (8000c70 <display7SEG+0x318>)
 80009f0:	f000 fd8e 	bl	8001510 <HAL_GPIO_WritePin>


			HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	2101      	movs	r1, #1
 80009f8:	489d      	ldr	r0, [pc, #628]	@ (8000c70 <display7SEG+0x318>)
 80009fa:	f000 fd89 	bl	8001510 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, GPIO_PIN_SET);
 80009fe:	2201      	movs	r2, #1
 8000a00:	2108      	movs	r1, #8
 8000a02:	489b      	ldr	r0, [pc, #620]	@ (8000c70 <display7SEG+0x318>)
 8000a04:	f000 fd84 	bl	8001510 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(seg5_GPIO_Port, seg5_Pin, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	4898      	ldr	r0, [pc, #608]	@ (8000c70 <display7SEG+0x318>)
 8000a0e:	f000 fd7f 	bl	8001510 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(seg6_GPIO_Port, seg6_Pin, GPIO_PIN_SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	2120      	movs	r1, #32
 8000a16:	4896      	ldr	r0, [pc, #600]	@ (8000c70 <display7SEG+0x318>)
 8000a18:	f000 fd7a 	bl	8001510 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(seg7_GPIO_Port, seg7_Pin, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2140      	movs	r1, #64	@ 0x40
 8000a20:	4893      	ldr	r0, [pc, #588]	@ (8000c70 <display7SEG+0x318>)
 8000a22:	f000 fd75 	bl	8001510 <HAL_GPIO_WritePin>

			  break;
 8000a26:	e11f      	b.n	8000c68 <display7SEG+0x310>


		 case 2:
			 HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4890      	ldr	r0, [pc, #576]	@ (8000c70 <display7SEG+0x318>)
 8000a2e:	f000 fd6f 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2102      	movs	r1, #2
 8000a36:	488e      	ldr	r0, [pc, #568]	@ (8000c70 <display7SEG+0x318>)
 8000a38:	f000 fd6a 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2108      	movs	r1, #8
 8000a40:	488b      	ldr	r0, [pc, #556]	@ (8000c70 <display7SEG+0x318>)
 8000a42:	f000 fd65 	bl	8001510 <HAL_GPIO_WritePin>
					  		   HAL_GPIO_WritePin(seg5_GPIO_Port, seg5_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2110      	movs	r1, #16
 8000a4a:	4889      	ldr	r0, [pc, #548]	@ (8000c70 <display7SEG+0x318>)
 8000a4c:	f000 fd60 	bl	8001510 <HAL_GPIO_WritePin>
					  		 HAL_GPIO_WritePin(seg7_GPIO_Port, seg7_Pin, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2140      	movs	r1, #64	@ 0x40
 8000a54:	4886      	ldr	r0, [pc, #536]	@ (8000c70 <display7SEG+0x318>)
 8000a56:	f000 fd5b 	bl	8001510 <HAL_GPIO_WritePin>



					  		  HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, GPIO_PIN_SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2104      	movs	r1, #4
 8000a5e:	4884      	ldr	r0, [pc, #528]	@ (8000c70 <display7SEG+0x318>)
 8000a60:	f000 fd56 	bl	8001510 <HAL_GPIO_WritePin>
					  		  HAL_GPIO_WritePin(seg6_GPIO_Port, seg6_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2120      	movs	r1, #32
 8000a68:	4881      	ldr	r0, [pc, #516]	@ (8000c70 <display7SEG+0x318>)
 8000a6a:	f000 fd51 	bl	8001510 <HAL_GPIO_WritePin>
					  		  break;
 8000a6e:	e0fb      	b.n	8000c68 <display7SEG+0x310>

		 case 3:
			 HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2101      	movs	r1, #1
 8000a74:	487e      	ldr	r0, [pc, #504]	@ (8000c70 <display7SEG+0x318>)
 8000a76:	f000 fd4b 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	487c      	ldr	r0, [pc, #496]	@ (8000c70 <display7SEG+0x318>)
 8000a80:	f000 fd46 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2104      	movs	r1, #4
 8000a88:	4879      	ldr	r0, [pc, #484]	@ (8000c70 <display7SEG+0x318>)
 8000a8a:	f000 fd41 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2108      	movs	r1, #8
 8000a92:	4877      	ldr	r0, [pc, #476]	@ (8000c70 <display7SEG+0x318>)
 8000a94:	f000 fd3c 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg5_GPIO_Port, seg5_Pin, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2110      	movs	r1, #16
 8000a9c:	4874      	ldr	r0, [pc, #464]	@ (8000c70 <display7SEG+0x318>)
 8000a9e:	f000 fd37 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg6_GPIO_Port, seg6_Pin, GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	4872      	ldr	r0, [pc, #456]	@ (8000c70 <display7SEG+0x318>)
 8000aa8:	f000 fd32 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg7_GPIO_Port, seg7_Pin, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2140      	movs	r1, #64	@ 0x40
 8000ab0:	486f      	ldr	r0, [pc, #444]	@ (8000c70 <display7SEG+0x318>)
 8000ab2:	f000 fd2d 	bl	8001510 <HAL_GPIO_WritePin>
					   break;
 8000ab6:	e0d7      	b.n	8000c68 <display7SEG+0x310>


		 case 4:
			 HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2101      	movs	r1, #1
 8000abc:	486c      	ldr	r0, [pc, #432]	@ (8000c70 <display7SEG+0x318>)
 8000abe:	f000 fd27 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	486a      	ldr	r0, [pc, #424]	@ (8000c70 <display7SEG+0x318>)
 8000ac8:	f000 fd22 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2104      	movs	r1, #4
 8000ad0:	4867      	ldr	r0, [pc, #412]	@ (8000c70 <display7SEG+0x318>)
 8000ad2:	f000 fd1d 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2108      	movs	r1, #8
 8000ada:	4865      	ldr	r0, [pc, #404]	@ (8000c70 <display7SEG+0x318>)
 8000adc:	f000 fd18 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg5_GPIO_Port, seg5_Pin, GPIO_PIN_SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2110      	movs	r1, #16
 8000ae4:	4862      	ldr	r0, [pc, #392]	@ (8000c70 <display7SEG+0x318>)
 8000ae6:	f000 fd13 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg6_GPIO_Port, seg6_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2120      	movs	r1, #32
 8000aee:	4860      	ldr	r0, [pc, #384]	@ (8000c70 <display7SEG+0x318>)
 8000af0:	f000 fd0e 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg7_GPIO_Port, seg7_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2140      	movs	r1, #64	@ 0x40
 8000af8:	485d      	ldr	r0, [pc, #372]	@ (8000c70 <display7SEG+0x318>)
 8000afa:	f000 fd09 	bl	8001510 <HAL_GPIO_WritePin>

					   break;
 8000afe:	e0b3      	b.n	8000c68 <display7SEG+0x310>


		 case 5:
			 HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2101      	movs	r1, #1
 8000b04:	485a      	ldr	r0, [pc, #360]	@ (8000c70 <display7SEG+0x318>)
 8000b06:	f000 fd03 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	4858      	ldr	r0, [pc, #352]	@ (8000c70 <display7SEG+0x318>)
 8000b10:	f000 fcfe 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2104      	movs	r1, #4
 8000b18:	4855      	ldr	r0, [pc, #340]	@ (8000c70 <display7SEG+0x318>)
 8000b1a:	f000 fcf9 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2108      	movs	r1, #8
 8000b22:	4853      	ldr	r0, [pc, #332]	@ (8000c70 <display7SEG+0x318>)
 8000b24:	f000 fcf4 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg5_GPIO_Port, seg5_Pin, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2110      	movs	r1, #16
 8000b2c:	4850      	ldr	r0, [pc, #320]	@ (8000c70 <display7SEG+0x318>)
 8000b2e:	f000 fcef 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg6_GPIO_Port, seg6_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2120      	movs	r1, #32
 8000b36:	484e      	ldr	r0, [pc, #312]	@ (8000c70 <display7SEG+0x318>)
 8000b38:	f000 fcea 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg7_GPIO_Port, seg7_Pin, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2140      	movs	r1, #64	@ 0x40
 8000b40:	484b      	ldr	r0, [pc, #300]	@ (8000c70 <display7SEG+0x318>)
 8000b42:	f000 fce5 	bl	8001510 <HAL_GPIO_WritePin>
					   break;
 8000b46:	e08f      	b.n	8000c68 <display7SEG+0x310>


		 case 6:
			 HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	4848      	ldr	r0, [pc, #288]	@ (8000c70 <display7SEG+0x318>)
 8000b4e:	f000 fcdf 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, GPIO_PIN_SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2102      	movs	r1, #2
 8000b56:	4846      	ldr	r0, [pc, #280]	@ (8000c70 <display7SEG+0x318>)
 8000b58:	f000 fcda 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2104      	movs	r1, #4
 8000b60:	4843      	ldr	r0, [pc, #268]	@ (8000c70 <display7SEG+0x318>)
 8000b62:	f000 fcd5 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2108      	movs	r1, #8
 8000b6a:	4841      	ldr	r0, [pc, #260]	@ (8000c70 <display7SEG+0x318>)
 8000b6c:	f000 fcd0 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg5_GPIO_Port, seg5_Pin, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2110      	movs	r1, #16
 8000b74:	483e      	ldr	r0, [pc, #248]	@ (8000c70 <display7SEG+0x318>)
 8000b76:	f000 fccb 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg6_GPIO_Port, seg6_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	483c      	ldr	r0, [pc, #240]	@ (8000c70 <display7SEG+0x318>)
 8000b80:	f000 fcc6 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg7_GPIO_Port, seg7_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2140      	movs	r1, #64	@ 0x40
 8000b88:	4839      	ldr	r0, [pc, #228]	@ (8000c70 <display7SEG+0x318>)
 8000b8a:	f000 fcc1 	bl	8001510 <HAL_GPIO_WritePin>
					   break;
 8000b8e:	e06b      	b.n	8000c68 <display7SEG+0x310>


		 case 7:
			 HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2101      	movs	r1, #1
 8000b94:	4836      	ldr	r0, [pc, #216]	@ (8000c70 <display7SEG+0x318>)
 8000b96:	f000 fcbb 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	4834      	ldr	r0, [pc, #208]	@ (8000c70 <display7SEG+0x318>)
 8000ba0:	f000 fcb6 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2104      	movs	r1, #4
 8000ba8:	4831      	ldr	r0, [pc, #196]	@ (8000c70 <display7SEG+0x318>)
 8000baa:	f000 fcb1 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, GPIO_PIN_SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2108      	movs	r1, #8
 8000bb2:	482f      	ldr	r0, [pc, #188]	@ (8000c70 <display7SEG+0x318>)
 8000bb4:	f000 fcac 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg5_GPIO_Port, seg5_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2110      	movs	r1, #16
 8000bbc:	482c      	ldr	r0, [pc, #176]	@ (8000c70 <display7SEG+0x318>)
 8000bbe:	f000 fca7 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg6_GPIO_Port, seg6_Pin, GPIO_PIN_SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	482a      	ldr	r0, [pc, #168]	@ (8000c70 <display7SEG+0x318>)
 8000bc8:	f000 fca2 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg7_GPIO_Port, seg7_Pin, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2140      	movs	r1, #64	@ 0x40
 8000bd0:	4827      	ldr	r0, [pc, #156]	@ (8000c70 <display7SEG+0x318>)
 8000bd2:	f000 fc9d 	bl	8001510 <HAL_GPIO_WritePin>
					   break;
 8000bd6:	e047      	b.n	8000c68 <display7SEG+0x310>

		 case 8:
			 HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2101      	movs	r1, #1
 8000bdc:	4824      	ldr	r0, [pc, #144]	@ (8000c70 <display7SEG+0x318>)
 8000bde:	f000 fc97 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2102      	movs	r1, #2
 8000be6:	4822      	ldr	r0, [pc, #136]	@ (8000c70 <display7SEG+0x318>)
 8000be8:	f000 fc92 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2104      	movs	r1, #4
 8000bf0:	481f      	ldr	r0, [pc, #124]	@ (8000c70 <display7SEG+0x318>)
 8000bf2:	f000 fc8d 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2108      	movs	r1, #8
 8000bfa:	481d      	ldr	r0, [pc, #116]	@ (8000c70 <display7SEG+0x318>)
 8000bfc:	f000 fc88 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg5_GPIO_Port, seg5_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2110      	movs	r1, #16
 8000c04:	481a      	ldr	r0, [pc, #104]	@ (8000c70 <display7SEG+0x318>)
 8000c06:	f000 fc83 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg6_GPIO_Port, seg6_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	4818      	ldr	r0, [pc, #96]	@ (8000c70 <display7SEG+0x318>)
 8000c10:	f000 fc7e 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg7_GPIO_Port, seg7_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2140      	movs	r1, #64	@ 0x40
 8000c18:	4815      	ldr	r0, [pc, #84]	@ (8000c70 <display7SEG+0x318>)
 8000c1a:	f000 fc79 	bl	8001510 <HAL_GPIO_WritePin>
					   break;
 8000c1e:	e023      	b.n	8000c68 <display7SEG+0x310>

		 case 9:
			 HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2101      	movs	r1, #1
 8000c24:	4812      	ldr	r0, [pc, #72]	@ (8000c70 <display7SEG+0x318>)
 8000c26:	f000 fc73 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	4810      	ldr	r0, [pc, #64]	@ (8000c70 <display7SEG+0x318>)
 8000c30:	f000 fc6e 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2104      	movs	r1, #4
 8000c38:	480d      	ldr	r0, [pc, #52]	@ (8000c70 <display7SEG+0x318>)
 8000c3a:	f000 fc69 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2108      	movs	r1, #8
 8000c42:	480b      	ldr	r0, [pc, #44]	@ (8000c70 <display7SEG+0x318>)
 8000c44:	f000 fc64 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg5_GPIO_Port, seg5_Pin, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2110      	movs	r1, #16
 8000c4c:	4808      	ldr	r0, [pc, #32]	@ (8000c70 <display7SEG+0x318>)
 8000c4e:	f000 fc5f 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg6_GPIO_Port, seg6_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2120      	movs	r1, #32
 8000c56:	4806      	ldr	r0, [pc, #24]	@ (8000c70 <display7SEG+0x318>)
 8000c58:	f000 fc5a 	bl	8001510 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg7_GPIO_Port, seg7_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2140      	movs	r1, #64	@ 0x40
 8000c60:	4803      	ldr	r0, [pc, #12]	@ (8000c70 <display7SEG+0x318>)
 8000c62:	f000 fc55 	bl	8001510 <HAL_GPIO_WritePin>
					   break;
 8000c66:	bf00      	nop


		 }
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40010c00 	.word	0x40010c00

08000c74 <setTimer>:
#include "software_timer.h"

int timer_counter[10];
int timer_flag[10];

void setTimer(int duration, int index){
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/10;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a09      	ldr	r2, [pc, #36]	@ (8000ca8 <setTimer+0x34>)
 8000c82:	fb82 1203 	smull	r1, r2, r2, r3
 8000c86:	1092      	asrs	r2, r2, #2
 8000c88:	17db      	asrs	r3, r3, #31
 8000c8a:	1ad2      	subs	r2, r2, r3
 8000c8c:	4907      	ldr	r1, [pc, #28]	@ (8000cac <setTimer+0x38>)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8000c94:	4a06      	ldr	r2, [pc, #24]	@ (8000cb0 <setTimer+0x3c>)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	66666667 	.word	0x66666667
 8000cac:	200000c0 	.word	0x200000c0
 8000cb0:	200000e8 	.word	0x200000e8

08000cb4 <timerRun>:



void timerRun(){
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 10; i++){ //TOI UU HOA ----> O(1)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	e01c      	b.n	8000cfa <timerRun+0x46>
	if(timer_counter[i] > 0){
 8000cc0:	4a12      	ldr	r2, [pc, #72]	@ (8000d0c <timerRun+0x58>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	dd13      	ble.n	8000cf4 <timerRun+0x40>
		timer_counter[i]--;
 8000ccc:	4a0f      	ldr	r2, [pc, #60]	@ (8000d0c <timerRun+0x58>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd4:	1e5a      	subs	r2, r3, #1
 8000cd6:	490d      	ldr	r1, [pc, #52]	@ (8000d0c <timerRun+0x58>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[i] == 0){
 8000cde:	4a0b      	ldr	r2, [pc, #44]	@ (8000d0c <timerRun+0x58>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d104      	bne.n	8000cf4 <timerRun+0x40>
			timer_flag[i] = 1;
 8000cea:	4a09      	ldr	r2, [pc, #36]	@ (8000d10 <timerRun+0x5c>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2101      	movs	r1, #1
 8000cf0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 10; i++){ //TOI UU HOA ----> O(1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b09      	cmp	r3, #9
 8000cfe:	dddf      	ble.n	8000cc0 <timerRun+0xc>
		}
	}
}
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	200000c0 	.word	0x200000c0
 8000d10:	200000e8 	.word	0x200000e8

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d1a:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <HAL_MspInit+0x5c>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	4a14      	ldr	r2, [pc, #80]	@ (8000d70 <HAL_MspInit+0x5c>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6193      	str	r3, [r2, #24]
 8000d26:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <HAL_MspInit+0x5c>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <HAL_MspInit+0x5c>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	4a0e      	ldr	r2, [pc, #56]	@ (8000d70 <HAL_MspInit+0x5c>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d3c:	61d3      	str	r3, [r2, #28]
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <HAL_MspInit+0x5c>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <HAL_MspInit+0x60>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	4a04      	ldr	r2, [pc, #16]	@ (8000d74 <HAL_MspInit+0x60>)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40010000 	.word	0x40010000

08000d78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d88:	d113      	bne.n	8000db2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <HAL_TIM_Base_MspInit+0x44>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000dbc <HAL_TIM_Base_MspInit+0x44>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	61d3      	str	r3, [r2, #28]
 8000d96:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <HAL_TIM_Base_MspInit+0x44>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	201c      	movs	r0, #28
 8000da8:	f000 f9ff 	bl	80011aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dac:	201c      	movs	r0, #28
 8000dae:	f000 fa18 	bl	80011e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e10:	f000 f8b4 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e1c:	4802      	ldr	r0, [pc, #8]	@ (8000e28 <TIM2_IRQHandler+0x10>)
 8000e1e:	f001 f823 	bl	8001e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000078 	.word	0x20000078

08000e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e34:	4a14      	ldr	r2, [pc, #80]	@ (8000e88 <_sbrk+0x5c>)
 8000e36:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <_sbrk+0x60>)
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e40:	4b13      	ldr	r3, [pc, #76]	@ (8000e90 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e48:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <_sbrk+0x64>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	@ (8000e94 <_sbrk+0x68>)
 8000e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4e:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d207      	bcs.n	8000e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e5c:	f001 fc1a 	bl	8002694 <__errno>
 8000e60:	4603      	mov	r3, r0
 8000e62:	220c      	movs	r2, #12
 8000e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	e009      	b.n	8000e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e72:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a05      	ldr	r2, [pc, #20]	@ (8000e90 <_sbrk+0x64>)
 8000e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20002800 	.word	0x20002800
 8000e8c:	00000400 	.word	0x00000400
 8000e90:	20000110 	.word	0x20000110
 8000e94:	20000260 	.word	0x20000260

08000e98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ea4:	f7ff fff8 	bl	8000e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea8:	480b      	ldr	r0, [pc, #44]	@ (8000ed8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000eaa:	490c      	ldr	r1, [pc, #48]	@ (8000edc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000eac:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb0:	e002      	b.n	8000eb8 <LoopCopyDataInit>

08000eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb6:	3304      	adds	r3, #4

08000eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ebc:	d3f9      	bcc.n	8000eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ebe:	4a09      	ldr	r2, [pc, #36]	@ (8000ee4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ec0:	4c09      	ldr	r4, [pc, #36]	@ (8000ee8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec4:	e001      	b.n	8000eca <LoopFillZerobss>

08000ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec8:	3204      	adds	r2, #4

08000eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ecc:	d3fb      	bcc.n	8000ec6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ece:	f001 fbe7 	bl	80026a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ed2:	f7ff fb09 	bl	80004e8 <main>
  bx lr
 8000ed6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000edc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ee0:	080027d0 	.word	0x080027d0
  ldr r2, =_sbss
 8000ee4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ee8:	20000260 	.word	0x20000260

08000eec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC1_2_IRQHandler>
	...

08000ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef4:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <HAL_Init+0x28>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	@ (8000f18 <HAL_Init+0x28>)
 8000efa:	f043 0310 	orr.w	r3, r3, #16
 8000efe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f00:	2003      	movs	r0, #3
 8000f02:	f000 f947 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f06:	200f      	movs	r0, #15
 8000f08:	f000 f808 	bl	8000f1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f0c:	f7ff ff02 	bl	8000d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40022000 	.word	0x40022000

08000f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f24:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <HAL_InitTick+0x54>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <HAL_InitTick+0x58>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f95f 	bl	80011fe <HAL_SYSTICK_Config>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00e      	b.n	8000f68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d80a      	bhi.n	8000f66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f000 f927 	bl	80011aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f5c:	4a06      	ldr	r2, [pc, #24]	@ (8000f78 <HAL_InitTick+0x5c>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e000      	b.n	8000f68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000000 	.word	0x20000000
 8000f74:	20000008 	.word	0x20000008
 8000f78:	20000004 	.word	0x20000004

08000f7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <HAL_IncTick+0x1c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b05      	ldr	r3, [pc, #20]	@ (8000f9c <HAL_IncTick+0x20>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a03      	ldr	r2, [pc, #12]	@ (8000f9c <HAL_IncTick+0x20>)
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	20000114 	.word	0x20000114

08000fa0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b02      	ldr	r3, [pc, #8]	@ (8000fb0 <HAL_GetTick+0x10>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	20000114 	.word	0x20000114

08000fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fbc:	f7ff fff0 	bl	8000fa0 <HAL_GetTick>
 8000fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fcc:	d005      	beq.n	8000fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fce:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <HAL_Delay+0x44>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fda:	bf00      	nop
 8000fdc:	f7ff ffe0 	bl	8000fa0 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d8f7      	bhi.n	8000fdc <HAL_Delay+0x28>
  {
  }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000008 	.word	0x20000008

08000ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800100c:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <__NVIC_SetPriorityGrouping+0x44>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001018:	4013      	ands	r3, r2
 800101a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001024:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800102c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102e:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <__NVIC_SetPriorityGrouping+0x44>)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	60d3      	str	r3, [r2, #12]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001048:	4b04      	ldr	r3, [pc, #16]	@ (800105c <__NVIC_GetPriorityGrouping+0x18>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	f003 0307 	and.w	r3, r3, #7
}
 8001052:	4618      	mov	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	2b00      	cmp	r3, #0
 8001070:	db0b      	blt.n	800108a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	f003 021f 	and.w	r2, r3, #31
 8001078:	4906      	ldr	r1, [pc, #24]	@ (8001094 <__NVIC_EnableIRQ+0x34>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	095b      	lsrs	r3, r3, #5
 8001080:	2001      	movs	r0, #1
 8001082:	fa00 f202 	lsl.w	r2, r0, r2
 8001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	e000e100 	.word	0xe000e100

08001098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db0a      	blt.n	80010c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	490c      	ldr	r1, [pc, #48]	@ (80010e4 <__NVIC_SetPriority+0x4c>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	0112      	lsls	r2, r2, #4
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	440b      	add	r3, r1
 80010bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c0:	e00a      	b.n	80010d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4908      	ldr	r1, [pc, #32]	@ (80010e8 <__NVIC_SetPriority+0x50>)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	3b04      	subs	r3, #4
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	440b      	add	r3, r1
 80010d6:	761a      	strb	r2, [r3, #24]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	@ 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f1c3 0307 	rsb	r3, r3, #7
 8001106:	2b04      	cmp	r3, #4
 8001108:	bf28      	it	cs
 800110a:	2304      	movcs	r3, #4
 800110c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3304      	adds	r3, #4
 8001112:	2b06      	cmp	r3, #6
 8001114:	d902      	bls.n	800111c <NVIC_EncodePriority+0x30>
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3b03      	subs	r3, #3
 800111a:	e000      	b.n	800111e <NVIC_EncodePriority+0x32>
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	f04f 32ff 	mov.w	r2, #4294967295
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	401a      	ands	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001134:	f04f 31ff 	mov.w	r1, #4294967295
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	43d9      	mvns	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	4313      	orrs	r3, r2
         );
}
 8001146:	4618      	mov	r0, r3
 8001148:	3724      	adds	r7, #36	@ 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001160:	d301      	bcc.n	8001166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001162:	2301      	movs	r3, #1
 8001164:	e00f      	b.n	8001186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001166:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <SysTick_Config+0x40>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116e:	210f      	movs	r1, #15
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f7ff ff90 	bl	8001098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001178:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <SysTick_Config+0x40>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117e:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <SysTick_Config+0x40>)
 8001180:	2207      	movs	r2, #7
 8001182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	e000e010 	.word	0xe000e010

08001194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff2d 	bl	8000ffc <__NVIC_SetPriorityGrouping>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011bc:	f7ff ff42 	bl	8001044 <__NVIC_GetPriorityGrouping>
 80011c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	6978      	ldr	r0, [r7, #20]
 80011c8:	f7ff ff90 	bl	80010ec <NVIC_EncodePriority>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff5f 	bl	8001098 <__NVIC_SetPriority>
}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff35 	bl	8001060 <__NVIC_EnableIRQ>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffa2 	bl	8001150 <SysTick_Config>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b08b      	sub	sp, #44	@ 0x2c
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122a:	e161      	b.n	80014f0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800122c:	2201      	movs	r2, #1
 800122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	69fa      	ldr	r2, [r7, #28]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	429a      	cmp	r2, r3
 8001246:	f040 8150 	bne.w	80014ea <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4a97      	ldr	r2, [pc, #604]	@ (80014ac <HAL_GPIO_Init+0x294>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d05e      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001254:	4a95      	ldr	r2, [pc, #596]	@ (80014ac <HAL_GPIO_Init+0x294>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d875      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800125a:	4a95      	ldr	r2, [pc, #596]	@ (80014b0 <HAL_GPIO_Init+0x298>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d058      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001260:	4a93      	ldr	r2, [pc, #588]	@ (80014b0 <HAL_GPIO_Init+0x298>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d86f      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001266:	4a93      	ldr	r2, [pc, #588]	@ (80014b4 <HAL_GPIO_Init+0x29c>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d052      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 800126c:	4a91      	ldr	r2, [pc, #580]	@ (80014b4 <HAL_GPIO_Init+0x29c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d869      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001272:	4a91      	ldr	r2, [pc, #580]	@ (80014b8 <HAL_GPIO_Init+0x2a0>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d04c      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001278:	4a8f      	ldr	r2, [pc, #572]	@ (80014b8 <HAL_GPIO_Init+0x2a0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d863      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800127e:	4a8f      	ldr	r2, [pc, #572]	@ (80014bc <HAL_GPIO_Init+0x2a4>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d046      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001284:	4a8d      	ldr	r2, [pc, #564]	@ (80014bc <HAL_GPIO_Init+0x2a4>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d85d      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800128a:	2b12      	cmp	r3, #18
 800128c:	d82a      	bhi.n	80012e4 <HAL_GPIO_Init+0xcc>
 800128e:	2b12      	cmp	r3, #18
 8001290:	d859      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001292:	a201      	add	r2, pc, #4	@ (adr r2, 8001298 <HAL_GPIO_Init+0x80>)
 8001294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001298:	08001313 	.word	0x08001313
 800129c:	080012ed 	.word	0x080012ed
 80012a0:	080012ff 	.word	0x080012ff
 80012a4:	08001341 	.word	0x08001341
 80012a8:	08001347 	.word	0x08001347
 80012ac:	08001347 	.word	0x08001347
 80012b0:	08001347 	.word	0x08001347
 80012b4:	08001347 	.word	0x08001347
 80012b8:	08001347 	.word	0x08001347
 80012bc:	08001347 	.word	0x08001347
 80012c0:	08001347 	.word	0x08001347
 80012c4:	08001347 	.word	0x08001347
 80012c8:	08001347 	.word	0x08001347
 80012cc:	08001347 	.word	0x08001347
 80012d0:	08001347 	.word	0x08001347
 80012d4:	08001347 	.word	0x08001347
 80012d8:	08001347 	.word	0x08001347
 80012dc:	080012f5 	.word	0x080012f5
 80012e0:	08001309 	.word	0x08001309
 80012e4:	4a76      	ldr	r2, [pc, #472]	@ (80014c0 <HAL_GPIO_Init+0x2a8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ea:	e02c      	b.n	8001346 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	623b      	str	r3, [r7, #32]
          break;
 80012f2:	e029      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	3304      	adds	r3, #4
 80012fa:	623b      	str	r3, [r7, #32]
          break;
 80012fc:	e024      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	3308      	adds	r3, #8
 8001304:	623b      	str	r3, [r7, #32]
          break;
 8001306:	e01f      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	330c      	adds	r3, #12
 800130e:	623b      	str	r3, [r7, #32]
          break;
 8001310:	e01a      	b.n	8001348 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d102      	bne.n	8001320 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800131a:	2304      	movs	r3, #4
 800131c:	623b      	str	r3, [r7, #32]
          break;
 800131e:	e013      	b.n	8001348 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d105      	bne.n	8001334 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001328:	2308      	movs	r3, #8
 800132a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	611a      	str	r2, [r3, #16]
          break;
 8001332:	e009      	b.n	8001348 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001334:	2308      	movs	r3, #8
 8001336:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	615a      	str	r2, [r3, #20]
          break;
 800133e:	e003      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
          break;
 8001344:	e000      	b.n	8001348 <HAL_GPIO_Init+0x130>
          break;
 8001346:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	2bff      	cmp	r3, #255	@ 0xff
 800134c:	d801      	bhi.n	8001352 <HAL_GPIO_Init+0x13a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	e001      	b.n	8001356 <HAL_GPIO_Init+0x13e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3304      	adds	r3, #4
 8001356:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2bff      	cmp	r3, #255	@ 0xff
 800135c:	d802      	bhi.n	8001364 <HAL_GPIO_Init+0x14c>
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	e002      	b.n	800136a <HAL_GPIO_Init+0x152>
 8001364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001366:	3b08      	subs	r3, #8
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	210f      	movs	r1, #15
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	401a      	ands	r2, r3
 800137c:	6a39      	ldr	r1, [r7, #32]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	431a      	orrs	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 80a9 	beq.w	80014ea <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001398:	4b4a      	ldr	r3, [pc, #296]	@ (80014c4 <HAL_GPIO_Init+0x2ac>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a49      	ldr	r2, [pc, #292]	@ (80014c4 <HAL_GPIO_Init+0x2ac>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b47      	ldr	r3, [pc, #284]	@ (80014c4 <HAL_GPIO_Init+0x2ac>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b0:	4a45      	ldr	r2, [pc, #276]	@ (80014c8 <HAL_GPIO_Init+0x2b0>)
 80013b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3302      	adds	r3, #2
 80013b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	220f      	movs	r2, #15
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a3d      	ldr	r2, [pc, #244]	@ (80014cc <HAL_GPIO_Init+0x2b4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d00d      	beq.n	80013f8 <HAL_GPIO_Init+0x1e0>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a3c      	ldr	r2, [pc, #240]	@ (80014d0 <HAL_GPIO_Init+0x2b8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d007      	beq.n	80013f4 <HAL_GPIO_Init+0x1dc>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a3b      	ldr	r2, [pc, #236]	@ (80014d4 <HAL_GPIO_Init+0x2bc>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d101      	bne.n	80013f0 <HAL_GPIO_Init+0x1d8>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e004      	b.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013f0:	2303      	movs	r3, #3
 80013f2:	e002      	b.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013f8:	2300      	movs	r3, #0
 80013fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013fc:	f002 0203 	and.w	r2, r2, #3
 8001400:	0092      	lsls	r2, r2, #2
 8001402:	4093      	lsls	r3, r2
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	4313      	orrs	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800140a:	492f      	ldr	r1, [pc, #188]	@ (80014c8 <HAL_GPIO_Init+0x2b0>)
 800140c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140e:	089b      	lsrs	r3, r3, #2
 8001410:	3302      	adds	r3, #2
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d006      	beq.n	8001432 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001424:	4b2c      	ldr	r3, [pc, #176]	@ (80014d8 <HAL_GPIO_Init+0x2c0>)
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	492b      	ldr	r1, [pc, #172]	@ (80014d8 <HAL_GPIO_Init+0x2c0>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	608b      	str	r3, [r1, #8]
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001432:	4b29      	ldr	r3, [pc, #164]	@ (80014d8 <HAL_GPIO_Init+0x2c0>)
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	43db      	mvns	r3, r3
 800143a:	4927      	ldr	r1, [pc, #156]	@ (80014d8 <HAL_GPIO_Init+0x2c0>)
 800143c:	4013      	ands	r3, r2
 800143e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d006      	beq.n	800145a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800144c:	4b22      	ldr	r3, [pc, #136]	@ (80014d8 <HAL_GPIO_Init+0x2c0>)
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	4921      	ldr	r1, [pc, #132]	@ (80014d8 <HAL_GPIO_Init+0x2c0>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	60cb      	str	r3, [r1, #12]
 8001458:	e006      	b.n	8001468 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800145a:	4b1f      	ldr	r3, [pc, #124]	@ (80014d8 <HAL_GPIO_Init+0x2c0>)
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	43db      	mvns	r3, r3
 8001462:	491d      	ldr	r1, [pc, #116]	@ (80014d8 <HAL_GPIO_Init+0x2c0>)
 8001464:	4013      	ands	r3, r2
 8001466:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d006      	beq.n	8001482 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001474:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <HAL_GPIO_Init+0x2c0>)
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	4917      	ldr	r1, [pc, #92]	@ (80014d8 <HAL_GPIO_Init+0x2c0>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	604b      	str	r3, [r1, #4]
 8001480:	e006      	b.n	8001490 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <HAL_GPIO_Init+0x2c0>)
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	43db      	mvns	r3, r3
 800148a:	4913      	ldr	r1, [pc, #76]	@ (80014d8 <HAL_GPIO_Init+0x2c0>)
 800148c:	4013      	ands	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d01f      	beq.n	80014dc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800149c:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <HAL_GPIO_Init+0x2c0>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	490d      	ldr	r1, [pc, #52]	@ (80014d8 <HAL_GPIO_Init+0x2c0>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	600b      	str	r3, [r1, #0]
 80014a8:	e01f      	b.n	80014ea <HAL_GPIO_Init+0x2d2>
 80014aa:	bf00      	nop
 80014ac:	10320000 	.word	0x10320000
 80014b0:	10310000 	.word	0x10310000
 80014b4:	10220000 	.word	0x10220000
 80014b8:	10210000 	.word	0x10210000
 80014bc:	10120000 	.word	0x10120000
 80014c0:	10110000 	.word	0x10110000
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40010000 	.word	0x40010000
 80014cc:	40010800 	.word	0x40010800
 80014d0:	40010c00 	.word	0x40010c00
 80014d4:	40011000 	.word	0x40011000
 80014d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014dc:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <HAL_GPIO_Init+0x2f4>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	4909      	ldr	r1, [pc, #36]	@ (800150c <HAL_GPIO_Init+0x2f4>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ec:	3301      	adds	r3, #1
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f6:	fa22 f303 	lsr.w	r3, r2, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f47f ae96 	bne.w	800122c <HAL_GPIO_Init+0x14>
  }
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	372c      	adds	r7, #44	@ 0x2c
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	40010400 	.word	0x40010400

08001510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	807b      	strh	r3, [r7, #2]
 800151c:	4613      	mov	r3, r2
 800151e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001520:	787b      	ldrb	r3, [r7, #1]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001526:	887a      	ldrh	r2, [r7, #2]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800152c:	e003      	b.n	8001536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800152e:	887b      	ldrh	r3, [r7, #2]
 8001530:	041a      	lsls	r2, r3, #16
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	611a      	str	r2, [r3, #16]
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001552:	887a      	ldrh	r2, [r7, #2]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4013      	ands	r3, r2
 8001558:	041a      	lsls	r2, r3, #16
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	43d9      	mvns	r1, r3
 800155e:	887b      	ldrh	r3, [r7, #2]
 8001560:	400b      	ands	r3, r1
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	611a      	str	r2, [r3, #16]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
	...

08001574 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e272      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 8087 	beq.w	80016a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001594:	4b92      	ldr	r3, [pc, #584]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 030c 	and.w	r3, r3, #12
 800159c:	2b04      	cmp	r3, #4
 800159e:	d00c      	beq.n	80015ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015a0:	4b8f      	ldr	r3, [pc, #572]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 030c 	and.w	r3, r3, #12
 80015a8:	2b08      	cmp	r3, #8
 80015aa:	d112      	bne.n	80015d2 <HAL_RCC_OscConfig+0x5e>
 80015ac:	4b8c      	ldr	r3, [pc, #560]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015b8:	d10b      	bne.n	80015d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ba:	4b89      	ldr	r3, [pc, #548]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d06c      	beq.n	80016a0 <HAL_RCC_OscConfig+0x12c>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d168      	bne.n	80016a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e24c      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015da:	d106      	bne.n	80015ea <HAL_RCC_OscConfig+0x76>
 80015dc:	4b80      	ldr	r3, [pc, #512]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a7f      	ldr	r2, [pc, #508]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80015e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	e02e      	b.n	8001648 <HAL_RCC_OscConfig+0xd4>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10c      	bne.n	800160c <HAL_RCC_OscConfig+0x98>
 80015f2:	4b7b      	ldr	r3, [pc, #492]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a7a      	ldr	r2, [pc, #488]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80015f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	4b78      	ldr	r3, [pc, #480]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a77      	ldr	r2, [pc, #476]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001604:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	e01d      	b.n	8001648 <HAL_RCC_OscConfig+0xd4>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001614:	d10c      	bne.n	8001630 <HAL_RCC_OscConfig+0xbc>
 8001616:	4b72      	ldr	r3, [pc, #456]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a71      	ldr	r2, [pc, #452]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 800161c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	4b6f      	ldr	r3, [pc, #444]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a6e      	ldr	r2, [pc, #440]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e00b      	b.n	8001648 <HAL_RCC_OscConfig+0xd4>
 8001630:	4b6b      	ldr	r3, [pc, #428]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a6a      	ldr	r2, [pc, #424]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b68      	ldr	r3, [pc, #416]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a67      	ldr	r2, [pc, #412]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001646:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d013      	beq.n	8001678 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff fca6 	bl	8000fa0 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001658:	f7ff fca2 	bl	8000fa0 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b64      	cmp	r3, #100	@ 0x64
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e200      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166a:	4b5d      	ldr	r3, [pc, #372]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0xe4>
 8001676:	e014      	b.n	80016a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fc92 	bl	8000fa0 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001680:	f7ff fc8e 	bl	8000fa0 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b64      	cmp	r3, #100	@ 0x64
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e1ec      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001692:	4b53      	ldr	r3, [pc, #332]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x10c>
 800169e:	e000      	b.n	80016a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d063      	beq.n	8001776 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ae:	4b4c      	ldr	r3, [pc, #304]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00b      	beq.n	80016d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016ba:	4b49      	ldr	r3, [pc, #292]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	d11c      	bne.n	8001700 <HAL_RCC_OscConfig+0x18c>
 80016c6:	4b46      	ldr	r3, [pc, #280]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d116      	bne.n	8001700 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d2:	4b43      	ldr	r3, [pc, #268]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <HAL_RCC_OscConfig+0x176>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d001      	beq.n	80016ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e1c0      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ea:	4b3d      	ldr	r3, [pc, #244]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	4939      	ldr	r1, [pc, #228]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fe:	e03a      	b.n	8001776 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d020      	beq.n	800174a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001708:	4b36      	ldr	r3, [pc, #216]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 800170a:	2201      	movs	r2, #1
 800170c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7ff fc47 	bl	8000fa0 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001716:	f7ff fc43 	bl	8000fa0 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e1a1      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001728:	4b2d      	ldr	r3, [pc, #180]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001734:	4b2a      	ldr	r3, [pc, #168]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	4927      	ldr	r1, [pc, #156]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001744:	4313      	orrs	r3, r2
 8001746:	600b      	str	r3, [r1, #0]
 8001748:	e015      	b.n	8001776 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800174a:	4b26      	ldr	r3, [pc, #152]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff fc26 	bl	8000fa0 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001758:	f7ff fc22 	bl	8000fa0 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e180      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176a:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	2b00      	cmp	r3, #0
 8001780:	d03a      	beq.n	80017f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d019      	beq.n	80017be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178a:	4b17      	ldr	r3, [pc, #92]	@ (80017e8 <HAL_RCC_OscConfig+0x274>)
 800178c:	2201      	movs	r2, #1
 800178e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001790:	f7ff fc06 	bl	8000fa0 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001798:	f7ff fc02 	bl	8000fa0 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e160      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017aa:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017b6:	2001      	movs	r0, #1
 80017b8:	f000 fa9c 	bl	8001cf4 <RCC_Delay>
 80017bc:	e01c      	b.n	80017f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017be:	4b0a      	ldr	r3, [pc, #40]	@ (80017e8 <HAL_RCC_OscConfig+0x274>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c4:	f7ff fbec 	bl	8000fa0 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ca:	e00f      	b.n	80017ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017cc:	f7ff fbe8 	bl	8000fa0 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d908      	bls.n	80017ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e146      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	42420000 	.word	0x42420000
 80017e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ec:	4b92      	ldr	r3, [pc, #584]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80017ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1e9      	bne.n	80017cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 80a6 	beq.w	8001952 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800180a:	4b8b      	ldr	r3, [pc, #556]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10d      	bne.n	8001832 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	4b88      	ldr	r3, [pc, #544]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	4a87      	ldr	r2, [pc, #540]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001820:	61d3      	str	r3, [r2, #28]
 8001822:	4b85      	ldr	r3, [pc, #532]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800182e:	2301      	movs	r3, #1
 8001830:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001832:	4b82      	ldr	r3, [pc, #520]	@ (8001a3c <HAL_RCC_OscConfig+0x4c8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800183a:	2b00      	cmp	r3, #0
 800183c:	d118      	bne.n	8001870 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800183e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a3c <HAL_RCC_OscConfig+0x4c8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a7e      	ldr	r2, [pc, #504]	@ (8001a3c <HAL_RCC_OscConfig+0x4c8>)
 8001844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800184a:	f7ff fba9 	bl	8000fa0 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001852:	f7ff fba5 	bl	8000fa0 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b64      	cmp	r3, #100	@ 0x64
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e103      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	4b75      	ldr	r3, [pc, #468]	@ (8001a3c <HAL_RCC_OscConfig+0x4c8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d106      	bne.n	8001886 <HAL_RCC_OscConfig+0x312>
 8001878:	4b6f      	ldr	r3, [pc, #444]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	4a6e      	ldr	r2, [pc, #440]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6213      	str	r3, [r2, #32]
 8001884:	e02d      	b.n	80018e2 <HAL_RCC_OscConfig+0x36e>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x334>
 800188e:	4b6a      	ldr	r3, [pc, #424]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	4a69      	ldr	r2, [pc, #420]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	f023 0301 	bic.w	r3, r3, #1
 8001898:	6213      	str	r3, [r2, #32]
 800189a:	4b67      	ldr	r3, [pc, #412]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	4a66      	ldr	r2, [pc, #408]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	f023 0304 	bic.w	r3, r3, #4
 80018a4:	6213      	str	r3, [r2, #32]
 80018a6:	e01c      	b.n	80018e2 <HAL_RCC_OscConfig+0x36e>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	d10c      	bne.n	80018ca <HAL_RCC_OscConfig+0x356>
 80018b0:	4b61      	ldr	r3, [pc, #388]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	4a60      	ldr	r2, [pc, #384]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80018b6:	f043 0304 	orr.w	r3, r3, #4
 80018ba:	6213      	str	r3, [r2, #32]
 80018bc:	4b5e      	ldr	r3, [pc, #376]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	4a5d      	ldr	r2, [pc, #372]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	6213      	str	r3, [r2, #32]
 80018c8:	e00b      	b.n	80018e2 <HAL_RCC_OscConfig+0x36e>
 80018ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	4a5a      	ldr	r2, [pc, #360]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	f023 0301 	bic.w	r3, r3, #1
 80018d4:	6213      	str	r3, [r2, #32]
 80018d6:	4b58      	ldr	r3, [pc, #352]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4a57      	ldr	r2, [pc, #348]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	f023 0304 	bic.w	r3, r3, #4
 80018e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d015      	beq.n	8001916 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ea:	f7ff fb59 	bl	8000fa0 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f0:	e00a      	b.n	8001908 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f2:	f7ff fb55 	bl	8000fa0 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001900:	4293      	cmp	r3, r2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e0b1      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001908:	4b4b      	ldr	r3, [pc, #300]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0ee      	beq.n	80018f2 <HAL_RCC_OscConfig+0x37e>
 8001914:	e014      	b.n	8001940 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001916:	f7ff fb43 	bl	8000fa0 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800191c:	e00a      	b.n	8001934 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191e:	f7ff fb3f 	bl	8000fa0 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	f241 3288 	movw	r2, #5000	@ 0x1388
 800192c:	4293      	cmp	r3, r2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e09b      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001934:	4b40      	ldr	r3, [pc, #256]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1ee      	bne.n	800191e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001940:	7dfb      	ldrb	r3, [r7, #23]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d105      	bne.n	8001952 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001946:	4b3c      	ldr	r3, [pc, #240]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	4a3b      	ldr	r2, [pc, #236]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001950:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 8087 	beq.w	8001a6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800195c:	4b36      	ldr	r3, [pc, #216]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	2b08      	cmp	r3, #8
 8001966:	d061      	beq.n	8001a2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d146      	bne.n	80019fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001970:	4b33      	ldr	r3, [pc, #204]	@ (8001a40 <HAL_RCC_OscConfig+0x4cc>)
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001976:	f7ff fb13 	bl	8000fa0 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197e:	f7ff fb0f 	bl	8000fa0 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e06d      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001990:	4b29      	ldr	r3, [pc, #164]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1f0      	bne.n	800197e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019a4:	d108      	bne.n	80019b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019a6:	4b24      	ldr	r3, [pc, #144]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	4921      	ldr	r1, [pc, #132]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a19      	ldr	r1, [r3, #32]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c8:	430b      	orrs	r3, r1
 80019ca:	491b      	ldr	r1, [pc, #108]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a40 <HAL_RCC_OscConfig+0x4cc>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d6:	f7ff fae3 	bl	8000fa0 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019de:	f7ff fadf 	bl	8000fa0 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e03d      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019f0:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x46a>
 80019fc:	e035      	b.n	8001a6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fe:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <HAL_RCC_OscConfig+0x4cc>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff facc 	bl	8000fa0 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0c:	f7ff fac8 	bl	8000fa0 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e026      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a1e:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x498>
 8001a2a:	e01e      	b.n	8001a6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d107      	bne.n	8001a44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e019      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40007000 	.word	0x40007000
 8001a40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a44:	4b0b      	ldr	r3, [pc, #44]	@ (8001a74 <HAL_RCC_OscConfig+0x500>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d106      	bne.n	8001a66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d001      	beq.n	8001a6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40021000 	.word	0x40021000

08001a78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0d0      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b6a      	ldr	r3, [pc, #424]	@ (8001c38 <HAL_RCC_ClockConfig+0x1c0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d910      	bls.n	8001abc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b67      	ldr	r3, [pc, #412]	@ (8001c38 <HAL_RCC_ClockConfig+0x1c0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 0207 	bic.w	r2, r3, #7
 8001aa2:	4965      	ldr	r1, [pc, #404]	@ (8001c38 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b63      	ldr	r3, [pc, #396]	@ (8001c38 <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0b8      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d020      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad4:	4b59      	ldr	r3, [pc, #356]	@ (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	4a58      	ldr	r2, [pc, #352]	@ (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ade:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aec:	4b53      	ldr	r3, [pc, #332]	@ (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4a52      	ldr	r2, [pc, #328]	@ (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001af6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af8:	4b50      	ldr	r3, [pc, #320]	@ (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	494d      	ldr	r1, [pc, #308]	@ (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d040      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d107      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	4b47      	ldr	r3, [pc, #284]	@ (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d115      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e07f      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d107      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b36:	4b41      	ldr	r3, [pc, #260]	@ (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d109      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e073      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b46:	4b3d      	ldr	r3, [pc, #244]	@ (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e06b      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b56:	4b39      	ldr	r3, [pc, #228]	@ (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f023 0203 	bic.w	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4936      	ldr	r1, [pc, #216]	@ (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b68:	f7ff fa1a 	bl	8000fa0 <HAL_GetTick>
 8001b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b70:	f7ff fa16 	bl	8000fa0 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e053      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b86:	4b2d      	ldr	r3, [pc, #180]	@ (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 020c 	and.w	r2, r3, #12
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d1eb      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b98:	4b27      	ldr	r3, [pc, #156]	@ (8001c38 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d210      	bcs.n	8001bc8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b24      	ldr	r3, [pc, #144]	@ (8001c38 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 0207 	bic.w	r2, r3, #7
 8001bae:	4922      	ldr	r1, [pc, #136]	@ (8001c38 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb6:	4b20      	ldr	r3, [pc, #128]	@ (8001c38 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e032      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd4:	4b19      	ldr	r3, [pc, #100]	@ (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	4916      	ldr	r1, [pc, #88]	@ (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d009      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bf2:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	490e      	ldr	r1, [pc, #56]	@ (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c06:	f000 f821 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	490a      	ldr	r1, [pc, #40]	@ (8001c40 <HAL_RCC_ClockConfig+0x1c8>)
 8001c18:	5ccb      	ldrb	r3, [r1, r3]
 8001c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1e:	4a09      	ldr	r2, [pc, #36]	@ (8001c44 <HAL_RCC_ClockConfig+0x1cc>)
 8001c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c22:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <HAL_RCC_ClockConfig+0x1d0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f978 	bl	8000f1c <HAL_InitTick>

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40022000 	.word	0x40022000
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	080027a4 	.word	0x080027a4
 8001c44:	20000000 	.word	0x20000000
 8001c48:	20000004 	.word	0x20000004

08001c4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d002      	beq.n	8001c7c <HAL_RCC_GetSysClockFreq+0x30>
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d003      	beq.n	8001c82 <HAL_RCC_GetSysClockFreq+0x36>
 8001c7a:	e027      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c7e:	613b      	str	r3, [r7, #16]
      break;
 8001c80:	e027      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	0c9b      	lsrs	r3, r3, #18
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	4a17      	ldr	r2, [pc, #92]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c8c:	5cd3      	ldrb	r3, [r2, r3]
 8001c8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d010      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	0c5b      	lsrs	r3, r3, #17
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	4a11      	ldr	r2, [pc, #68]	@ (8001cec <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
 8001ca8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cae:	fb03 f202 	mul.w	r2, r3, r2
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	e004      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cc0:	fb02 f303 	mul.w	r3, r2, r3
 8001cc4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	613b      	str	r3, [r7, #16]
      break;
 8001cca:	e002      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ccc:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cce:	613b      	str	r3, [r7, #16]
      break;
 8001cd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cd2:	693b      	ldr	r3, [r7, #16]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	371c      	adds	r7, #28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	007a1200 	.word	0x007a1200
 8001ce8:	080027b4 	.word	0x080027b4
 8001cec:	080027c4 	.word	0x080027c4
 8001cf0:	003d0900 	.word	0x003d0900

08001cf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <RCC_Delay+0x34>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <RCC_Delay+0x38>)
 8001d02:	fba2 2303 	umull	r2, r3, r2, r3
 8001d06:	0a5b      	lsrs	r3, r3, #9
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d10:	bf00      	nop
  }
  while (Delay --);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1e5a      	subs	r2, r3, #1
 8001d16:	60fa      	str	r2, [r7, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1f9      	bne.n	8001d10 <RCC_Delay+0x1c>
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	10624dd3 	.word	0x10624dd3

08001d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e041      	b.n	8001dc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d106      	bne.n	8001d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff f80e 	bl	8000d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f000 fa56 	bl	8002220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d001      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e035      	b.n	8001e54 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a16      	ldr	r2, [pc, #88]	@ (8001e60 <HAL_TIM_Base_Start_IT+0x90>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d009      	beq.n	8001e1e <HAL_TIM_Base_Start_IT+0x4e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e12:	d004      	beq.n	8001e1e <HAL_TIM_Base_Start_IT+0x4e>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a12      	ldr	r2, [pc, #72]	@ (8001e64 <HAL_TIM_Base_Start_IT+0x94>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d111      	bne.n	8001e42 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2b06      	cmp	r3, #6
 8001e2e:	d010      	beq.n	8001e52 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e40:	e007      	b.n	8001e52 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0201 	orr.w	r2, r2, #1
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40012c00 	.word	0x40012c00
 8001e64:	40000400 	.word	0x40000400

08001e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d020      	beq.n	8001ecc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01b      	beq.n	8001ecc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0202 	mvn.w	r2, #2
 8001e9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f998 	bl	80021e8 <HAL_TIM_IC_CaptureCallback>
 8001eb8:	e005      	b.n	8001ec6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f98b 	bl	80021d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f99a 	bl	80021fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d020      	beq.n	8001f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d01b      	beq.n	8001f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0204 	mvn.w	r2, #4
 8001ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2202      	movs	r2, #2
 8001eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f972 	bl	80021e8 <HAL_TIM_IC_CaptureCallback>
 8001f04:	e005      	b.n	8001f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f965 	bl	80021d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f974 	bl	80021fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d020      	beq.n	8001f64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d01b      	beq.n	8001f64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0208 	mvn.w	r2, #8
 8001f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2204      	movs	r2, #4
 8001f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f94c 	bl	80021e8 <HAL_TIM_IC_CaptureCallback>
 8001f50:	e005      	b.n	8001f5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f93f 	bl	80021d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f94e 	bl	80021fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d020      	beq.n	8001fb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d01b      	beq.n	8001fb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0210 	mvn.w	r2, #16
 8001f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2208      	movs	r2, #8
 8001f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f926 	bl	80021e8 <HAL_TIM_IC_CaptureCallback>
 8001f9c:	e005      	b.n	8001faa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f919 	bl	80021d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f928 	bl	80021fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00c      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d007      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0201 	mvn.w	r2, #1
 8001fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe fc24 	bl	800081c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00c      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d007      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 fa6f 	bl	80024d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00c      	beq.n	800201c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f8f8 	bl	800220c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f003 0320 	and.w	r3, r3, #32
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00c      	beq.n	8002040 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f003 0320 	and.w	r3, r3, #32
 800202c:	2b00      	cmp	r3, #0
 800202e:	d007      	beq.n	8002040 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0220 	mvn.w	r2, #32
 8002038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fa42 	bl	80024c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_TIM_ConfigClockSource+0x1c>
 8002060:	2302      	movs	r3, #2
 8002062:	e0b4      	b.n	80021ce <HAL_TIM_ConfigClockSource+0x186>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2202      	movs	r2, #2
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800208a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800209c:	d03e      	beq.n	800211c <HAL_TIM_ConfigClockSource+0xd4>
 800209e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020a2:	f200 8087 	bhi.w	80021b4 <HAL_TIM_ConfigClockSource+0x16c>
 80020a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020aa:	f000 8086 	beq.w	80021ba <HAL_TIM_ConfigClockSource+0x172>
 80020ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020b2:	d87f      	bhi.n	80021b4 <HAL_TIM_ConfigClockSource+0x16c>
 80020b4:	2b70      	cmp	r3, #112	@ 0x70
 80020b6:	d01a      	beq.n	80020ee <HAL_TIM_ConfigClockSource+0xa6>
 80020b8:	2b70      	cmp	r3, #112	@ 0x70
 80020ba:	d87b      	bhi.n	80021b4 <HAL_TIM_ConfigClockSource+0x16c>
 80020bc:	2b60      	cmp	r3, #96	@ 0x60
 80020be:	d050      	beq.n	8002162 <HAL_TIM_ConfigClockSource+0x11a>
 80020c0:	2b60      	cmp	r3, #96	@ 0x60
 80020c2:	d877      	bhi.n	80021b4 <HAL_TIM_ConfigClockSource+0x16c>
 80020c4:	2b50      	cmp	r3, #80	@ 0x50
 80020c6:	d03c      	beq.n	8002142 <HAL_TIM_ConfigClockSource+0xfa>
 80020c8:	2b50      	cmp	r3, #80	@ 0x50
 80020ca:	d873      	bhi.n	80021b4 <HAL_TIM_ConfigClockSource+0x16c>
 80020cc:	2b40      	cmp	r3, #64	@ 0x40
 80020ce:	d058      	beq.n	8002182 <HAL_TIM_ConfigClockSource+0x13a>
 80020d0:	2b40      	cmp	r3, #64	@ 0x40
 80020d2:	d86f      	bhi.n	80021b4 <HAL_TIM_ConfigClockSource+0x16c>
 80020d4:	2b30      	cmp	r3, #48	@ 0x30
 80020d6:	d064      	beq.n	80021a2 <HAL_TIM_ConfigClockSource+0x15a>
 80020d8:	2b30      	cmp	r3, #48	@ 0x30
 80020da:	d86b      	bhi.n	80021b4 <HAL_TIM_ConfigClockSource+0x16c>
 80020dc:	2b20      	cmp	r3, #32
 80020de:	d060      	beq.n	80021a2 <HAL_TIM_ConfigClockSource+0x15a>
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	d867      	bhi.n	80021b4 <HAL_TIM_ConfigClockSource+0x16c>
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d05c      	beq.n	80021a2 <HAL_TIM_ConfigClockSource+0x15a>
 80020e8:	2b10      	cmp	r3, #16
 80020ea:	d05a      	beq.n	80021a2 <HAL_TIM_ConfigClockSource+0x15a>
 80020ec:	e062      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020fe:	f000 f96a 	bl	80023d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002110:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	609a      	str	r2, [r3, #8]
      break;
 800211a:	e04f      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800212c:	f000 f953 	bl	80023d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800213e:	609a      	str	r2, [r3, #8]
      break;
 8002140:	e03c      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800214e:	461a      	mov	r2, r3
 8002150:	f000 f8ca 	bl	80022e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2150      	movs	r1, #80	@ 0x50
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f921 	bl	80023a2 <TIM_ITRx_SetConfig>
      break;
 8002160:	e02c      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800216e:	461a      	mov	r2, r3
 8002170:	f000 f8e8 	bl	8002344 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2160      	movs	r1, #96	@ 0x60
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f911 	bl	80023a2 <TIM_ITRx_SetConfig>
      break;
 8002180:	e01c      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800218e:	461a      	mov	r2, r3
 8002190:	f000 f8aa 	bl	80022e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2140      	movs	r1, #64	@ 0x40
 800219a:	4618      	mov	r0, r3
 800219c:	f000 f901 	bl	80023a2 <TIM_ITRx_SetConfig>
      break;
 80021a0:	e00c      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4619      	mov	r1, r3
 80021ac:	4610      	mov	r0, r2
 80021ae:	f000 f8f8 	bl	80023a2 <TIM_ITRx_SetConfig>
      break;
 80021b2:	e003      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
      break;
 80021b8:	e000      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80021ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
	...

08002220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a2b      	ldr	r2, [pc, #172]	@ (80022e0 <TIM_Base_SetConfig+0xc0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d007      	beq.n	8002248 <TIM_Base_SetConfig+0x28>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800223e:	d003      	beq.n	8002248 <TIM_Base_SetConfig+0x28>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a28      	ldr	r2, [pc, #160]	@ (80022e4 <TIM_Base_SetConfig+0xc4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d108      	bne.n	800225a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800224e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a20      	ldr	r2, [pc, #128]	@ (80022e0 <TIM_Base_SetConfig+0xc0>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d007      	beq.n	8002272 <TIM_Base_SetConfig+0x52>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002268:	d003      	beq.n	8002272 <TIM_Base_SetConfig+0x52>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a1d      	ldr	r2, [pc, #116]	@ (80022e4 <TIM_Base_SetConfig+0xc4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d108      	bne.n	8002284 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4313      	orrs	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a0d      	ldr	r2, [pc, #52]	@ (80022e0 <TIM_Base_SetConfig+0xc0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d103      	bne.n	80022b8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f023 0201 	bic.w	r2, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	611a      	str	r2, [r3, #16]
  }
}
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	40012c00 	.word	0x40012c00
 80022e4:	40000400 	.word	0x40000400

080022e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	f023 0201 	bic.w	r2, r3, #1
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f023 030a 	bic.w	r3, r3, #10
 8002324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4313      	orrs	r3, r2
 800232c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	621a      	str	r2, [r3, #32]
}
 800233a:	bf00      	nop
 800233c:	371c      	adds	r7, #28
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	f023 0210 	bic.w	r2, r3, #16
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800236e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	031b      	lsls	r3, r3, #12
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002380:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4313      	orrs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	621a      	str	r2, [r3, #32]
}
 8002398:	bf00      	nop
 800239a:	371c      	adds	r7, #28
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr

080023a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b085      	sub	sp, #20
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4313      	orrs	r3, r2
 80023c0:	f043 0307 	orr.w	r3, r3, #7
 80023c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	609a      	str	r2, [r3, #8]
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b087      	sub	sp, #28
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	021a      	lsls	r2, r3, #8
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	431a      	orrs	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	609a      	str	r2, [r3, #8]
}
 800240a:	bf00      	nop
 800240c:	371c      	adds	r7, #28
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002428:	2302      	movs	r3, #2
 800242a:	e041      	b.n	80024b0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002452:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4313      	orrs	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a14      	ldr	r2, [pc, #80]	@ (80024bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d009      	beq.n	8002484 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002478:	d004      	beq.n	8002484 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a10      	ldr	r2, [pc, #64]	@ (80024c0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d10c      	bne.n	800249e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800248a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	4313      	orrs	r3, r2
 8002494:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40012c00 	.word	0x40012c00
 80024c0:	40000400 	.word	0x40000400

080024c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <malloc>:
 80024e8:	4b02      	ldr	r3, [pc, #8]	@ (80024f4 <malloc+0xc>)
 80024ea:	4601      	mov	r1, r0
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	f000 b82d 	b.w	800254c <_malloc_r>
 80024f2:	bf00      	nop
 80024f4:	2000000c 	.word	0x2000000c

080024f8 <free>:
 80024f8:	4b02      	ldr	r3, [pc, #8]	@ (8002504 <free+0xc>)
 80024fa:	4601      	mov	r1, r0
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	f000 b8f5 	b.w	80026ec <_free_r>
 8002502:	bf00      	nop
 8002504:	2000000c 	.word	0x2000000c

08002508 <sbrk_aligned>:
 8002508:	b570      	push	{r4, r5, r6, lr}
 800250a:	4e0f      	ldr	r6, [pc, #60]	@ (8002548 <sbrk_aligned+0x40>)
 800250c:	460c      	mov	r4, r1
 800250e:	6831      	ldr	r1, [r6, #0]
 8002510:	4605      	mov	r5, r0
 8002512:	b911      	cbnz	r1, 800251a <sbrk_aligned+0x12>
 8002514:	f000 f8ae 	bl	8002674 <_sbrk_r>
 8002518:	6030      	str	r0, [r6, #0]
 800251a:	4621      	mov	r1, r4
 800251c:	4628      	mov	r0, r5
 800251e:	f000 f8a9 	bl	8002674 <_sbrk_r>
 8002522:	1c43      	adds	r3, r0, #1
 8002524:	d103      	bne.n	800252e <sbrk_aligned+0x26>
 8002526:	f04f 34ff 	mov.w	r4, #4294967295
 800252a:	4620      	mov	r0, r4
 800252c:	bd70      	pop	{r4, r5, r6, pc}
 800252e:	1cc4      	adds	r4, r0, #3
 8002530:	f024 0403 	bic.w	r4, r4, #3
 8002534:	42a0      	cmp	r0, r4
 8002536:	d0f8      	beq.n	800252a <sbrk_aligned+0x22>
 8002538:	1a21      	subs	r1, r4, r0
 800253a:	4628      	mov	r0, r5
 800253c:	f000 f89a 	bl	8002674 <_sbrk_r>
 8002540:	3001      	adds	r0, #1
 8002542:	d1f2      	bne.n	800252a <sbrk_aligned+0x22>
 8002544:	e7ef      	b.n	8002526 <sbrk_aligned+0x1e>
 8002546:	bf00      	nop
 8002548:	20000118 	.word	0x20000118

0800254c <_malloc_r>:
 800254c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002550:	1ccd      	adds	r5, r1, #3
 8002552:	f025 0503 	bic.w	r5, r5, #3
 8002556:	3508      	adds	r5, #8
 8002558:	2d0c      	cmp	r5, #12
 800255a:	bf38      	it	cc
 800255c:	250c      	movcc	r5, #12
 800255e:	2d00      	cmp	r5, #0
 8002560:	4606      	mov	r6, r0
 8002562:	db01      	blt.n	8002568 <_malloc_r+0x1c>
 8002564:	42a9      	cmp	r1, r5
 8002566:	d904      	bls.n	8002572 <_malloc_r+0x26>
 8002568:	230c      	movs	r3, #12
 800256a:	6033      	str	r3, [r6, #0]
 800256c:	2000      	movs	r0, #0
 800256e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002572:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002648 <_malloc_r+0xfc>
 8002576:	f000 f869 	bl	800264c <__malloc_lock>
 800257a:	f8d8 3000 	ldr.w	r3, [r8]
 800257e:	461c      	mov	r4, r3
 8002580:	bb44      	cbnz	r4, 80025d4 <_malloc_r+0x88>
 8002582:	4629      	mov	r1, r5
 8002584:	4630      	mov	r0, r6
 8002586:	f7ff ffbf 	bl	8002508 <sbrk_aligned>
 800258a:	1c43      	adds	r3, r0, #1
 800258c:	4604      	mov	r4, r0
 800258e:	d158      	bne.n	8002642 <_malloc_r+0xf6>
 8002590:	f8d8 4000 	ldr.w	r4, [r8]
 8002594:	4627      	mov	r7, r4
 8002596:	2f00      	cmp	r7, #0
 8002598:	d143      	bne.n	8002622 <_malloc_r+0xd6>
 800259a:	2c00      	cmp	r4, #0
 800259c:	d04b      	beq.n	8002636 <_malloc_r+0xea>
 800259e:	6823      	ldr	r3, [r4, #0]
 80025a0:	4639      	mov	r1, r7
 80025a2:	4630      	mov	r0, r6
 80025a4:	eb04 0903 	add.w	r9, r4, r3
 80025a8:	f000 f864 	bl	8002674 <_sbrk_r>
 80025ac:	4581      	cmp	r9, r0
 80025ae:	d142      	bne.n	8002636 <_malloc_r+0xea>
 80025b0:	6821      	ldr	r1, [r4, #0]
 80025b2:	4630      	mov	r0, r6
 80025b4:	1a6d      	subs	r5, r5, r1
 80025b6:	4629      	mov	r1, r5
 80025b8:	f7ff ffa6 	bl	8002508 <sbrk_aligned>
 80025bc:	3001      	adds	r0, #1
 80025be:	d03a      	beq.n	8002636 <_malloc_r+0xea>
 80025c0:	6823      	ldr	r3, [r4, #0]
 80025c2:	442b      	add	r3, r5
 80025c4:	6023      	str	r3, [r4, #0]
 80025c6:	f8d8 3000 	ldr.w	r3, [r8]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	bb62      	cbnz	r2, 8002628 <_malloc_r+0xdc>
 80025ce:	f8c8 7000 	str.w	r7, [r8]
 80025d2:	e00f      	b.n	80025f4 <_malloc_r+0xa8>
 80025d4:	6822      	ldr	r2, [r4, #0]
 80025d6:	1b52      	subs	r2, r2, r5
 80025d8:	d420      	bmi.n	800261c <_malloc_r+0xd0>
 80025da:	2a0b      	cmp	r2, #11
 80025dc:	d917      	bls.n	800260e <_malloc_r+0xc2>
 80025de:	1961      	adds	r1, r4, r5
 80025e0:	42a3      	cmp	r3, r4
 80025e2:	6025      	str	r5, [r4, #0]
 80025e4:	bf18      	it	ne
 80025e6:	6059      	strne	r1, [r3, #4]
 80025e8:	6863      	ldr	r3, [r4, #4]
 80025ea:	bf08      	it	eq
 80025ec:	f8c8 1000 	streq.w	r1, [r8]
 80025f0:	5162      	str	r2, [r4, r5]
 80025f2:	604b      	str	r3, [r1, #4]
 80025f4:	4630      	mov	r0, r6
 80025f6:	f000 f82f 	bl	8002658 <__malloc_unlock>
 80025fa:	f104 000b 	add.w	r0, r4, #11
 80025fe:	1d23      	adds	r3, r4, #4
 8002600:	f020 0007 	bic.w	r0, r0, #7
 8002604:	1ac2      	subs	r2, r0, r3
 8002606:	bf1c      	itt	ne
 8002608:	1a1b      	subne	r3, r3, r0
 800260a:	50a3      	strne	r3, [r4, r2]
 800260c:	e7af      	b.n	800256e <_malloc_r+0x22>
 800260e:	6862      	ldr	r2, [r4, #4]
 8002610:	42a3      	cmp	r3, r4
 8002612:	bf0c      	ite	eq
 8002614:	f8c8 2000 	streq.w	r2, [r8]
 8002618:	605a      	strne	r2, [r3, #4]
 800261a:	e7eb      	b.n	80025f4 <_malloc_r+0xa8>
 800261c:	4623      	mov	r3, r4
 800261e:	6864      	ldr	r4, [r4, #4]
 8002620:	e7ae      	b.n	8002580 <_malloc_r+0x34>
 8002622:	463c      	mov	r4, r7
 8002624:	687f      	ldr	r7, [r7, #4]
 8002626:	e7b6      	b.n	8002596 <_malloc_r+0x4a>
 8002628:	461a      	mov	r2, r3
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	42a3      	cmp	r3, r4
 800262e:	d1fb      	bne.n	8002628 <_malloc_r+0xdc>
 8002630:	2300      	movs	r3, #0
 8002632:	6053      	str	r3, [r2, #4]
 8002634:	e7de      	b.n	80025f4 <_malloc_r+0xa8>
 8002636:	230c      	movs	r3, #12
 8002638:	4630      	mov	r0, r6
 800263a:	6033      	str	r3, [r6, #0]
 800263c:	f000 f80c 	bl	8002658 <__malloc_unlock>
 8002640:	e794      	b.n	800256c <_malloc_r+0x20>
 8002642:	6005      	str	r5, [r0, #0]
 8002644:	e7d6      	b.n	80025f4 <_malloc_r+0xa8>
 8002646:	bf00      	nop
 8002648:	2000011c 	.word	0x2000011c

0800264c <__malloc_lock>:
 800264c:	4801      	ldr	r0, [pc, #4]	@ (8002654 <__malloc_lock+0x8>)
 800264e:	f000 b84b 	b.w	80026e8 <__retarget_lock_acquire_recursive>
 8002652:	bf00      	nop
 8002654:	2000025c 	.word	0x2000025c

08002658 <__malloc_unlock>:
 8002658:	4801      	ldr	r0, [pc, #4]	@ (8002660 <__malloc_unlock+0x8>)
 800265a:	f000 b846 	b.w	80026ea <__retarget_lock_release_recursive>
 800265e:	bf00      	nop
 8002660:	2000025c 	.word	0x2000025c

08002664 <memset>:
 8002664:	4603      	mov	r3, r0
 8002666:	4402      	add	r2, r0
 8002668:	4293      	cmp	r3, r2
 800266a:	d100      	bne.n	800266e <memset+0xa>
 800266c:	4770      	bx	lr
 800266e:	f803 1b01 	strb.w	r1, [r3], #1
 8002672:	e7f9      	b.n	8002668 <memset+0x4>

08002674 <_sbrk_r>:
 8002674:	b538      	push	{r3, r4, r5, lr}
 8002676:	2300      	movs	r3, #0
 8002678:	4d05      	ldr	r5, [pc, #20]	@ (8002690 <_sbrk_r+0x1c>)
 800267a:	4604      	mov	r4, r0
 800267c:	4608      	mov	r0, r1
 800267e:	602b      	str	r3, [r5, #0]
 8002680:	f7fe fbd4 	bl	8000e2c <_sbrk>
 8002684:	1c43      	adds	r3, r0, #1
 8002686:	d102      	bne.n	800268e <_sbrk_r+0x1a>
 8002688:	682b      	ldr	r3, [r5, #0]
 800268a:	b103      	cbz	r3, 800268e <_sbrk_r+0x1a>
 800268c:	6023      	str	r3, [r4, #0]
 800268e:	bd38      	pop	{r3, r4, r5, pc}
 8002690:	20000258 	.word	0x20000258

08002694 <__errno>:
 8002694:	4b01      	ldr	r3, [pc, #4]	@ (800269c <__errno+0x8>)
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	2000000c 	.word	0x2000000c

080026a0 <__libc_init_array>:
 80026a0:	b570      	push	{r4, r5, r6, lr}
 80026a2:	2600      	movs	r6, #0
 80026a4:	4d0c      	ldr	r5, [pc, #48]	@ (80026d8 <__libc_init_array+0x38>)
 80026a6:	4c0d      	ldr	r4, [pc, #52]	@ (80026dc <__libc_init_array+0x3c>)
 80026a8:	1b64      	subs	r4, r4, r5
 80026aa:	10a4      	asrs	r4, r4, #2
 80026ac:	42a6      	cmp	r6, r4
 80026ae:	d109      	bne.n	80026c4 <__libc_init_array+0x24>
 80026b0:	f000 f864 	bl	800277c <_init>
 80026b4:	2600      	movs	r6, #0
 80026b6:	4d0a      	ldr	r5, [pc, #40]	@ (80026e0 <__libc_init_array+0x40>)
 80026b8:	4c0a      	ldr	r4, [pc, #40]	@ (80026e4 <__libc_init_array+0x44>)
 80026ba:	1b64      	subs	r4, r4, r5
 80026bc:	10a4      	asrs	r4, r4, #2
 80026be:	42a6      	cmp	r6, r4
 80026c0:	d105      	bne.n	80026ce <__libc_init_array+0x2e>
 80026c2:	bd70      	pop	{r4, r5, r6, pc}
 80026c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c8:	4798      	blx	r3
 80026ca:	3601      	adds	r6, #1
 80026cc:	e7ee      	b.n	80026ac <__libc_init_array+0xc>
 80026ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80026d2:	4798      	blx	r3
 80026d4:	3601      	adds	r6, #1
 80026d6:	e7f2      	b.n	80026be <__libc_init_array+0x1e>
 80026d8:	080027c8 	.word	0x080027c8
 80026dc:	080027c8 	.word	0x080027c8
 80026e0:	080027c8 	.word	0x080027c8
 80026e4:	080027cc 	.word	0x080027cc

080026e8 <__retarget_lock_acquire_recursive>:
 80026e8:	4770      	bx	lr

080026ea <__retarget_lock_release_recursive>:
 80026ea:	4770      	bx	lr

080026ec <_free_r>:
 80026ec:	b538      	push	{r3, r4, r5, lr}
 80026ee:	4605      	mov	r5, r0
 80026f0:	2900      	cmp	r1, #0
 80026f2:	d040      	beq.n	8002776 <_free_r+0x8a>
 80026f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026f8:	1f0c      	subs	r4, r1, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bfb8      	it	lt
 80026fe:	18e4      	addlt	r4, r4, r3
 8002700:	f7ff ffa4 	bl	800264c <__malloc_lock>
 8002704:	4a1c      	ldr	r2, [pc, #112]	@ (8002778 <_free_r+0x8c>)
 8002706:	6813      	ldr	r3, [r2, #0]
 8002708:	b933      	cbnz	r3, 8002718 <_free_r+0x2c>
 800270a:	6063      	str	r3, [r4, #4]
 800270c:	6014      	str	r4, [r2, #0]
 800270e:	4628      	mov	r0, r5
 8002710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002714:	f7ff bfa0 	b.w	8002658 <__malloc_unlock>
 8002718:	42a3      	cmp	r3, r4
 800271a:	d908      	bls.n	800272e <_free_r+0x42>
 800271c:	6820      	ldr	r0, [r4, #0]
 800271e:	1821      	adds	r1, r4, r0
 8002720:	428b      	cmp	r3, r1
 8002722:	bf01      	itttt	eq
 8002724:	6819      	ldreq	r1, [r3, #0]
 8002726:	685b      	ldreq	r3, [r3, #4]
 8002728:	1809      	addeq	r1, r1, r0
 800272a:	6021      	streq	r1, [r4, #0]
 800272c:	e7ed      	b.n	800270a <_free_r+0x1e>
 800272e:	461a      	mov	r2, r3
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	b10b      	cbz	r3, 8002738 <_free_r+0x4c>
 8002734:	42a3      	cmp	r3, r4
 8002736:	d9fa      	bls.n	800272e <_free_r+0x42>
 8002738:	6811      	ldr	r1, [r2, #0]
 800273a:	1850      	adds	r0, r2, r1
 800273c:	42a0      	cmp	r0, r4
 800273e:	d10b      	bne.n	8002758 <_free_r+0x6c>
 8002740:	6820      	ldr	r0, [r4, #0]
 8002742:	4401      	add	r1, r0
 8002744:	1850      	adds	r0, r2, r1
 8002746:	4283      	cmp	r3, r0
 8002748:	6011      	str	r1, [r2, #0]
 800274a:	d1e0      	bne.n	800270e <_free_r+0x22>
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	4408      	add	r0, r1
 8002752:	6010      	str	r0, [r2, #0]
 8002754:	6053      	str	r3, [r2, #4]
 8002756:	e7da      	b.n	800270e <_free_r+0x22>
 8002758:	d902      	bls.n	8002760 <_free_r+0x74>
 800275a:	230c      	movs	r3, #12
 800275c:	602b      	str	r3, [r5, #0]
 800275e:	e7d6      	b.n	800270e <_free_r+0x22>
 8002760:	6820      	ldr	r0, [r4, #0]
 8002762:	1821      	adds	r1, r4, r0
 8002764:	428b      	cmp	r3, r1
 8002766:	bf01      	itttt	eq
 8002768:	6819      	ldreq	r1, [r3, #0]
 800276a:	685b      	ldreq	r3, [r3, #4]
 800276c:	1809      	addeq	r1, r1, r0
 800276e:	6021      	streq	r1, [r4, #0]
 8002770:	6063      	str	r3, [r4, #4]
 8002772:	6054      	str	r4, [r2, #4]
 8002774:	e7cb      	b.n	800270e <_free_r+0x22>
 8002776:	bd38      	pop	{r3, r4, r5, pc}
 8002778:	2000011c 	.word	0x2000011c

0800277c <_init>:
 800277c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277e:	bf00      	nop
 8002780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002782:	bc08      	pop	{r3}
 8002784:	469e      	mov	lr, r3
 8002786:	4770      	bx	lr

08002788 <_fini>:
 8002788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800278a:	bf00      	nop
 800278c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800278e:	bc08      	pop	{r3}
 8002790:	469e      	mov	lr, r3
 8002792:	4770      	bx	lr
