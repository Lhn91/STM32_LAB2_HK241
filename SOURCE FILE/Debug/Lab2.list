
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026bc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080027c8  080027c8  000037c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027fc  080027fc  0000405c  2**0
                  CONTENTS
  4 .ARM          00000000  080027fc  080027fc  0000405c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027fc  080027fc  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027fc  080027fc  000037fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002800  08002800  00003800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002804  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000005c  08002860  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08002860  00004260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083db  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a80  00000000  00000000  0000c460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0000dee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007a3  00000000  00000000  0000e8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017591  00000000  00000000  0000f083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9c4  00000000  00000000  00026614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085abd  00000000  00000000  00031fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7a95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b64  00000000  00000000  000b7ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000ba63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080027b0 	.word	0x080027b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080027b0 	.word	0x080027b0

0800014c <convert_to_binary_array>:
//{0xFE, 0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F};COL
#include "led_matrix.h"
const int MAX_LED_MATRIX = 8;
int index_led_matrix = 0;

uint8_t* convert_to_binary_array(uint8_t value) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
    uint8_t* binary_array = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8000156:	2008      	movs	r0, #8
 8000158:	f002 f9e0 	bl	800251c <malloc>
 800015c:	4603      	mov	r3, r0
 800015e:	60bb      	str	r3, [r7, #8]

    if (binary_array == NULL) {
 8000160:	68bb      	ldr	r3, [r7, #8]
 8000162:	2b00      	cmp	r3, #0
 8000164:	d101      	bne.n	800016a <convert_to_binary_array+0x1e>
        return NULL;
 8000166:	2300      	movs	r3, #0
 8000168:	e017      	b.n	800019a <convert_to_binary_array+0x4e>
    }

    for (int i = 0; i < 8; i++) {
 800016a:	2300      	movs	r3, #0
 800016c:	60fb      	str	r3, [r7, #12]
 800016e:	e010      	b.n	8000192 <convert_to_binary_array+0x46>
        binary_array[i] = (value >> (7 - i)) & 0x01;
 8000170:	79fa      	ldrb	r2, [r7, #7]
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	f1c3 0307 	rsb	r3, r3, #7
 8000178:	fa42 f303 	asr.w	r3, r2, r3
 800017c:	b2da      	uxtb	r2, r3
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	68b9      	ldr	r1, [r7, #8]
 8000182:	440b      	add	r3, r1
 8000184:	f002 0201 	and.w	r2, r2, #1
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	3301      	adds	r3, #1
 8000190:	60fb      	str	r3, [r7, #12]
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	2b07      	cmp	r3, #7
 8000196:	ddeb      	ble.n	8000170 <convert_to_binary_array+0x24>
    }

    return binary_array;
 8000198:	68bb      	ldr	r3, [r7, #8]
}
 800019a:	4618      	mov	r0, r3
 800019c:	3710      	adds	r7, #16
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
	...

080001a4 <resetRow>:
void resetRow(){
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001ae:	4817      	ldr	r0, [pc, #92]	@ (800020c <resetRow+0x68>)
 80001b0:	f001 f9c8 	bl	8001544 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001ba:	4814      	ldr	r0, [pc, #80]	@ (800020c <resetRow+0x68>)
 80001bc:	f001 f9c2 	bl	8001544 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001c6:	4811      	ldr	r0, [pc, #68]	@ (800020c <resetRow+0x68>)
 80001c8:	f001 f9bc 	bl	8001544 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001d2:	480e      	ldr	r0, [pc, #56]	@ (800020c <resetRow+0x68>)
 80001d4:	f001 f9b6 	bl	8001544 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, RESET);
 80001d8:	2200      	movs	r2, #0
 80001da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001de:	480b      	ldr	r0, [pc, #44]	@ (800020c <resetRow+0x68>)
 80001e0:	f001 f9b0 	bl	8001544 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001ea:	4808      	ldr	r0, [pc, #32]	@ (800020c <resetRow+0x68>)
 80001ec:	f001 f9aa 	bl	8001544 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, RESET);
 80001f0:	2200      	movs	r2, #0
 80001f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001f6:	4805      	ldr	r0, [pc, #20]	@ (800020c <resetRow+0x68>)
 80001f8:	f001 f9a4 	bl	8001544 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000202:	4802      	ldr	r0, [pc, #8]	@ (800020c <resetRow+0x68>)
 8000204:	f001 f99e 	bl	8001544 <HAL_GPIO_WritePin>
}
 8000208:	bf00      	nop
 800020a:	bd80      	pop	{r7, pc}
 800020c:	40010c00 	.word	0x40010c00

08000210 <getRow>:

void getRow(uint8_t* binary_array) {
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 8; i++) {
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
 800021c:	e057      	b.n	80002ce <getRow+0xbe>
        if (binary_array[i] == 1) {
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	687a      	ldr	r2, [r7, #4]
 8000222:	4413      	add	r3, r2
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	2b01      	cmp	r3, #1
 8000228:	d14e      	bne.n	80002c8 <getRow+0xb8>
           switch(i){
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	2b07      	cmp	r3, #7
 800022e:	d84b      	bhi.n	80002c8 <getRow+0xb8>
 8000230:	a201      	add	r2, pc, #4	@ (adr r2, 8000238 <getRow+0x28>)
 8000232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000236:	bf00      	nop
 8000238:	08000259 	.word	0x08000259
 800023c:	08000267 	.word	0x08000267
 8000240:	08000275 	.word	0x08000275
 8000244:	08000283 	.word	0x08000283
 8000248:	08000291 	.word	0x08000291
 800024c:	0800029f 	.word	0x0800029f
 8000250:	080002ad 	.word	0x080002ad
 8000254:	080002bb 	.word	0x080002bb
          case 0:HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000258:	2201      	movs	r2, #1
 800025a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800025e:	4820      	ldr	r0, [pc, #128]	@ (80002e0 <getRow+0xd0>)
 8000260:	f001 f970 	bl	8001544 <HAL_GPIO_WritePin>
                   	   	   	   break ;
 8000264:	e030      	b.n	80002c8 <getRow+0xb8>
		  case 1:HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000266:	2201      	movs	r2, #1
 8000268:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800026c:	481c      	ldr	r0, [pc, #112]	@ (80002e0 <getRow+0xd0>)
 800026e:	f001 f969 	bl	8001544 <HAL_GPIO_WritePin>
					   break ;
 8000272:	e029      	b.n	80002c8 <getRow+0xb8>
		  case 2:HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800027a:	4819      	ldr	r0, [pc, #100]	@ (80002e0 <getRow+0xd0>)
 800027c:	f001 f962 	bl	8001544 <HAL_GPIO_WritePin>
					   break ;
 8000280:	e022      	b.n	80002c8 <getRow+0xb8>
		  case 3:HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000282:	2201      	movs	r2, #1
 8000284:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000288:	4815      	ldr	r0, [pc, #84]	@ (80002e0 <getRow+0xd0>)
 800028a:	f001 f95b 	bl	8001544 <HAL_GPIO_WritePin>
					   break ;
 800028e:	e01b      	b.n	80002c8 <getRow+0xb8>
		  case 4:HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 8000290:	2201      	movs	r2, #1
 8000292:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000296:	4812      	ldr	r0, [pc, #72]	@ (80002e0 <getRow+0xd0>)
 8000298:	f001 f954 	bl	8001544 <HAL_GPIO_WritePin>
					   break ;
 800029c:	e014      	b.n	80002c8 <getRow+0xb8>
		  case 5:HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002a4:	480e      	ldr	r0, [pc, #56]	@ (80002e0 <getRow+0xd0>)
 80002a6:	f001 f94d 	bl	8001544 <HAL_GPIO_WritePin>
					   break ;
 80002aa:	e00d      	b.n	80002c8 <getRow+0xb8>
		  case 6:HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80002b2:	480b      	ldr	r0, [pc, #44]	@ (80002e0 <getRow+0xd0>)
 80002b4:	f001 f946 	bl	8001544 <HAL_GPIO_WritePin>
                              	   break ;
 80002b8:	e006      	b.n	80002c8 <getRow+0xb8>
		  case 7:HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 80002ba:	2201      	movs	r2, #1
 80002bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002c0:	4807      	ldr	r0, [pc, #28]	@ (80002e0 <getRow+0xd0>)
 80002c2:	f001 f93f 	bl	8001544 <HAL_GPIO_WritePin>
                   	   break ;
 80002c6:	bf00      	nop
    for (int i = 0; i < 8; i++) {
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	3301      	adds	r3, #1
 80002cc:	60fb      	str	r3, [r7, #12]
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	2b07      	cmp	r3, #7
 80002d2:	dda4      	ble.n	800021e <getRow+0xe>
           }
        }
    }
}
 80002d4:	bf00      	nop
 80002d6:	bf00      	nop
 80002d8:	3710      	adds	r7, #16
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40010c00 	.word	0x40010c00

080002e4 <resetCol>:

void resetCol(){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2104      	movs	r1, #4
 80002ec:	4816      	ldr	r0, [pc, #88]	@ (8000348 <resetCol+0x64>)
 80002ee:	f001 f929 	bl	8001544 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, RESET);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2108      	movs	r1, #8
 80002f6:	4814      	ldr	r0, [pc, #80]	@ (8000348 <resetCol+0x64>)
 80002f8:	f001 f924 	bl	8001544 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000302:	4811      	ldr	r0, [pc, #68]	@ (8000348 <resetCol+0x64>)
 8000304:	f001 f91e 	bl	8001544 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800030e:	480e      	ldr	r0, [pc, #56]	@ (8000348 <resetCol+0x64>)
 8000310:	f001 f918 	bl	8001544 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800031a:	480b      	ldr	r0, [pc, #44]	@ (8000348 <resetCol+0x64>)
 800031c:	f001 f912 	bl	8001544 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000326:	4808      	ldr	r0, [pc, #32]	@ (8000348 <resetCol+0x64>)
 8000328:	f001 f90c 	bl	8001544 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000332:	4805      	ldr	r0, [pc, #20]	@ (8000348 <resetCol+0x64>)
 8000334:	f001 f906 	bl	8001544 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, RESET);
 8000338:	2200      	movs	r2, #0
 800033a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800033e:	4802      	ldr	r0, [pc, #8]	@ (8000348 <resetCol+0x64>)
 8000340:	f001 f900 	bl	8001544 <HAL_GPIO_WritePin>
}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40010800 	.word	0x40010800

0800034c <getCol>:

void getCol(uint8_t* binary_array) {
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i++) {
 8000354:	2300      	movs	r3, #0
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	e055      	b.n	8000406 <getCol+0xba>
	        if (binary_array[i] == 0) {
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	687a      	ldr	r2, [r7, #4]
 800035e:	4413      	add	r3, r2
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d14c      	bne.n	8000400 <getCol+0xb4>
	          switch(i){
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	2b07      	cmp	r3, #7
 800036a:	d849      	bhi.n	8000400 <getCol+0xb4>
 800036c:	a201      	add	r2, pc, #4	@ (adr r2, 8000374 <getCol+0x28>)
 800036e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000372:	bf00      	nop
 8000374:	08000395 	.word	0x08000395
 8000378:	080003a1 	.word	0x080003a1
 800037c:	080003ad 	.word	0x080003ad
 8000380:	080003bb 	.word	0x080003bb
 8000384:	080003c9 	.word	0x080003c9
 8000388:	080003d7 	.word	0x080003d7
 800038c:	080003e5 	.word	0x080003e5
 8000390:	080003f3 	.word	0x080003f3
	           case 0:HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 8000394:	2201      	movs	r2, #1
 8000396:	2104      	movs	r1, #4
 8000398:	481f      	ldr	r0, [pc, #124]	@ (8000418 <getCol+0xcc>)
 800039a:	f001 f8d3 	bl	8001544 <HAL_GPIO_WritePin>
	           	        	   	   	   break ;
 800039e:	e02f      	b.n	8000400 <getCol+0xb4>
	           case 1:HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 80003a0:	2201      	movs	r2, #1
 80003a2:	2108      	movs	r1, #8
 80003a4:	481c      	ldr	r0, [pc, #112]	@ (8000418 <getCol+0xcc>)
 80003a6:	f001 f8cd 	bl	8001544 <HAL_GPIO_WritePin>
	           	                   	   break ;
 80003aa:	e029      	b.n	8000400 <getCol+0xb4>
	           case 2:HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003b2:	4819      	ldr	r0, [pc, #100]	@ (8000418 <getCol+0xcc>)
 80003b4:	f001 f8c6 	bl	8001544 <HAL_GPIO_WritePin>
	           	                   	   break ;
 80003b8:	e022      	b.n	8000400 <getCol+0xb4>
	           case 3:HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, SET);
 80003ba:	2201      	movs	r2, #1
 80003bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003c0:	4815      	ldr	r0, [pc, #84]	@ (8000418 <getCol+0xcc>)
 80003c2:	f001 f8bf 	bl	8001544 <HAL_GPIO_WritePin>
	           	                   	   break ;
 80003c6:	e01b      	b.n	8000400 <getCol+0xb4>
	           case 4:HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003ce:	4812      	ldr	r0, [pc, #72]	@ (8000418 <getCol+0xcc>)
 80003d0:	f001 f8b8 	bl	8001544 <HAL_GPIO_WritePin>
	           	                   	   break ;
 80003d4:	e014      	b.n	8000400 <getCol+0xb4>
	           case 5:HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003dc:	480e      	ldr	r0, [pc, #56]	@ (8000418 <getCol+0xcc>)
 80003de:	f001 f8b1 	bl	8001544 <HAL_GPIO_WritePin>
	           	                   	   break ;
 80003e2:	e00d      	b.n	8000400 <getCol+0xb4>
	           case 6:HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003ea:	480b      	ldr	r0, [pc, #44]	@ (8000418 <getCol+0xcc>)
 80003ec:	f001 f8aa 	bl	8001544 <HAL_GPIO_WritePin>
	           	                   	   break ;
 80003f0:	e006      	b.n	8000400 <getCol+0xb4>
	           case 7:HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003f8:	4807      	ldr	r0, [pc, #28]	@ (8000418 <getCol+0xcc>)
 80003fa:	f001 f8a3 	bl	8001544 <HAL_GPIO_WritePin>
	           	                   	   break ;
 80003fe:	bf00      	nop
	for (int i = 0; i < 8; i++) {
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	3301      	adds	r3, #1
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	2b07      	cmp	r3, #7
 800040a:	dda6      	ble.n	800035a <getCol+0xe>
	          }
	        }
	 }
}
 800040c:	bf00      	nop
 800040e:	bf00      	nop
 8000410:	3710      	adds	r7, #16
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40010800 	.word	0x40010800

0800041c <updateLEDMatrix>:

 void updateLEDMatrix (int index, uint8_t matrix_buffer_col[], uint8_t matrix_buffer_row[]){
 800041c:	b580      	push	{r7, lr}
 800041e:	b086      	sub	sp, #24
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
	 uint8_t *binary_array_row = convert_to_binary_array(matrix_buffer_row[index]);
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	4413      	add	r3, r2
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff fe8b 	bl	800014c <convert_to_binary_array>
 8000436:	6178      	str	r0, [r7, #20]
	 uint8_t *binary_array_col = convert_to_binary_array(matrix_buffer_col[index]);
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	68ba      	ldr	r2, [r7, #8]
 800043c:	4413      	add	r3, r2
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff fe83 	bl	800014c <convert_to_binary_array>
 8000446:	6138      	str	r0, [r7, #16]
	   if (binary_array_row == NULL || binary_array_col == NULL) {
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d00f      	beq.n	800046e <updateLEDMatrix+0x52>
 800044e:	693b      	ldr	r3, [r7, #16]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d00c      	beq.n	800046e <updateLEDMatrix+0x52>
	        return;
	    }

	 getRow(binary_array_row);
 8000454:	6978      	ldr	r0, [r7, #20]
 8000456:	f7ff fedb 	bl	8000210 <getRow>
	 getCol(binary_array_col);
 800045a:	6938      	ldr	r0, [r7, #16]
 800045c:	f7ff ff76 	bl	800034c <getCol>
	 free(binary_array_row);
 8000460:	6978      	ldr	r0, [r7, #20]
 8000462:	f002 f863 	bl	800252c <free>
	 free(binary_array_col);
 8000466:	6938      	ldr	r0, [r7, #16]
 8000468:	f002 f860 	bl	800252c <free>
 800046c:	e000      	b.n	8000470 <updateLEDMatrix+0x54>
	        return;
 800046e:	bf00      	nop
}
 8000470:	3718      	adds	r7, #24
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <updateClockBuffer.1>:
  setTimer(1000,0);
  setTimer(4000,1);
  setTimer(250,2);
  while (1)
  {
	  void updateClockBuffer(){
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	4663      	mov	r3, ip
 8000480:	f8c7 c004 	str.w	ip, [r7, #4]
		  led_buffer[0] = hour/10;
 8000484:	695a      	ldr	r2, [r3, #20]
 8000486:	4917      	ldr	r1, [pc, #92]	@ (80004e4 <updateClockBuffer.1+0x6c>)
 8000488:	fb81 0102 	smull	r0, r1, r1, r2
 800048c:	1089      	asrs	r1, r1, #2
 800048e:	17d2      	asrs	r2, r2, #31
 8000490:	1a8a      	subs	r2, r1, r2
 8000492:	605a      	str	r2, [r3, #4]
		  led_buffer[1] = hour%10;
 8000494:	6958      	ldr	r0, [r3, #20]
 8000496:	4a13      	ldr	r2, [pc, #76]	@ (80004e4 <updateClockBuffer.1+0x6c>)
 8000498:	fb82 1200 	smull	r1, r2, r2, r0
 800049c:	1091      	asrs	r1, r2, #2
 800049e:	17c2      	asrs	r2, r0, #31
 80004a0:	1a89      	subs	r1, r1, r2
 80004a2:	460a      	mov	r2, r1
 80004a4:	0092      	lsls	r2, r2, #2
 80004a6:	440a      	add	r2, r1
 80004a8:	0052      	lsls	r2, r2, #1
 80004aa:	1a81      	subs	r1, r0, r2
 80004ac:	6099      	str	r1, [r3, #8]
		  led_buffer[2] = minute/10;
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	490c      	ldr	r1, [pc, #48]	@ (80004e4 <updateClockBuffer.1+0x6c>)
 80004b2:	fb81 0102 	smull	r0, r1, r1, r2
 80004b6:	1089      	asrs	r1, r1, #2
 80004b8:	17d2      	asrs	r2, r2, #31
 80004ba:	1a8a      	subs	r2, r1, r2
 80004bc:	60da      	str	r2, [r3, #12]
		  led_buffer[3] = minute%10;
 80004be:	6818      	ldr	r0, [r3, #0]
 80004c0:	4a08      	ldr	r2, [pc, #32]	@ (80004e4 <updateClockBuffer.1+0x6c>)
 80004c2:	fb82 1200 	smull	r1, r2, r2, r0
 80004c6:	1091      	asrs	r1, r2, #2
 80004c8:	17c2      	asrs	r2, r0, #31
 80004ca:	1a89      	subs	r1, r1, r2
 80004cc:	460a      	mov	r2, r1
 80004ce:	0092      	lsls	r2, r2, #2
 80004d0:	440a      	add	r2, r1
 80004d2:	0052      	lsls	r2, r2, #1
 80004d4:	1a81      	subs	r1, r0, r2
 80004d6:	6119      	str	r1, [r3, #16]
	  }
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	66666667 	.word	0x66666667

080004e8 <main>:
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08e      	sub	sp, #56	@ 0x38
 80004ec:	af00      	add	r7, sp, #0
int main(void)
 80004ee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80004f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_Init();
 80004f4:	f000 fd16 	bl	8000f24 <HAL_Init>
  SystemClock_Config();
 80004f8:	f000 f8cd 	bl	8000696 <SystemClock_Config>
  MX_GPIO_Init();
 80004fc:	f000 f952 	bl	80007a4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000500:	f000 f904 	bl	800070c <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT (&htim2);
 8000504:	484c      	ldr	r0, [pc, #304]	@ (8000638 <main+0x150>)
 8000506:	f001 fc7d 	bl	8001e04 <HAL_TIM_Base_Start_IT>
  int index_led = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	637b      	str	r3, [r7, #52]	@ 0x34
  int hour = 15, minute = 8, second = 50;
 800050e:	230f      	movs	r3, #15
 8000510:	61bb      	str	r3, [r7, #24]
 8000512:	2308      	movs	r3, #8
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	2332      	movs	r3, #50	@ 0x32
 8000518:	633b      	str	r3, [r7, #48]	@ 0x30
  int led_buffer[4]= {hour/10, hour%10, minute/10, minute%10};
 800051a:	69bb      	ldr	r3, [r7, #24]
 800051c:	4a47      	ldr	r2, [pc, #284]	@ (800063c <main+0x154>)
 800051e:	fb82 1203 	smull	r1, r2, r2, r3
 8000522:	1092      	asrs	r2, r2, #2
 8000524:	17db      	asrs	r3, r3, #31
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	69b9      	ldr	r1, [r7, #24]
 800052c:	4b43      	ldr	r3, [pc, #268]	@ (800063c <main+0x154>)
 800052e:	fb83 2301 	smull	r2, r3, r3, r1
 8000532:	109a      	asrs	r2, r3, #2
 8000534:	17cb      	asrs	r3, r1, #31
 8000536:	1ad2      	subs	r2, r2, r3
 8000538:	4613      	mov	r3, r2
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	4413      	add	r3, r2
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	1aca      	subs	r2, r1, r3
 8000542:	60fa      	str	r2, [r7, #12]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a3d      	ldr	r2, [pc, #244]	@ (800063c <main+0x154>)
 8000548:	fb82 1203 	smull	r1, r2, r2, r3
 800054c:	1092      	asrs	r2, r2, #2
 800054e:	17db      	asrs	r3, r3, #31
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	6879      	ldr	r1, [r7, #4]
 8000556:	4b39      	ldr	r3, [pc, #228]	@ (800063c <main+0x154>)
 8000558:	fb83 2301 	smull	r2, r3, r3, r1
 800055c:	109a      	asrs	r2, r3, #2
 800055e:	17cb      	asrs	r3, r1, #31
 8000560:	1ad2      	subs	r2, r2, r3
 8000562:	4613      	mov	r3, r2
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	4413      	add	r3, r2
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	1aca      	subs	r2, r1, r3
 800056c:	617a      	str	r2, [r7, #20]
  uint8_t matrix_buffer_col[8] = {0xFE, 0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F};
 800056e:	4a34      	ldr	r2, [pc, #208]	@ (8000640 <main+0x158>)
 8000570:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000574:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000578:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t matrix_buffer_row[8] = {0x18, 0x3C, 0x66, 0x66, 0x7E, 0x7E, 0x66, 0x66};
 800057c:	4a31      	ldr	r2, [pc, #196]	@ (8000644 <main+0x15c>)
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000586:	e883 0003 	stmia.w	r3, {r0, r1}
  setTimer(1000,0);
 800058a:	2100      	movs	r1, #0
 800058c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000590:	f000 fb8a 	bl	8000ca8 <setTimer>
  setTimer(4000,1);
 8000594:	2101      	movs	r1, #1
 8000596:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800059a:	f000 fb85 	bl	8000ca8 <setTimer>
  setTimer(250,2);
 800059e:	2102      	movs	r1, #2
 80005a0:	20fa      	movs	r0, #250	@ 0xfa
 80005a2:	f000 fb81 	bl	8000ca8 <setTimer>
		  		 resetRow();
		  	 	 updateLEDMatrix(i, matrix_buffer_col, matrix_buffer_row);
		  	 	 HAL_Delay(1);
		  	 }
		  }
	 run_matrix();
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	469c      	mov	ip, r3
 80005aa:	f000 f851 	bl	8000650 <run_matrix.0>

	  //updateLEDMatrix(3, matrix_buffer_col, matrix_buffer_row);
	  //TODO
	  if(timer_flag[2]==1){
 80005ae:	4b26      	ldr	r3, [pc, #152]	@ (8000648 <main+0x160>)
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d111      	bne.n	80005da <main+0xf2>
		  update7SEG(index_led, led_buffer);
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	3304      	adds	r3, #4
 80005ba:	4619      	mov	r1, r3
 80005bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80005be:	f000 f957 	bl	8000870 <update7SEG>
		  		   index_led++;
 80005c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005c4:	3301      	adds	r3, #1
 80005c6:	637b      	str	r3, [r7, #52]	@ 0x34
		  		   if(index_led == 4){
 80005c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005ca:	2b04      	cmp	r3, #4
 80005cc:	d101      	bne.n	80005d2 <main+0xea>
		  			   index_led = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	637b      	str	r3, [r7, #52]	@ 0x34
		  		   }
		  		   setTimer(250,2);
 80005d2:	2102      	movs	r1, #2
 80005d4:	20fa      	movs	r0, #250	@ 0xfa
 80005d6:	f000 fb67 	bl	8000ca8 <setTimer>
	  }
	  if(timer_flag[0] == 1){
 80005da:	4b1b      	ldr	r3, [pc, #108]	@ (8000648 <main+0x160>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d1e1      	bne.n	80005a6 <main+0xbe>
			  second ++;
 80005e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005e4:	3301      	adds	r3, #1
 80005e6:	633b      	str	r3, [r7, #48]	@ 0x30
			  if ( second >= 60) {
 80005e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005ea:	2b3b      	cmp	r3, #59	@ 0x3b
 80005ec:	dd04      	ble.n	80005f8 <main+0x110>
				  second = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	633b      	str	r3, [r7, #48]	@ 0x30
				  minute ++;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3301      	adds	r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
			  }
			  if( minute >= 60) {
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2b3b      	cmp	r3, #59	@ 0x3b
 80005fc:	dd04      	ble.n	8000608 <main+0x120>
				  minute = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
				  hour ++;
 8000602:	69bb      	ldr	r3, [r7, #24]
 8000604:	3301      	adds	r3, #1
 8000606:	61bb      	str	r3, [r7, #24]
			  }
			  if( hour >=24){
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	2b17      	cmp	r3, #23
 800060c:	dd01      	ble.n	8000612 <main+0x12a>
				  hour = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
			  }
		   updateClockBuffer();
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	469c      	mov	ip, r3
 8000616:	f7ff ff2f 	bl	8000478 <updateClockBuffer.1>
		   HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 800061a:	2110      	movs	r1, #16
 800061c:	480b      	ldr	r0, [pc, #44]	@ (800064c <main+0x164>)
 800061e:	f000 ffa9 	bl	8001574 <HAL_GPIO_TogglePin>
		   HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8000622:	2120      	movs	r1, #32
 8000624:	4809      	ldr	r0, [pc, #36]	@ (800064c <main+0x164>)
 8000626:	f000 ffa5 	bl	8001574 <HAL_GPIO_TogglePin>

		   setTimer(1000,0);
 800062a:	2100      	movs	r1, #0
 800062c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000630:	f000 fb3a 	bl	8000ca8 <setTimer>
  {
 8000634:	e7b7      	b.n	80005a6 <main+0xbe>
 8000636:	bf00      	nop
 8000638:	20000078 	.word	0x20000078
 800063c:	66666667 	.word	0x66666667
 8000640:	080027c8 	.word	0x080027c8
 8000644:	080027d0 	.word	0x080027d0
 8000648:	200000e8 	.word	0x200000e8
 800064c:	40010800 	.word	0x40010800

08000650 <run_matrix.0>:
	  void run_matrix(){
 8000650:	b590      	push	{r4, r7, lr}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	4664      	mov	r4, ip
 8000658:	f8c7 c004 	str.w	ip, [r7, #4]
		  	 for(int i = 0; i<8; i++){
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	e011      	b.n	8000686 <run_matrix.0+0x36>
		  		 resetCol();
 8000662:	f7ff fe3f 	bl	80002e4 <resetCol>
		  		 resetRow();
 8000666:	f7ff fd9d 	bl	80001a4 <resetRow>
		  	 	 updateLEDMatrix(i, matrix_buffer_col, matrix_buffer_row);
 800066a:	f104 0320 	add.w	r3, r4, #32
 800066e:	f104 0218 	add.w	r2, r4, #24
 8000672:	4619      	mov	r1, r3
 8000674:	68f8      	ldr	r0, [r7, #12]
 8000676:	f7ff fed1 	bl	800041c <updateLEDMatrix>
		  	 	 HAL_Delay(1);
 800067a:	2001      	movs	r0, #1
 800067c:	f000 fcb4 	bl	8000fe8 <HAL_Delay>
		  	 for(int i = 0; i<8; i++){
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	3301      	adds	r3, #1
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	2b07      	cmp	r3, #7
 800068a:	ddea      	ble.n	8000662 <run_matrix.0+0x12>
		  }
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	bd90      	pop	{r4, r7, pc}

08000696 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b090      	sub	sp, #64	@ 0x40
 800069a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069c:	f107 0318 	add.w	r3, r7, #24
 80006a0:	2228      	movs	r2, #40	@ 0x28
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 fff7 	bl	8002698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0318 	add.w	r3, r7, #24
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 ff6b 	bl	80015a8 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x46>
  {
    Error_Handler();
 80006d8:	f000 f8c4 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 f9d9 	bl	8001aac <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000700:	f000 f8b0 	bl	8000864 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3740      	adds	r7, #64	@ 0x40
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000712:	f107 0308 	add.w	r3, r7, #8
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000720:	463b      	mov	r3, r7
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000728:	4b1d      	ldr	r3, [pc, #116]	@ (80007a0 <MX_TIM2_Init+0x94>)
 800072a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800072e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_TIM2_Init+0x94>)
 8000732:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000736:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000738:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <MX_TIM2_Init+0x94>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800073e:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_TIM2_Init+0x94>)
 8000740:	2209      	movs	r2, #9
 8000742:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000744:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <MX_TIM2_Init+0x94>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_TIM2_Init+0x94>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000750:	4813      	ldr	r0, [pc, #76]	@ (80007a0 <MX_TIM2_Init+0x94>)
 8000752:	f001 fb07 	bl	8001d64 <HAL_TIM_Base_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800075c:	f000 f882 	bl	8000864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000760:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000764:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	4619      	mov	r1, r3
 800076c:	480c      	ldr	r0, [pc, #48]	@ (80007a0 <MX_TIM2_Init+0x94>)
 800076e:	f001 fc85 	bl	800207c <HAL_TIM_ConfigClockSource>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000778:	f000 f874 	bl	8000864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_TIM2_Init+0x94>)
 800078a:	f001 fe5d 	bl	8002448 <HAL_TIMEx_MasterConfigSynchronization>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000794:	f000 f866 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000078 	.word	0x20000078

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <MX_GPIO_Init+0xa0>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a21      	ldr	r2, [pc, #132]	@ (8000844 <MX_GPIO_Init+0xa0>)
 80007be:	f043 0304 	orr.w	r3, r3, #4
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000844 <MX_GPIO_Init+0xa0>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f003 0304 	and.w	r3, r3, #4
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000844 <MX_GPIO_Init+0xa0>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000844 <MX_GPIO_Init+0xa0>)
 80007d6:	f043 0308 	orr.w	r3, r3, #8
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	4b19      	ldr	r3, [pc, #100]	@ (8000844 <MX_GPIO_Init+0xa0>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f003 0308 	and.w	r3, r3, #8
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 80007e8:	2200      	movs	r2, #0
 80007ea:	f64f 71fc 	movw	r1, #65532	@ 0xfffc
 80007ee:	4816      	ldr	r0, [pc, #88]	@ (8000848 <MX_GPIO_Init+0xa4>)
 80007f0:	f000 fea8 	bl	8001544 <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, seg1_Pin|seg2_Pin|seg3_Pin|ROW2_Pin
 80007f4:	2200      	movs	r2, #0
 80007f6:	f64f 717f 	movw	r1, #65407	@ 0xff7f
 80007fa:	4814      	ldr	r0, [pc, #80]	@ (800084c <MX_GPIO_Init+0xa8>)
 80007fc:	f000 fea2 	bl	8001544 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8000800:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8000804:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2302      	movs	r3, #2
 8000810:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	4619      	mov	r1, r3
 8000818:	480b      	ldr	r0, [pc, #44]	@ (8000848 <MX_GPIO_Init+0xa4>)
 800081a:	f000 fd17 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : seg1_Pin seg2_Pin seg3_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin seg4_Pin seg5_Pin seg6_Pin
                           seg7_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = seg1_Pin|seg2_Pin|seg3_Pin|ROW2_Pin
 800081e:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8000822:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|seg4_Pin|seg5_Pin|seg6_Pin
                          |seg7_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2302      	movs	r3, #2
 800082e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	4619      	mov	r1, r3
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_GPIO_Init+0xa8>)
 8000838:	f000 fd08 	bl	800124c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800083c:	bf00      	nop
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40021000 	.word	0x40021000
 8000848:	40010800 	.word	0x40010800
 800084c:	40010c00 	.word	0x40010c00

08000850 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
 void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	 timerRun();
 8000858:	f000 fa46 	bl	8000ce8 <timerRun>


}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <Error_Handler+0x8>

08000870 <update7SEG>:
 *  Created on: Sep 10, 2024
 *      Author: 84859
 */
#include "seg7.h"

 void update7SEG ( int index, int led_buffer[]){
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	  		 switch ( index ){
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b03      	cmp	r3, #3
 800087e:	d87e      	bhi.n	800097e <update7SEG+0x10e>
 8000880:	a201      	add	r2, pc, #4	@ (adr r2, 8000888 <update7SEG+0x18>)
 8000882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000886:	bf00      	nop
 8000888:	08000899 	.word	0x08000899
 800088c:	080008d1 	.word	0x080008d1
 8000890:	0800090b 	.word	0x0800090b
 8000894:	08000945 	.word	0x08000945
	  		 case 0:
	  		 // Display the first 7 SEG with led_buffer [0]
	  			 display7SEG(led_buffer[0]);
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f000 f875 	bl	800098c <display7SEG>
	  			 HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2140      	movs	r1, #64	@ 0x40
 80008a6:	4838      	ldr	r0, [pc, #224]	@ (8000988 <update7SEG+0x118>)
 80008a8:	f000 fe4c 	bl	8001544 <HAL_GPIO_WritePin>
	  			 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2180      	movs	r1, #128	@ 0x80
 80008b0:	4835      	ldr	r0, [pc, #212]	@ (8000988 <update7SEG+0x118>)
 80008b2:	f000 fe47 	bl	8001544 <HAL_GPIO_WritePin>
	  			 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008bc:	4832      	ldr	r0, [pc, #200]	@ (8000988 <update7SEG+0x118>)
 80008be:	f000 fe41 	bl	8001544 <HAL_GPIO_WritePin>
	  			 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008c8:	482f      	ldr	r0, [pc, #188]	@ (8000988 <update7SEG+0x118>)
 80008ca:	f000 fe3b 	bl	8001544 <HAL_GPIO_WritePin>

	  		 break ;
 80008ce:	e057      	b.n	8000980 <update7SEG+0x110>
	  		 case 1:
	  			 display7SEG(led_buffer[1]);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	3304      	adds	r3, #4
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f858 	bl	800098c <display7SEG>
	  			 HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2140      	movs	r1, #64	@ 0x40
 80008e0:	4829      	ldr	r0, [pc, #164]	@ (8000988 <update7SEG+0x118>)
 80008e2:	f000 fe2f 	bl	8001544 <HAL_GPIO_WritePin>
	  			 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2180      	movs	r1, #128	@ 0x80
 80008ea:	4827      	ldr	r0, [pc, #156]	@ (8000988 <update7SEG+0x118>)
 80008ec:	f000 fe2a 	bl	8001544 <HAL_GPIO_WritePin>
	  			 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f6:	4824      	ldr	r0, [pc, #144]	@ (8000988 <update7SEG+0x118>)
 80008f8:	f000 fe24 	bl	8001544 <HAL_GPIO_WritePin>
	  			 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000902:	4821      	ldr	r0, [pc, #132]	@ (8000988 <update7SEG+0x118>)
 8000904:	f000 fe1e 	bl	8001544 <HAL_GPIO_WritePin>
	  		  // Display the second 7 SEG with led_buffer [1]
	  		  break ;
 8000908:	e03a      	b.n	8000980 <update7SEG+0x110>
	  		  case 2:
	  			  display7SEG(led_buffer[2]);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	3308      	adds	r3, #8
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f83b 	bl	800098c <display7SEG>
	  				 HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
 8000916:	2201      	movs	r2, #1
 8000918:	2140      	movs	r1, #64	@ 0x40
 800091a:	481b      	ldr	r0, [pc, #108]	@ (8000988 <update7SEG+0x118>)
 800091c:	f000 fe12 	bl	8001544 <HAL_GPIO_WritePin>
	  				 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
 8000920:	2201      	movs	r2, #1
 8000922:	2180      	movs	r1, #128	@ 0x80
 8000924:	4818      	ldr	r0, [pc, #96]	@ (8000988 <update7SEG+0x118>)
 8000926:	f000 fe0d 	bl	8001544 <HAL_GPIO_WritePin>
	  				 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000930:	4815      	ldr	r0, [pc, #84]	@ (8000988 <update7SEG+0x118>)
 8000932:	f000 fe07 	bl	8001544 <HAL_GPIO_WritePin>
	  				 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
 8000936:	2201      	movs	r2, #1
 8000938:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800093c:	4812      	ldr	r0, [pc, #72]	@ (8000988 <update7SEG+0x118>)
 800093e:	f000 fe01 	bl	8001544 <HAL_GPIO_WritePin>
	  		  // Display the third 7 SEG with led_buffer [2]
	  		  break ;
 8000942:	e01d      	b.n	8000980 <update7SEG+0x110>
	  		  case 3:
	  			  display7SEG(led_buffer[3]);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	330c      	adds	r3, #12
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f81e 	bl	800098c <display7SEG>
	  				 HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
 8000950:	2201      	movs	r2, #1
 8000952:	2140      	movs	r1, #64	@ 0x40
 8000954:	480c      	ldr	r0, [pc, #48]	@ (8000988 <update7SEG+0x118>)
 8000956:	f000 fdf5 	bl	8001544 <HAL_GPIO_WritePin>
	  				 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
 800095a:	2201      	movs	r2, #1
 800095c:	2180      	movs	r1, #128	@ 0x80
 800095e:	480a      	ldr	r0, [pc, #40]	@ (8000988 <update7SEG+0x118>)
 8000960:	f000 fdf0 	bl	8001544 <HAL_GPIO_WritePin>
	  				 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800096a:	4807      	ldr	r0, [pc, #28]	@ (8000988 <update7SEG+0x118>)
 800096c:	f000 fdea 	bl	8001544 <HAL_GPIO_WritePin>
	  				 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000976:	4804      	ldr	r0, [pc, #16]	@ (8000988 <update7SEG+0x118>)
 8000978:	f000 fde4 	bl	8001544 <HAL_GPIO_WritePin>
	  		  // Display the forth 7 SEG with led_buffer [3]
	  		  break ;
 800097c:	e000      	b.n	8000980 <update7SEG+0x110>
	  		  default :
	  		  break ;
 800097e:	bf00      	nop
	  		  }
	  	}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40010800 	.word	0x40010800

0800098c <display7SEG>:

void display7SEG(int num){
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	switch(num){
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b09      	cmp	r3, #9
 8000998:	f200 8180 	bhi.w	8000c9c <display7SEG+0x310>
 800099c:	a201      	add	r2, pc, #4	@ (adr r2, 80009a4 <display7SEG+0x18>)
 800099e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a2:	bf00      	nop
 80009a4:	080009cd 	.word	0x080009cd
 80009a8:	08000a15 	.word	0x08000a15
 80009ac:	08000a5d 	.word	0x08000a5d
 80009b0:	08000aa5 	.word	0x08000aa5
 80009b4:	08000aed 	.word	0x08000aed
 80009b8:	08000b35 	.word	0x08000b35
 80009bc:	08000b7d 	.word	0x08000b7d
 80009c0:	08000bc5 	.word	0x08000bc5
 80009c4:	08000c0d 	.word	0x08000c0d
 80009c8:	08000c55 	.word	0x08000c55
		 case 0:
			 HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2101      	movs	r1, #1
 80009d0:	48b4      	ldr	r0, [pc, #720]	@ (8000ca4 <display7SEG+0x318>)
 80009d2:	f000 fdb7 	bl	8001544 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2102      	movs	r1, #2
 80009da:	48b2      	ldr	r0, [pc, #712]	@ (8000ca4 <display7SEG+0x318>)
 80009dc:	f000 fdb2 	bl	8001544 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2104      	movs	r1, #4
 80009e4:	48af      	ldr	r0, [pc, #700]	@ (8000ca4 <display7SEG+0x318>)
 80009e6:	f000 fdad 	bl	8001544 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2108      	movs	r1, #8
 80009ee:	48ad      	ldr	r0, [pc, #692]	@ (8000ca4 <display7SEG+0x318>)
 80009f0:	f000 fda8 	bl	8001544 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(seg5_GPIO_Port, seg5_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2110      	movs	r1, #16
 80009f8:	48aa      	ldr	r0, [pc, #680]	@ (8000ca4 <display7SEG+0x318>)
 80009fa:	f000 fda3 	bl	8001544 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(seg6_GPIO_Port, seg6_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2120      	movs	r1, #32
 8000a02:	48a8      	ldr	r0, [pc, #672]	@ (8000ca4 <display7SEG+0x318>)
 8000a04:	f000 fd9e 	bl	8001544 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(seg7_GPIO_Port, seg7_Pin, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2140      	movs	r1, #64	@ 0x40
 8000a0c:	48a5      	ldr	r0, [pc, #660]	@ (8000ca4 <display7SEG+0x318>)
 8000a0e:	f000 fd99 	bl	8001544 <HAL_GPIO_WritePin>

			   break;
 8000a12:	e143      	b.n	8000c9c <display7SEG+0x310>

		 case 1:
			 HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2102      	movs	r1, #2
 8000a18:	48a2      	ldr	r0, [pc, #648]	@ (8000ca4 <display7SEG+0x318>)
 8000a1a:	f000 fd93 	bl	8001544 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2104      	movs	r1, #4
 8000a22:	48a0      	ldr	r0, [pc, #640]	@ (8000ca4 <display7SEG+0x318>)
 8000a24:	f000 fd8e 	bl	8001544 <HAL_GPIO_WritePin>


			HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, GPIO_PIN_SET);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	489d      	ldr	r0, [pc, #628]	@ (8000ca4 <display7SEG+0x318>)
 8000a2e:	f000 fd89 	bl	8001544 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, GPIO_PIN_SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	2108      	movs	r1, #8
 8000a36:	489b      	ldr	r0, [pc, #620]	@ (8000ca4 <display7SEG+0x318>)
 8000a38:	f000 fd84 	bl	8001544 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(seg5_GPIO_Port, seg5_Pin, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2110      	movs	r1, #16
 8000a40:	4898      	ldr	r0, [pc, #608]	@ (8000ca4 <display7SEG+0x318>)
 8000a42:	f000 fd7f 	bl	8001544 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(seg6_GPIO_Port, seg6_Pin, GPIO_PIN_SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	2120      	movs	r1, #32
 8000a4a:	4896      	ldr	r0, [pc, #600]	@ (8000ca4 <display7SEG+0x318>)
 8000a4c:	f000 fd7a 	bl	8001544 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(seg7_GPIO_Port, seg7_Pin, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	2140      	movs	r1, #64	@ 0x40
 8000a54:	4893      	ldr	r0, [pc, #588]	@ (8000ca4 <display7SEG+0x318>)
 8000a56:	f000 fd75 	bl	8001544 <HAL_GPIO_WritePin>

			  break;
 8000a5a:	e11f      	b.n	8000c9c <display7SEG+0x310>


		 case 2:
			 HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2101      	movs	r1, #1
 8000a60:	4890      	ldr	r0, [pc, #576]	@ (8000ca4 <display7SEG+0x318>)
 8000a62:	f000 fd6f 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2102      	movs	r1, #2
 8000a6a:	488e      	ldr	r0, [pc, #568]	@ (8000ca4 <display7SEG+0x318>)
 8000a6c:	f000 fd6a 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2108      	movs	r1, #8
 8000a74:	488b      	ldr	r0, [pc, #556]	@ (8000ca4 <display7SEG+0x318>)
 8000a76:	f000 fd65 	bl	8001544 <HAL_GPIO_WritePin>
					  		   HAL_GPIO_WritePin(seg5_GPIO_Port, seg5_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2110      	movs	r1, #16
 8000a7e:	4889      	ldr	r0, [pc, #548]	@ (8000ca4 <display7SEG+0x318>)
 8000a80:	f000 fd60 	bl	8001544 <HAL_GPIO_WritePin>
					  		 HAL_GPIO_WritePin(seg7_GPIO_Port, seg7_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2140      	movs	r1, #64	@ 0x40
 8000a88:	4886      	ldr	r0, [pc, #536]	@ (8000ca4 <display7SEG+0x318>)
 8000a8a:	f000 fd5b 	bl	8001544 <HAL_GPIO_WritePin>



					  		  HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2104      	movs	r1, #4
 8000a92:	4884      	ldr	r0, [pc, #528]	@ (8000ca4 <display7SEG+0x318>)
 8000a94:	f000 fd56 	bl	8001544 <HAL_GPIO_WritePin>
					  		  HAL_GPIO_WritePin(seg6_GPIO_Port, seg6_Pin, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2120      	movs	r1, #32
 8000a9c:	4881      	ldr	r0, [pc, #516]	@ (8000ca4 <display7SEG+0x318>)
 8000a9e:	f000 fd51 	bl	8001544 <HAL_GPIO_WritePin>
					  		  break;
 8000aa2:	e0fb      	b.n	8000c9c <display7SEG+0x310>

		 case 3:
			 HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	487e      	ldr	r0, [pc, #504]	@ (8000ca4 <display7SEG+0x318>)
 8000aaa:	f000 fd4b 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	487c      	ldr	r0, [pc, #496]	@ (8000ca4 <display7SEG+0x318>)
 8000ab4:	f000 fd46 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2104      	movs	r1, #4
 8000abc:	4879      	ldr	r0, [pc, #484]	@ (8000ca4 <display7SEG+0x318>)
 8000abe:	f000 fd41 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2108      	movs	r1, #8
 8000ac6:	4877      	ldr	r0, [pc, #476]	@ (8000ca4 <display7SEG+0x318>)
 8000ac8:	f000 fd3c 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg5_GPIO_Port, seg5_Pin, GPIO_PIN_SET);
 8000acc:	2201      	movs	r2, #1
 8000ace:	2110      	movs	r1, #16
 8000ad0:	4874      	ldr	r0, [pc, #464]	@ (8000ca4 <display7SEG+0x318>)
 8000ad2:	f000 fd37 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg6_GPIO_Port, seg6_Pin, GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2120      	movs	r1, #32
 8000ada:	4872      	ldr	r0, [pc, #456]	@ (8000ca4 <display7SEG+0x318>)
 8000adc:	f000 fd32 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg7_GPIO_Port, seg7_Pin, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2140      	movs	r1, #64	@ 0x40
 8000ae4:	486f      	ldr	r0, [pc, #444]	@ (8000ca4 <display7SEG+0x318>)
 8000ae6:	f000 fd2d 	bl	8001544 <HAL_GPIO_WritePin>
					   break;
 8000aea:	e0d7      	b.n	8000c9c <display7SEG+0x310>


		 case 4:
			 HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2101      	movs	r1, #1
 8000af0:	486c      	ldr	r0, [pc, #432]	@ (8000ca4 <display7SEG+0x318>)
 8000af2:	f000 fd27 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2102      	movs	r1, #2
 8000afa:	486a      	ldr	r0, [pc, #424]	@ (8000ca4 <display7SEG+0x318>)
 8000afc:	f000 fd22 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2104      	movs	r1, #4
 8000b04:	4867      	ldr	r0, [pc, #412]	@ (8000ca4 <display7SEG+0x318>)
 8000b06:	f000 fd1d 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2108      	movs	r1, #8
 8000b0e:	4865      	ldr	r0, [pc, #404]	@ (8000ca4 <display7SEG+0x318>)
 8000b10:	f000 fd18 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg5_GPIO_Port, seg5_Pin, GPIO_PIN_SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	2110      	movs	r1, #16
 8000b18:	4862      	ldr	r0, [pc, #392]	@ (8000ca4 <display7SEG+0x318>)
 8000b1a:	f000 fd13 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg6_GPIO_Port, seg6_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2120      	movs	r1, #32
 8000b22:	4860      	ldr	r0, [pc, #384]	@ (8000ca4 <display7SEG+0x318>)
 8000b24:	f000 fd0e 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg7_GPIO_Port, seg7_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2140      	movs	r1, #64	@ 0x40
 8000b2c:	485d      	ldr	r0, [pc, #372]	@ (8000ca4 <display7SEG+0x318>)
 8000b2e:	f000 fd09 	bl	8001544 <HAL_GPIO_WritePin>

					   break;
 8000b32:	e0b3      	b.n	8000c9c <display7SEG+0x310>


		 case 5:
			 HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2101      	movs	r1, #1
 8000b38:	485a      	ldr	r0, [pc, #360]	@ (8000ca4 <display7SEG+0x318>)
 8000b3a:	f000 fd03 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, GPIO_PIN_SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2102      	movs	r1, #2
 8000b42:	4858      	ldr	r0, [pc, #352]	@ (8000ca4 <display7SEG+0x318>)
 8000b44:	f000 fcfe 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2104      	movs	r1, #4
 8000b4c:	4855      	ldr	r0, [pc, #340]	@ (8000ca4 <display7SEG+0x318>)
 8000b4e:	f000 fcf9 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2108      	movs	r1, #8
 8000b56:	4853      	ldr	r0, [pc, #332]	@ (8000ca4 <display7SEG+0x318>)
 8000b58:	f000 fcf4 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg5_GPIO_Port, seg5_Pin, GPIO_PIN_SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2110      	movs	r1, #16
 8000b60:	4850      	ldr	r0, [pc, #320]	@ (8000ca4 <display7SEG+0x318>)
 8000b62:	f000 fcef 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg6_GPIO_Port, seg6_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2120      	movs	r1, #32
 8000b6a:	484e      	ldr	r0, [pc, #312]	@ (8000ca4 <display7SEG+0x318>)
 8000b6c:	f000 fcea 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg7_GPIO_Port, seg7_Pin, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2140      	movs	r1, #64	@ 0x40
 8000b74:	484b      	ldr	r0, [pc, #300]	@ (8000ca4 <display7SEG+0x318>)
 8000b76:	f000 fce5 	bl	8001544 <HAL_GPIO_WritePin>
					   break;
 8000b7a:	e08f      	b.n	8000c9c <display7SEG+0x310>


		 case 6:
			 HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2101      	movs	r1, #1
 8000b80:	4848      	ldr	r0, [pc, #288]	@ (8000ca4 <display7SEG+0x318>)
 8000b82:	f000 fcdf 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2102      	movs	r1, #2
 8000b8a:	4846      	ldr	r0, [pc, #280]	@ (8000ca4 <display7SEG+0x318>)
 8000b8c:	f000 fcda 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2104      	movs	r1, #4
 8000b94:	4843      	ldr	r0, [pc, #268]	@ (8000ca4 <display7SEG+0x318>)
 8000b96:	f000 fcd5 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2108      	movs	r1, #8
 8000b9e:	4841      	ldr	r0, [pc, #260]	@ (8000ca4 <display7SEG+0x318>)
 8000ba0:	f000 fcd0 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg5_GPIO_Port, seg5_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2110      	movs	r1, #16
 8000ba8:	483e      	ldr	r0, [pc, #248]	@ (8000ca4 <display7SEG+0x318>)
 8000baa:	f000 fccb 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg6_GPIO_Port, seg6_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2120      	movs	r1, #32
 8000bb2:	483c      	ldr	r0, [pc, #240]	@ (8000ca4 <display7SEG+0x318>)
 8000bb4:	f000 fcc6 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg7_GPIO_Port, seg7_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2140      	movs	r1, #64	@ 0x40
 8000bbc:	4839      	ldr	r0, [pc, #228]	@ (8000ca4 <display7SEG+0x318>)
 8000bbe:	f000 fcc1 	bl	8001544 <HAL_GPIO_WritePin>
					   break;
 8000bc2:	e06b      	b.n	8000c9c <display7SEG+0x310>


		 case 7:
			 HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	4836      	ldr	r0, [pc, #216]	@ (8000ca4 <display7SEG+0x318>)
 8000bca:	f000 fcbb 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	4834      	ldr	r0, [pc, #208]	@ (8000ca4 <display7SEG+0x318>)
 8000bd4:	f000 fcb6 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2104      	movs	r1, #4
 8000bdc:	4831      	ldr	r0, [pc, #196]	@ (8000ca4 <display7SEG+0x318>)
 8000bde:	f000 fcb1 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, GPIO_PIN_SET);
 8000be2:	2201      	movs	r2, #1
 8000be4:	2108      	movs	r1, #8
 8000be6:	482f      	ldr	r0, [pc, #188]	@ (8000ca4 <display7SEG+0x318>)
 8000be8:	f000 fcac 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg5_GPIO_Port, seg5_Pin, GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2110      	movs	r1, #16
 8000bf0:	482c      	ldr	r0, [pc, #176]	@ (8000ca4 <display7SEG+0x318>)
 8000bf2:	f000 fca7 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg6_GPIO_Port, seg6_Pin, GPIO_PIN_SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2120      	movs	r1, #32
 8000bfa:	482a      	ldr	r0, [pc, #168]	@ (8000ca4 <display7SEG+0x318>)
 8000bfc:	f000 fca2 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg7_GPIO_Port, seg7_Pin, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	2140      	movs	r1, #64	@ 0x40
 8000c04:	4827      	ldr	r0, [pc, #156]	@ (8000ca4 <display7SEG+0x318>)
 8000c06:	f000 fc9d 	bl	8001544 <HAL_GPIO_WritePin>
					   break;
 8000c0a:	e047      	b.n	8000c9c <display7SEG+0x310>

		 case 8:
			 HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2101      	movs	r1, #1
 8000c10:	4824      	ldr	r0, [pc, #144]	@ (8000ca4 <display7SEG+0x318>)
 8000c12:	f000 fc97 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2102      	movs	r1, #2
 8000c1a:	4822      	ldr	r0, [pc, #136]	@ (8000ca4 <display7SEG+0x318>)
 8000c1c:	f000 fc92 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2104      	movs	r1, #4
 8000c24:	481f      	ldr	r0, [pc, #124]	@ (8000ca4 <display7SEG+0x318>)
 8000c26:	f000 fc8d 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	481d      	ldr	r0, [pc, #116]	@ (8000ca4 <display7SEG+0x318>)
 8000c30:	f000 fc88 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg5_GPIO_Port, seg5_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2110      	movs	r1, #16
 8000c38:	481a      	ldr	r0, [pc, #104]	@ (8000ca4 <display7SEG+0x318>)
 8000c3a:	f000 fc83 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg6_GPIO_Port, seg6_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2120      	movs	r1, #32
 8000c42:	4818      	ldr	r0, [pc, #96]	@ (8000ca4 <display7SEG+0x318>)
 8000c44:	f000 fc7e 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg7_GPIO_Port, seg7_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2140      	movs	r1, #64	@ 0x40
 8000c4c:	4815      	ldr	r0, [pc, #84]	@ (8000ca4 <display7SEG+0x318>)
 8000c4e:	f000 fc79 	bl	8001544 <HAL_GPIO_WritePin>
					   break;
 8000c52:	e023      	b.n	8000c9c <display7SEG+0x310>

		 case 9:
			 HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2101      	movs	r1, #1
 8000c58:	4812      	ldr	r0, [pc, #72]	@ (8000ca4 <display7SEG+0x318>)
 8000c5a:	f000 fc73 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2102      	movs	r1, #2
 8000c62:	4810      	ldr	r0, [pc, #64]	@ (8000ca4 <display7SEG+0x318>)
 8000c64:	f000 fc6e 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	480d      	ldr	r0, [pc, #52]	@ (8000ca4 <display7SEG+0x318>)
 8000c6e:	f000 fc69 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2108      	movs	r1, #8
 8000c76:	480b      	ldr	r0, [pc, #44]	@ (8000ca4 <display7SEG+0x318>)
 8000c78:	f000 fc64 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg5_GPIO_Port, seg5_Pin, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2110      	movs	r1, #16
 8000c80:	4808      	ldr	r0, [pc, #32]	@ (8000ca4 <display7SEG+0x318>)
 8000c82:	f000 fc5f 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg6_GPIO_Port, seg6_Pin, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2120      	movs	r1, #32
 8000c8a:	4806      	ldr	r0, [pc, #24]	@ (8000ca4 <display7SEG+0x318>)
 8000c8c:	f000 fc5a 	bl	8001544 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(seg7_GPIO_Port, seg7_Pin, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2140      	movs	r1, #64	@ 0x40
 8000c94:	4803      	ldr	r0, [pc, #12]	@ (8000ca4 <display7SEG+0x318>)
 8000c96:	f000 fc55 	bl	8001544 <HAL_GPIO_WritePin>
					   break;
 8000c9a:	bf00      	nop


		 }
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40010c00 	.word	0x40010c00

08000ca8 <setTimer>:
#include "software_timer.h"

int timer_counter[10];
int timer_flag[10];

void setTimer(int duration, int index){
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/10;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a09      	ldr	r2, [pc, #36]	@ (8000cdc <setTimer+0x34>)
 8000cb6:	fb82 1203 	smull	r1, r2, r2, r3
 8000cba:	1092      	asrs	r2, r2, #2
 8000cbc:	17db      	asrs	r3, r3, #31
 8000cbe:	1ad2      	subs	r2, r2, r3
 8000cc0:	4907      	ldr	r1, [pc, #28]	@ (8000ce0 <setTimer+0x38>)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	@ (8000ce4 <setTimer+0x3c>)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	66666667 	.word	0x66666667
 8000ce0:	200000c0 	.word	0x200000c0
 8000ce4:	200000e8 	.word	0x200000e8

08000ce8 <timerRun>:



void timerRun(){
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
	for(int i = 0; i < 10; i++){ //TOI UU HOA ----> O(1)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	e01c      	b.n	8000d2e <timerRun+0x46>
	if(timer_counter[i] > 0){
 8000cf4:	4a12      	ldr	r2, [pc, #72]	@ (8000d40 <timerRun+0x58>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	dd13      	ble.n	8000d28 <timerRun+0x40>
		timer_counter[i]--;
 8000d00:	4a0f      	ldr	r2, [pc, #60]	@ (8000d40 <timerRun+0x58>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d08:	1e5a      	subs	r2, r3, #1
 8000d0a:	490d      	ldr	r1, [pc, #52]	@ (8000d40 <timerRun+0x58>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[i] == 0){
 8000d12:	4a0b      	ldr	r2, [pc, #44]	@ (8000d40 <timerRun+0x58>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d104      	bne.n	8000d28 <timerRun+0x40>
			timer_flag[i] = 1;
 8000d1e:	4a09      	ldr	r2, [pc, #36]	@ (8000d44 <timerRun+0x5c>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2101      	movs	r1, #1
 8000d24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 10; i++){ //TOI UU HOA ----> O(1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b09      	cmp	r3, #9
 8000d32:	dddf      	ble.n	8000cf4 <timerRun+0xc>
		}
	}
}
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	200000c0 	.word	0x200000c0
 8000d44:	200000e8 	.word	0x200000e8

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d4e:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <HAL_MspInit+0x5c>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	4a14      	ldr	r2, [pc, #80]	@ (8000da4 <HAL_MspInit+0x5c>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6193      	str	r3, [r2, #24]
 8000d5a:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <HAL_MspInit+0x5c>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <HAL_MspInit+0x5c>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000da4 <HAL_MspInit+0x5c>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d70:	61d3      	str	r3, [r2, #28]
 8000d72:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <HAL_MspInit+0x5c>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <HAL_MspInit+0x60>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <HAL_MspInit+0x60>)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40010000 	.word	0x40010000

08000dac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dbc:	d113      	bne.n	8000de6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <HAL_TIM_Base_MspInit+0x44>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	@ (8000df0 <HAL_TIM_Base_MspInit+0x44>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	61d3      	str	r3, [r2, #28]
 8000dca:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <HAL_TIM_Base_MspInit+0x44>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	201c      	movs	r0, #28
 8000ddc:	f000 f9ff 	bl	80011de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000de0:	201c      	movs	r0, #28
 8000de2:	f000 fa18 	bl	8001216 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40021000 	.word	0x40021000

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <NMI_Handler+0x4>

08000dfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e44:	f000 f8b4 	bl	8000fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e50:	4802      	ldr	r0, [pc, #8]	@ (8000e5c <TIM2_IRQHandler+0x10>)
 8000e52:	f001 f823 	bl	8001e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000078 	.word	0x20000078

08000e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e68:	4a14      	ldr	r2, [pc, #80]	@ (8000ebc <_sbrk+0x5c>)
 8000e6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <_sbrk+0x60>)
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e74:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d102      	bne.n	8000e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <_sbrk+0x64>)
 8000e7e:	4a12      	ldr	r2, [pc, #72]	@ (8000ec8 <_sbrk+0x68>)
 8000e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e82:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d207      	bcs.n	8000ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e90:	f001 fc1a 	bl	80026c8 <__errno>
 8000e94:	4603      	mov	r3, r0
 8000e96:	220c      	movs	r2, #12
 8000e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	e009      	b.n	8000eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea6:	4b07      	ldr	r3, [pc, #28]	@ (8000ec4 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	4a05      	ldr	r2, [pc, #20]	@ (8000ec4 <_sbrk+0x64>)
 8000eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20002800 	.word	0x20002800
 8000ec0:	00000400 	.word	0x00000400
 8000ec4:	20000110 	.word	0x20000110
 8000ec8:	20000260 	.word	0x20000260

08000ecc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ed8:	f7ff fff8 	bl	8000ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000edc:	480b      	ldr	r0, [pc, #44]	@ (8000f0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ede:	490c      	ldr	r1, [pc, #48]	@ (8000f10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8000f14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a09      	ldr	r2, [pc, #36]	@ (8000f18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ef4:	4c09      	ldr	r4, [pc, #36]	@ (8000f1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f02:	f001 fbe7 	bl	80026d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f06:	f7ff faef 	bl	80004e8 <main>
  bx lr
 8000f0a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f10:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f14:	08002804 	.word	0x08002804
  ldr r2, =_sbss
 8000f18:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f1c:	20000260 	.word	0x20000260

08000f20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC1_2_IRQHandler>
	...

08000f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <HAL_Init+0x28>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	@ (8000f4c <HAL_Init+0x28>)
 8000f2e:	f043 0310 	orr.w	r3, r3, #16
 8000f32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 f947 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3a:	200f      	movs	r0, #15
 8000f3c:	f000 f808 	bl	8000f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f40:	f7ff ff02 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40022000 	.word	0x40022000

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f58:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <HAL_InitTick+0x54>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <HAL_InitTick+0x58>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f95f 	bl	8001232 <HAL_SYSTICK_Config>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00e      	b.n	8000f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d80a      	bhi.n	8000f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f000 f927 	bl	80011de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f90:	4a06      	ldr	r2, [pc, #24]	@ (8000fac <HAL_InitTick+0x5c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e000      	b.n	8000f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	20000004 	.word	0x20000004

08000fb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb4:	4b05      	ldr	r3, [pc, #20]	@ (8000fcc <HAL_IncTick+0x1c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b05      	ldr	r3, [pc, #20]	@ (8000fd0 <HAL_IncTick+0x20>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a03      	ldr	r2, [pc, #12]	@ (8000fd0 <HAL_IncTick+0x20>)
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000114 	.word	0x20000114

08000fd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd8:	4b02      	ldr	r3, [pc, #8]	@ (8000fe4 <HAL_GetTick+0x10>)
 8000fda:	681b      	ldr	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	20000114 	.word	0x20000114

08000fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff0:	f7ff fff0 	bl	8000fd4 <HAL_GetTick>
 8000ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001000:	d005      	beq.n	800100e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <HAL_Delay+0x44>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800100e:	bf00      	nop
 8001010:	f7ff ffe0 	bl	8000fd4 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	429a      	cmp	r2, r3
 800101e:	d8f7      	bhi.n	8001010 <HAL_Delay+0x28>
  {
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000008 	.word	0x20000008

08001030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001058:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800105c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001062:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	60d3      	str	r3, [r2, #12]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db0b      	blt.n	80010be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	f003 021f 	and.w	r2, r3, #31
 80010ac:	4906      	ldr	r1, [pc, #24]	@ (80010c8 <__NVIC_EnableIRQ+0x34>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	2001      	movs	r0, #1
 80010b6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100

080010cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	db0a      	blt.n	80010f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	490c      	ldr	r1, [pc, #48]	@ (8001118 <__NVIC_SetPriority+0x4c>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	0112      	lsls	r2, r2, #4
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	440b      	add	r3, r1
 80010f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f4:	e00a      	b.n	800110c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4908      	ldr	r1, [pc, #32]	@ (800111c <__NVIC_SetPriority+0x50>)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	3b04      	subs	r3, #4
 8001104:	0112      	lsls	r2, r2, #4
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	440b      	add	r3, r1
 800110a:	761a      	strb	r2, [r3, #24]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000e100 	.word	0xe000e100
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	@ 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f1c3 0307 	rsb	r3, r3, #7
 800113a:	2b04      	cmp	r3, #4
 800113c:	bf28      	it	cs
 800113e:	2304      	movcs	r3, #4
 8001140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3304      	adds	r3, #4
 8001146:	2b06      	cmp	r3, #6
 8001148:	d902      	bls.n	8001150 <NVIC_EncodePriority+0x30>
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3b03      	subs	r3, #3
 800114e:	e000      	b.n	8001152 <NVIC_EncodePriority+0x32>
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	f04f 32ff 	mov.w	r2, #4294967295
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43da      	mvns	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	401a      	ands	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001168:	f04f 31ff 	mov.w	r1, #4294967295
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	43d9      	mvns	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	4313      	orrs	r3, r2
         );
}
 800117a:	4618      	mov	r0, r3
 800117c:	3724      	adds	r7, #36	@ 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001194:	d301      	bcc.n	800119a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001196:	2301      	movs	r3, #1
 8001198:	e00f      	b.n	80011ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119a:	4a0a      	ldr	r2, [pc, #40]	@ (80011c4 <SysTick_Config+0x40>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a2:	210f      	movs	r1, #15
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f7ff ff90 	bl	80010cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ac:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <SysTick_Config+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b2:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <SysTick_Config+0x40>)
 80011b4:	2207      	movs	r2, #7
 80011b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	e000e010 	.word	0xe000e010

080011c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff2d 	bl	8001030 <__NVIC_SetPriorityGrouping>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f0:	f7ff ff42 	bl	8001078 <__NVIC_GetPriorityGrouping>
 80011f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff ff90 	bl	8001120 <NVIC_EncodePriority>
 8001200:	4602      	mov	r2, r0
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff5f 	bl	80010cc <__NVIC_SetPriority>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff35 	bl	8001094 <__NVIC_EnableIRQ>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ffa2 	bl	8001184 <SysTick_Config>
 8001240:	4603      	mov	r3, r0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800124c:	b480      	push	{r7}
 800124e:	b08b      	sub	sp, #44	@ 0x2c
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125e:	e161      	b.n	8001524 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001260:	2201      	movs	r2, #1
 8001262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	429a      	cmp	r2, r3
 800127a:	f040 8150 	bne.w	800151e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	4a97      	ldr	r2, [pc, #604]	@ (80014e0 <HAL_GPIO_Init+0x294>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d05e      	beq.n	8001346 <HAL_GPIO_Init+0xfa>
 8001288:	4a95      	ldr	r2, [pc, #596]	@ (80014e0 <HAL_GPIO_Init+0x294>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d875      	bhi.n	800137a <HAL_GPIO_Init+0x12e>
 800128e:	4a95      	ldr	r2, [pc, #596]	@ (80014e4 <HAL_GPIO_Init+0x298>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d058      	beq.n	8001346 <HAL_GPIO_Init+0xfa>
 8001294:	4a93      	ldr	r2, [pc, #588]	@ (80014e4 <HAL_GPIO_Init+0x298>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d86f      	bhi.n	800137a <HAL_GPIO_Init+0x12e>
 800129a:	4a93      	ldr	r2, [pc, #588]	@ (80014e8 <HAL_GPIO_Init+0x29c>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d052      	beq.n	8001346 <HAL_GPIO_Init+0xfa>
 80012a0:	4a91      	ldr	r2, [pc, #580]	@ (80014e8 <HAL_GPIO_Init+0x29c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d869      	bhi.n	800137a <HAL_GPIO_Init+0x12e>
 80012a6:	4a91      	ldr	r2, [pc, #580]	@ (80014ec <HAL_GPIO_Init+0x2a0>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d04c      	beq.n	8001346 <HAL_GPIO_Init+0xfa>
 80012ac:	4a8f      	ldr	r2, [pc, #572]	@ (80014ec <HAL_GPIO_Init+0x2a0>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d863      	bhi.n	800137a <HAL_GPIO_Init+0x12e>
 80012b2:	4a8f      	ldr	r2, [pc, #572]	@ (80014f0 <HAL_GPIO_Init+0x2a4>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d046      	beq.n	8001346 <HAL_GPIO_Init+0xfa>
 80012b8:	4a8d      	ldr	r2, [pc, #564]	@ (80014f0 <HAL_GPIO_Init+0x2a4>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d85d      	bhi.n	800137a <HAL_GPIO_Init+0x12e>
 80012be:	2b12      	cmp	r3, #18
 80012c0:	d82a      	bhi.n	8001318 <HAL_GPIO_Init+0xcc>
 80012c2:	2b12      	cmp	r3, #18
 80012c4:	d859      	bhi.n	800137a <HAL_GPIO_Init+0x12e>
 80012c6:	a201      	add	r2, pc, #4	@ (adr r2, 80012cc <HAL_GPIO_Init+0x80>)
 80012c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012cc:	08001347 	.word	0x08001347
 80012d0:	08001321 	.word	0x08001321
 80012d4:	08001333 	.word	0x08001333
 80012d8:	08001375 	.word	0x08001375
 80012dc:	0800137b 	.word	0x0800137b
 80012e0:	0800137b 	.word	0x0800137b
 80012e4:	0800137b 	.word	0x0800137b
 80012e8:	0800137b 	.word	0x0800137b
 80012ec:	0800137b 	.word	0x0800137b
 80012f0:	0800137b 	.word	0x0800137b
 80012f4:	0800137b 	.word	0x0800137b
 80012f8:	0800137b 	.word	0x0800137b
 80012fc:	0800137b 	.word	0x0800137b
 8001300:	0800137b 	.word	0x0800137b
 8001304:	0800137b 	.word	0x0800137b
 8001308:	0800137b 	.word	0x0800137b
 800130c:	0800137b 	.word	0x0800137b
 8001310:	08001329 	.word	0x08001329
 8001314:	0800133d 	.word	0x0800133d
 8001318:	4a76      	ldr	r2, [pc, #472]	@ (80014f4 <HAL_GPIO_Init+0x2a8>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d013      	beq.n	8001346 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800131e:	e02c      	b.n	800137a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	623b      	str	r3, [r7, #32]
          break;
 8001326:	e029      	b.n	800137c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	3304      	adds	r3, #4
 800132e:	623b      	str	r3, [r7, #32]
          break;
 8001330:	e024      	b.n	800137c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	3308      	adds	r3, #8
 8001338:	623b      	str	r3, [r7, #32]
          break;
 800133a:	e01f      	b.n	800137c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	330c      	adds	r3, #12
 8001342:	623b      	str	r3, [r7, #32]
          break;
 8001344:	e01a      	b.n	800137c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800134e:	2304      	movs	r3, #4
 8001350:	623b      	str	r3, [r7, #32]
          break;
 8001352:	e013      	b.n	800137c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d105      	bne.n	8001368 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800135c:	2308      	movs	r3, #8
 800135e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	611a      	str	r2, [r3, #16]
          break;
 8001366:	e009      	b.n	800137c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001368:	2308      	movs	r3, #8
 800136a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	615a      	str	r2, [r3, #20]
          break;
 8001372:	e003      	b.n	800137c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
          break;
 8001378:	e000      	b.n	800137c <HAL_GPIO_Init+0x130>
          break;
 800137a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2bff      	cmp	r3, #255	@ 0xff
 8001380:	d801      	bhi.n	8001386 <HAL_GPIO_Init+0x13a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	e001      	b.n	800138a <HAL_GPIO_Init+0x13e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3304      	adds	r3, #4
 800138a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	2bff      	cmp	r3, #255	@ 0xff
 8001390:	d802      	bhi.n	8001398 <HAL_GPIO_Init+0x14c>
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	e002      	b.n	800139e <HAL_GPIO_Init+0x152>
 8001398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139a:	3b08      	subs	r3, #8
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	210f      	movs	r1, #15
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	401a      	ands	r2, r3
 80013b0:	6a39      	ldr	r1, [r7, #32]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	431a      	orrs	r2, r3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 80a9 	beq.w	800151e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013cc:	4b4a      	ldr	r3, [pc, #296]	@ (80014f8 <HAL_GPIO_Init+0x2ac>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a49      	ldr	r2, [pc, #292]	@ (80014f8 <HAL_GPIO_Init+0x2ac>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b47      	ldr	r3, [pc, #284]	@ (80014f8 <HAL_GPIO_Init+0x2ac>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013e4:	4a45      	ldr	r2, [pc, #276]	@ (80014fc <HAL_GPIO_Init+0x2b0>)
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	3302      	adds	r3, #2
 80013ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	220f      	movs	r2, #15
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	4013      	ands	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a3d      	ldr	r2, [pc, #244]	@ (8001500 <HAL_GPIO_Init+0x2b4>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d00d      	beq.n	800142c <HAL_GPIO_Init+0x1e0>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a3c      	ldr	r2, [pc, #240]	@ (8001504 <HAL_GPIO_Init+0x2b8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d007      	beq.n	8001428 <HAL_GPIO_Init+0x1dc>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a3b      	ldr	r2, [pc, #236]	@ (8001508 <HAL_GPIO_Init+0x2bc>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d101      	bne.n	8001424 <HAL_GPIO_Init+0x1d8>
 8001420:	2302      	movs	r3, #2
 8001422:	e004      	b.n	800142e <HAL_GPIO_Init+0x1e2>
 8001424:	2303      	movs	r3, #3
 8001426:	e002      	b.n	800142e <HAL_GPIO_Init+0x1e2>
 8001428:	2301      	movs	r3, #1
 800142a:	e000      	b.n	800142e <HAL_GPIO_Init+0x1e2>
 800142c:	2300      	movs	r3, #0
 800142e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001430:	f002 0203 	and.w	r2, r2, #3
 8001434:	0092      	lsls	r2, r2, #2
 8001436:	4093      	lsls	r3, r2
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800143e:	492f      	ldr	r1, [pc, #188]	@ (80014fc <HAL_GPIO_Init+0x2b0>)
 8001440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3302      	adds	r3, #2
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d006      	beq.n	8001466 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001458:	4b2c      	ldr	r3, [pc, #176]	@ (800150c <HAL_GPIO_Init+0x2c0>)
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	492b      	ldr	r1, [pc, #172]	@ (800150c <HAL_GPIO_Init+0x2c0>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	608b      	str	r3, [r1, #8]
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001466:	4b29      	ldr	r3, [pc, #164]	@ (800150c <HAL_GPIO_Init+0x2c0>)
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	43db      	mvns	r3, r3
 800146e:	4927      	ldr	r1, [pc, #156]	@ (800150c <HAL_GPIO_Init+0x2c0>)
 8001470:	4013      	ands	r3, r2
 8001472:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d006      	beq.n	800148e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001480:	4b22      	ldr	r3, [pc, #136]	@ (800150c <HAL_GPIO_Init+0x2c0>)
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	4921      	ldr	r1, [pc, #132]	@ (800150c <HAL_GPIO_Init+0x2c0>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	60cb      	str	r3, [r1, #12]
 800148c:	e006      	b.n	800149c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800148e:	4b1f      	ldr	r3, [pc, #124]	@ (800150c <HAL_GPIO_Init+0x2c0>)
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	43db      	mvns	r3, r3
 8001496:	491d      	ldr	r1, [pc, #116]	@ (800150c <HAL_GPIO_Init+0x2c0>)
 8001498:	4013      	ands	r3, r2
 800149a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d006      	beq.n	80014b6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014a8:	4b18      	ldr	r3, [pc, #96]	@ (800150c <HAL_GPIO_Init+0x2c0>)
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	4917      	ldr	r1, [pc, #92]	@ (800150c <HAL_GPIO_Init+0x2c0>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	604b      	str	r3, [r1, #4]
 80014b4:	e006      	b.n	80014c4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <HAL_GPIO_Init+0x2c0>)
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	43db      	mvns	r3, r3
 80014be:	4913      	ldr	r1, [pc, #76]	@ (800150c <HAL_GPIO_Init+0x2c0>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d01f      	beq.n	8001510 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014d0:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <HAL_GPIO_Init+0x2c0>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	490d      	ldr	r1, [pc, #52]	@ (800150c <HAL_GPIO_Init+0x2c0>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	600b      	str	r3, [r1, #0]
 80014dc:	e01f      	b.n	800151e <HAL_GPIO_Init+0x2d2>
 80014de:	bf00      	nop
 80014e0:	10320000 	.word	0x10320000
 80014e4:	10310000 	.word	0x10310000
 80014e8:	10220000 	.word	0x10220000
 80014ec:	10210000 	.word	0x10210000
 80014f0:	10120000 	.word	0x10120000
 80014f4:	10110000 	.word	0x10110000
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40010000 	.word	0x40010000
 8001500:	40010800 	.word	0x40010800
 8001504:	40010c00 	.word	0x40010c00
 8001508:	40011000 	.word	0x40011000
 800150c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001510:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <HAL_GPIO_Init+0x2f4>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	43db      	mvns	r3, r3
 8001518:	4909      	ldr	r1, [pc, #36]	@ (8001540 <HAL_GPIO_Init+0x2f4>)
 800151a:	4013      	ands	r3, r2
 800151c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800151e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001520:	3301      	adds	r3, #1
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152a:	fa22 f303 	lsr.w	r3, r2, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	f47f ae96 	bne.w	8001260 <HAL_GPIO_Init+0x14>
  }
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	372c      	adds	r7, #44	@ 0x2c
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	40010400 	.word	0x40010400

08001544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
 8001550:	4613      	mov	r3, r2
 8001552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001554:	787b      	ldrb	r3, [r7, #1]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155a:	887a      	ldrh	r2, [r7, #2]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001560:	e003      	b.n	800156a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	041a      	lsls	r2, r3, #16
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	611a      	str	r2, [r3, #16]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4013      	ands	r3, r2
 800158c:	041a      	lsls	r2, r3, #16
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43d9      	mvns	r1, r3
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	400b      	ands	r3, r1
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	611a      	str	r2, [r3, #16]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e272      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 8087 	beq.w	80016d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015c8:	4b92      	ldr	r3, [pc, #584]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 030c 	and.w	r3, r3, #12
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d00c      	beq.n	80015ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015d4:	4b8f      	ldr	r3, [pc, #572]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d112      	bne.n	8001606 <HAL_RCC_OscConfig+0x5e>
 80015e0:	4b8c      	ldr	r3, [pc, #560]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015ec:	d10b      	bne.n	8001606 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ee:	4b89      	ldr	r3, [pc, #548]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d06c      	beq.n	80016d4 <HAL_RCC_OscConfig+0x12c>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d168      	bne.n	80016d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e24c      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800160e:	d106      	bne.n	800161e <HAL_RCC_OscConfig+0x76>
 8001610:	4b80      	ldr	r3, [pc, #512]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a7f      	ldr	r2, [pc, #508]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	e02e      	b.n	800167c <HAL_RCC_OscConfig+0xd4>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x98>
 8001626:	4b7b      	ldr	r3, [pc, #492]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a7a      	ldr	r2, [pc, #488]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 800162c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b78      	ldr	r3, [pc, #480]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a77      	ldr	r2, [pc, #476]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001638:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e01d      	b.n	800167c <HAL_RCC_OscConfig+0xd4>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0xbc>
 800164a:	4b72      	ldr	r3, [pc, #456]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a71      	ldr	r2, [pc, #452]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001650:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b6f      	ldr	r3, [pc, #444]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a6e      	ldr	r2, [pc, #440]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 800165c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e00b      	b.n	800167c <HAL_RCC_OscConfig+0xd4>
 8001664:	4b6b      	ldr	r3, [pc, #428]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a6a      	ldr	r2, [pc, #424]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 800166a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b68      	ldr	r3, [pc, #416]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a67      	ldr	r2, [pc, #412]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001676:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800167a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d013      	beq.n	80016ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fca6 	bl	8000fd4 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800168c:	f7ff fca2 	bl	8000fd4 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b64      	cmp	r3, #100	@ 0x64
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e200      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	4b5d      	ldr	r3, [pc, #372]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0xe4>
 80016aa:	e014      	b.n	80016d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fc92 	bl	8000fd4 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b4:	f7ff fc8e 	bl	8000fd4 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	@ 0x64
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e1ec      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c6:	4b53      	ldr	r3, [pc, #332]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x10c>
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d063      	beq.n	80017aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00b      	beq.n	8001706 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016ee:	4b49      	ldr	r3, [pc, #292]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d11c      	bne.n	8001734 <HAL_RCC_OscConfig+0x18c>
 80016fa:	4b46      	ldr	r3, [pc, #280]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d116      	bne.n	8001734 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001706:	4b43      	ldr	r3, [pc, #268]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d005      	beq.n	800171e <HAL_RCC_OscConfig+0x176>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d001      	beq.n	800171e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e1c0      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171e:	4b3d      	ldr	r3, [pc, #244]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4939      	ldr	r1, [pc, #228]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 800172e:	4313      	orrs	r3, r2
 8001730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001732:	e03a      	b.n	80017aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800173c:	4b36      	ldr	r3, [pc, #216]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff fc47 	bl	8000fd4 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174a:	f7ff fc43 	bl	8000fd4 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e1a1      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175c:	4b2d      	ldr	r3, [pc, #180]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001768:	4b2a      	ldr	r3, [pc, #168]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4927      	ldr	r1, [pc, #156]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001778:	4313      	orrs	r3, r2
 800177a:	600b      	str	r3, [r1, #0]
 800177c:	e015      	b.n	80017aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177e:	4b26      	ldr	r3, [pc, #152]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff fc26 	bl	8000fd4 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178c:	f7ff fc22 	bl	8000fd4 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e180      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179e:	4b1d      	ldr	r3, [pc, #116]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d03a      	beq.n	800182c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d019      	beq.n	80017f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017be:	4b17      	ldr	r3, [pc, #92]	@ (800181c <HAL_RCC_OscConfig+0x274>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c4:	f7ff fc06 	bl	8000fd4 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017cc:	f7ff fc02 	bl	8000fd4 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e160      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017ea:	2001      	movs	r0, #1
 80017ec:	f000 fa9c 	bl	8001d28 <RCC_Delay>
 80017f0:	e01c      	b.n	800182c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f2:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <HAL_RCC_OscConfig+0x274>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f8:	f7ff fbec 	bl	8000fd4 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fe:	e00f      	b.n	8001820 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001800:	f7ff fbe8 	bl	8000fd4 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d908      	bls.n	8001820 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e146      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
 8001818:	42420000 	.word	0x42420000
 800181c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001820:	4b92      	ldr	r3, [pc, #584]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1e9      	bne.n	8001800 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 80a6 	beq.w	8001986 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183e:	4b8b      	ldr	r3, [pc, #556]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10d      	bne.n	8001866 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	4b88      	ldr	r3, [pc, #544]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	4a87      	ldr	r2, [pc, #540]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001854:	61d3      	str	r3, [r2, #28]
 8001856:	4b85      	ldr	r3, [pc, #532]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001862:	2301      	movs	r3, #1
 8001864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001866:	4b82      	ldr	r3, [pc, #520]	@ (8001a70 <HAL_RCC_OscConfig+0x4c8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d118      	bne.n	80018a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001872:	4b7f      	ldr	r3, [pc, #508]	@ (8001a70 <HAL_RCC_OscConfig+0x4c8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a7e      	ldr	r2, [pc, #504]	@ (8001a70 <HAL_RCC_OscConfig+0x4c8>)
 8001878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800187c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187e:	f7ff fba9 	bl	8000fd4 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001886:	f7ff fba5 	bl	8000fd4 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b64      	cmp	r3, #100	@ 0x64
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e103      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001898:	4b75      	ldr	r3, [pc, #468]	@ (8001a70 <HAL_RCC_OscConfig+0x4c8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d106      	bne.n	80018ba <HAL_RCC_OscConfig+0x312>
 80018ac:	4b6f      	ldr	r3, [pc, #444]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	4a6e      	ldr	r2, [pc, #440]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6213      	str	r3, [r2, #32]
 80018b8:	e02d      	b.n	8001916 <HAL_RCC_OscConfig+0x36e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0x334>
 80018c2:	4b6a      	ldr	r3, [pc, #424]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4a69      	ldr	r2, [pc, #420]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	6213      	str	r3, [r2, #32]
 80018ce:	4b67      	ldr	r3, [pc, #412]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	4a66      	ldr	r2, [pc, #408]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	f023 0304 	bic.w	r3, r3, #4
 80018d8:	6213      	str	r3, [r2, #32]
 80018da:	e01c      	b.n	8001916 <HAL_RCC_OscConfig+0x36e>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d10c      	bne.n	80018fe <HAL_RCC_OscConfig+0x356>
 80018e4:	4b61      	ldr	r3, [pc, #388]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4a60      	ldr	r2, [pc, #384]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	6213      	str	r3, [r2, #32]
 80018f0:	4b5e      	ldr	r3, [pc, #376]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	4a5d      	ldr	r2, [pc, #372]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6213      	str	r3, [r2, #32]
 80018fc:	e00b      	b.n	8001916 <HAL_RCC_OscConfig+0x36e>
 80018fe:	4b5b      	ldr	r3, [pc, #364]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4a5a      	ldr	r2, [pc, #360]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001904:	f023 0301 	bic.w	r3, r3, #1
 8001908:	6213      	str	r3, [r2, #32]
 800190a:	4b58      	ldr	r3, [pc, #352]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	4a57      	ldr	r2, [pc, #348]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001910:	f023 0304 	bic.w	r3, r3, #4
 8001914:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d015      	beq.n	800194a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191e:	f7ff fb59 	bl	8000fd4 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001924:	e00a      	b.n	800193c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001926:	f7ff fb55 	bl	8000fd4 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001934:	4293      	cmp	r3, r2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e0b1      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193c:	4b4b      	ldr	r3, [pc, #300]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0ee      	beq.n	8001926 <HAL_RCC_OscConfig+0x37e>
 8001948:	e014      	b.n	8001974 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194a:	f7ff fb43 	bl	8000fd4 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001950:	e00a      	b.n	8001968 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001952:	f7ff fb3f 	bl	8000fd4 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001960:	4293      	cmp	r3, r2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e09b      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001968:	4b40      	ldr	r3, [pc, #256]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1ee      	bne.n	8001952 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001974:	7dfb      	ldrb	r3, [r7, #23]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d105      	bne.n	8001986 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	4a3b      	ldr	r2, [pc, #236]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001980:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001984:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 8087 	beq.w	8001a9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001990:	4b36      	ldr	r3, [pc, #216]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	d061      	beq.n	8001a60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d146      	bne.n	8001a32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a4:	4b33      	ldr	r3, [pc, #204]	@ (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7ff fb13 	bl	8000fd4 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b2:	f7ff fb0f 	bl	8000fd4 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e06d      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c4:	4b29      	ldr	r3, [pc, #164]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f0      	bne.n	80019b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019d8:	d108      	bne.n	80019ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019da:	4b24      	ldr	r3, [pc, #144]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	4921      	ldr	r1, [pc, #132]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ec:	4b1f      	ldr	r3, [pc, #124]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a19      	ldr	r1, [r3, #32]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fc:	430b      	orrs	r3, r1
 80019fe:	491b      	ldr	r1, [pc, #108]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a04:	4b1b      	ldr	r3, [pc, #108]	@ (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0a:	f7ff fae3 	bl	8000fd4 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a12:	f7ff fadf 	bl	8000fd4 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e03d      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a24:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x46a>
 8001a30:	e035      	b.n	8001a9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a32:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff facc 	bl	8000fd4 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a40:	f7ff fac8 	bl	8000fd4 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e026      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x498>
 8001a5e:	e01e      	b.n	8001a9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d107      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e019      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40007000 	.word	0x40007000
 8001a74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a78:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <HAL_RCC_OscConfig+0x500>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d106      	bne.n	8001a9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d001      	beq.n	8001a9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40021000 	.word	0x40021000

08001aac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0d0      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b6a      	ldr	r3, [pc, #424]	@ (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d910      	bls.n	8001af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b67      	ldr	r3, [pc, #412]	@ (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 0207 	bic.w	r2, r3, #7
 8001ad6:	4965      	ldr	r1, [pc, #404]	@ (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b63      	ldr	r3, [pc, #396]	@ (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0b8      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d020      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b08:	4b59      	ldr	r3, [pc, #356]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4a58      	ldr	r2, [pc, #352]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b20:	4b53      	ldr	r3, [pc, #332]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	4a52      	ldr	r2, [pc, #328]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001b2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b2c:	4b50      	ldr	r3, [pc, #320]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	494d      	ldr	r1, [pc, #308]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d040      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	4b47      	ldr	r3, [pc, #284]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d115      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e07f      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d107      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6a:	4b41      	ldr	r3, [pc, #260]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d109      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e073      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e06b      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b8a:	4b39      	ldr	r3, [pc, #228]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f023 0203 	bic.w	r2, r3, #3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4936      	ldr	r1, [pc, #216]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b9c:	f7ff fa1a 	bl	8000fd4 <HAL_GetTick>
 8001ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba2:	e00a      	b.n	8001bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba4:	f7ff fa16 	bl	8000fd4 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e053      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	4b2d      	ldr	r3, [pc, #180]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 020c 	and.w	r2, r3, #12
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d1eb      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b27      	ldr	r3, [pc, #156]	@ (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d210      	bcs.n	8001bfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b24      	ldr	r3, [pc, #144]	@ (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 0207 	bic.w	r2, r3, #7
 8001be2:	4922      	ldr	r1, [pc, #136]	@ (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b20      	ldr	r3, [pc, #128]	@ (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e032      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d008      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c08:	4b19      	ldr	r3, [pc, #100]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	4916      	ldr	r1, [pc, #88]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d009      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c26:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	490e      	ldr	r1, [pc, #56]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c3a:	f000 f821 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	490a      	ldr	r1, [pc, #40]	@ (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4c:	5ccb      	ldrb	r3, [r1, r3]
 8001c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c52:	4a09      	ldr	r2, [pc, #36]	@ (8001c78 <HAL_RCC_ClockConfig+0x1cc>)
 8001c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c56:	4b09      	ldr	r3, [pc, #36]	@ (8001c7c <HAL_RCC_ClockConfig+0x1d0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f978 	bl	8000f50 <HAL_InitTick>

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40022000 	.word	0x40022000
 8001c70:	40021000 	.word	0x40021000
 8001c74:	080027d8 	.word	0x080027d8
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000004 	.word	0x20000004

08001c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d002      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x30>
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d003      	beq.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x36>
 8001cae:	e027      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cb0:	4b19      	ldr	r3, [pc, #100]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cb2:	613b      	str	r3, [r7, #16]
      break;
 8001cb4:	e027      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	0c9b      	lsrs	r3, r3, #18
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	4a17      	ldr	r2, [pc, #92]	@ (8001d1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cc0:	5cd3      	ldrb	r3, [r2, r3]
 8001cc2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d010      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cce:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	0c5b      	lsrs	r3, r3, #17
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	4a11      	ldr	r2, [pc, #68]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cda:	5cd3      	ldrb	r3, [r2, r3]
 8001cdc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ce2:	fb03 f202 	mul.w	r2, r3, r2
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	e004      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cf4:	fb02 f303 	mul.w	r3, r2, r3
 8001cf8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	613b      	str	r3, [r7, #16]
      break;
 8001cfe:	e002      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d00:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d02:	613b      	str	r3, [r7, #16]
      break;
 8001d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d06:	693b      	ldr	r3, [r7, #16]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	371c      	adds	r7, #28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000
 8001d18:	007a1200 	.word	0x007a1200
 8001d1c:	080027e8 	.word	0x080027e8
 8001d20:	080027f8 	.word	0x080027f8
 8001d24:	003d0900 	.word	0x003d0900

08001d28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d30:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <RCC_Delay+0x34>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <RCC_Delay+0x38>)
 8001d36:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3a:	0a5b      	lsrs	r3, r3, #9
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	fb02 f303 	mul.w	r3, r2, r3
 8001d42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d44:	bf00      	nop
  }
  while (Delay --);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1e5a      	subs	r2, r3, #1
 8001d4a:	60fa      	str	r2, [r7, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f9      	bne.n	8001d44 <RCC_Delay+0x1c>
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	10624dd3 	.word	0x10624dd3

08001d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e041      	b.n	8001dfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d106      	bne.n	8001d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff f80e 	bl	8000dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3304      	adds	r3, #4
 8001da0:	4619      	mov	r1, r3
 8001da2:	4610      	mov	r0, r2
 8001da4:	f000 fa56 	bl	8002254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d001      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e035      	b.n	8001e88 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a16      	ldr	r2, [pc, #88]	@ (8001e94 <HAL_TIM_Base_Start_IT+0x90>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d009      	beq.n	8001e52 <HAL_TIM_Base_Start_IT+0x4e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e46:	d004      	beq.n	8001e52 <HAL_TIM_Base_Start_IT+0x4e>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a12      	ldr	r2, [pc, #72]	@ (8001e98 <HAL_TIM_Base_Start_IT+0x94>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d111      	bne.n	8001e76 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b06      	cmp	r3, #6
 8001e62:	d010      	beq.n	8001e86 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e74:	e007      	b.n	8001e86 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0201 	orr.w	r2, r2, #1
 8001e84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40012c00 	.word	0x40012c00
 8001e98:	40000400 	.word	0x40000400

08001e9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d020      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d01b      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f06f 0202 	mvn.w	r2, #2
 8001ed0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f998 	bl	800221c <HAL_TIM_IC_CaptureCallback>
 8001eec:	e005      	b.n	8001efa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f98b 	bl	800220a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f99a 	bl	800222e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d020      	beq.n	8001f4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d01b      	beq.n	8001f4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0204 	mvn.w	r2, #4
 8001f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2202      	movs	r2, #2
 8001f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f972 	bl	800221c <HAL_TIM_IC_CaptureCallback>
 8001f38:	e005      	b.n	8001f46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f965 	bl	800220a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f974 	bl	800222e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d020      	beq.n	8001f98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01b      	beq.n	8001f98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0208 	mvn.w	r2, #8
 8001f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f94c 	bl	800221c <HAL_TIM_IC_CaptureCallback>
 8001f84:	e005      	b.n	8001f92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f93f 	bl	800220a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f94e 	bl	800222e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f003 0310 	and.w	r3, r3, #16
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d020      	beq.n	8001fe4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d01b      	beq.n	8001fe4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0210 	mvn.w	r2, #16
 8001fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2208      	movs	r2, #8
 8001fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f926 	bl	800221c <HAL_TIM_IC_CaptureCallback>
 8001fd0:	e005      	b.n	8001fde <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f919 	bl	800220a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f928 	bl	800222e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00c      	beq.n	8002008 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d007      	beq.n	8002008 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0201 	mvn.w	r2, #1
 8002000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7fe fc24 	bl	8000850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00c      	beq.n	800202c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002018:	2b00      	cmp	r3, #0
 800201a:	d007      	beq.n	800202c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fa6f 	bl	800250a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00c      	beq.n	8002050 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800203c:	2b00      	cmp	r3, #0
 800203e:	d007      	beq.n	8002050 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8f8 	bl	8002240 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f003 0320 	and.w	r3, r3, #32
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00c      	beq.n	8002074 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f003 0320 	and.w	r3, r3, #32
 8002060:	2b00      	cmp	r3, #0
 8002062:	d007      	beq.n	8002074 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0220 	mvn.w	r2, #32
 800206c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 fa42 	bl	80024f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002074:	bf00      	nop
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_TIM_ConfigClockSource+0x1c>
 8002094:	2302      	movs	r3, #2
 8002096:	e0b4      	b.n	8002202 <HAL_TIM_ConfigClockSource+0x186>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80020b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80020be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020d0:	d03e      	beq.n	8002150 <HAL_TIM_ConfigClockSource+0xd4>
 80020d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020d6:	f200 8087 	bhi.w	80021e8 <HAL_TIM_ConfigClockSource+0x16c>
 80020da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020de:	f000 8086 	beq.w	80021ee <HAL_TIM_ConfigClockSource+0x172>
 80020e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020e6:	d87f      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x16c>
 80020e8:	2b70      	cmp	r3, #112	@ 0x70
 80020ea:	d01a      	beq.n	8002122 <HAL_TIM_ConfigClockSource+0xa6>
 80020ec:	2b70      	cmp	r3, #112	@ 0x70
 80020ee:	d87b      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x16c>
 80020f0:	2b60      	cmp	r3, #96	@ 0x60
 80020f2:	d050      	beq.n	8002196 <HAL_TIM_ConfigClockSource+0x11a>
 80020f4:	2b60      	cmp	r3, #96	@ 0x60
 80020f6:	d877      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x16c>
 80020f8:	2b50      	cmp	r3, #80	@ 0x50
 80020fa:	d03c      	beq.n	8002176 <HAL_TIM_ConfigClockSource+0xfa>
 80020fc:	2b50      	cmp	r3, #80	@ 0x50
 80020fe:	d873      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002100:	2b40      	cmp	r3, #64	@ 0x40
 8002102:	d058      	beq.n	80021b6 <HAL_TIM_ConfigClockSource+0x13a>
 8002104:	2b40      	cmp	r3, #64	@ 0x40
 8002106:	d86f      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002108:	2b30      	cmp	r3, #48	@ 0x30
 800210a:	d064      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x15a>
 800210c:	2b30      	cmp	r3, #48	@ 0x30
 800210e:	d86b      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002110:	2b20      	cmp	r3, #32
 8002112:	d060      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002114:	2b20      	cmp	r3, #32
 8002116:	d867      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002118:	2b00      	cmp	r3, #0
 800211a:	d05c      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x15a>
 800211c:	2b10      	cmp	r3, #16
 800211e:	d05a      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002120:	e062      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002132:	f000 f96a 	bl	800240a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002144:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	609a      	str	r2, [r3, #8]
      break;
 800214e:	e04f      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002160:	f000 f953 	bl	800240a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002172:	609a      	str	r2, [r3, #8]
      break;
 8002174:	e03c      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002182:	461a      	mov	r2, r3
 8002184:	f000 f8ca 	bl	800231c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2150      	movs	r1, #80	@ 0x50
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f921 	bl	80023d6 <TIM_ITRx_SetConfig>
      break;
 8002194:	e02c      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021a2:	461a      	mov	r2, r3
 80021a4:	f000 f8e8 	bl	8002378 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2160      	movs	r1, #96	@ 0x60
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f911 	bl	80023d6 <TIM_ITRx_SetConfig>
      break;
 80021b4:	e01c      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021c2:	461a      	mov	r2, r3
 80021c4:	f000 f8aa 	bl	800231c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2140      	movs	r1, #64	@ 0x40
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 f901 	bl	80023d6 <TIM_ITRx_SetConfig>
      break;
 80021d4:	e00c      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4619      	mov	r1, r3
 80021e0:	4610      	mov	r0, r2
 80021e2:	f000 f8f8 	bl	80023d6 <TIM_ITRx_SetConfig>
      break;
 80021e6:	e003      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
      break;
 80021ec:	e000      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80021ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002200:	7bfb      	ldrb	r3, [r7, #15]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr

0800222e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
	...

08002254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a2b      	ldr	r2, [pc, #172]	@ (8002314 <TIM_Base_SetConfig+0xc0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d007      	beq.n	800227c <TIM_Base_SetConfig+0x28>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002272:	d003      	beq.n	800227c <TIM_Base_SetConfig+0x28>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a28      	ldr	r2, [pc, #160]	@ (8002318 <TIM_Base_SetConfig+0xc4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d108      	bne.n	800228e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	4313      	orrs	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a20      	ldr	r2, [pc, #128]	@ (8002314 <TIM_Base_SetConfig+0xc0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d007      	beq.n	80022a6 <TIM_Base_SetConfig+0x52>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800229c:	d003      	beq.n	80022a6 <TIM_Base_SetConfig+0x52>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002318 <TIM_Base_SetConfig+0xc4>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d108      	bne.n	80022b8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a0d      	ldr	r2, [pc, #52]	@ (8002314 <TIM_Base_SetConfig+0xc0>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d103      	bne.n	80022ec <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f023 0201 	bic.w	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	611a      	str	r2, [r3, #16]
  }
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	40012c00 	.word	0x40012c00
 8002318:	40000400 	.word	0x40000400

0800231c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	f023 0201 	bic.w	r2, r3, #1
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4313      	orrs	r3, r2
 8002350:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f023 030a 	bic.w	r3, r3, #10
 8002358:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4313      	orrs	r3, r2
 8002360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	621a      	str	r2, [r3, #32]
}
 800236e:	bf00      	nop
 8002370:	371c      	adds	r7, #28
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr

08002378 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002378:	b480      	push	{r7}
 800237a:	b087      	sub	sp, #28
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	f023 0210 	bic.w	r2, r3, #16
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80023a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	031b      	lsls	r3, r3, #12
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80023b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	4313      	orrs	r3, r2
 80023be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	621a      	str	r2, [r3, #32]
}
 80023cc:	bf00      	nop
 80023ce:	371c      	adds	r7, #28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b085      	sub	sp, #20
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f043 0307 	orr.w	r3, r3, #7
 80023f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	609a      	str	r2, [r3, #8]
}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800240a:	b480      	push	{r7}
 800240c:	b087      	sub	sp, #28
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002424:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	021a      	lsls	r2, r3, #8
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	431a      	orrs	r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	4313      	orrs	r3, r2
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	609a      	str	r2, [r3, #8]
}
 800243e:	bf00      	nop
 8002440:	371c      	adds	r7, #28
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800245c:	2302      	movs	r3, #2
 800245e:	e041      	b.n	80024e4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002486:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a14      	ldr	r2, [pc, #80]	@ (80024f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d009      	beq.n	80024b8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ac:	d004      	beq.n	80024b8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a10      	ldr	r2, [pc, #64]	@ (80024f4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d10c      	bne.n	80024d2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40012c00 	.word	0x40012c00
 80024f4:	40000400 	.word	0x40000400

080024f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr

0800250a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <malloc>:
 800251c:	4b02      	ldr	r3, [pc, #8]	@ (8002528 <malloc+0xc>)
 800251e:	4601      	mov	r1, r0
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	f000 b82d 	b.w	8002580 <_malloc_r>
 8002526:	bf00      	nop
 8002528:	2000000c 	.word	0x2000000c

0800252c <free>:
 800252c:	4b02      	ldr	r3, [pc, #8]	@ (8002538 <free+0xc>)
 800252e:	4601      	mov	r1, r0
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	f000 b8f5 	b.w	8002720 <_free_r>
 8002536:	bf00      	nop
 8002538:	2000000c 	.word	0x2000000c

0800253c <sbrk_aligned>:
 800253c:	b570      	push	{r4, r5, r6, lr}
 800253e:	4e0f      	ldr	r6, [pc, #60]	@ (800257c <sbrk_aligned+0x40>)
 8002540:	460c      	mov	r4, r1
 8002542:	6831      	ldr	r1, [r6, #0]
 8002544:	4605      	mov	r5, r0
 8002546:	b911      	cbnz	r1, 800254e <sbrk_aligned+0x12>
 8002548:	f000 f8ae 	bl	80026a8 <_sbrk_r>
 800254c:	6030      	str	r0, [r6, #0]
 800254e:	4621      	mov	r1, r4
 8002550:	4628      	mov	r0, r5
 8002552:	f000 f8a9 	bl	80026a8 <_sbrk_r>
 8002556:	1c43      	adds	r3, r0, #1
 8002558:	d103      	bne.n	8002562 <sbrk_aligned+0x26>
 800255a:	f04f 34ff 	mov.w	r4, #4294967295
 800255e:	4620      	mov	r0, r4
 8002560:	bd70      	pop	{r4, r5, r6, pc}
 8002562:	1cc4      	adds	r4, r0, #3
 8002564:	f024 0403 	bic.w	r4, r4, #3
 8002568:	42a0      	cmp	r0, r4
 800256a:	d0f8      	beq.n	800255e <sbrk_aligned+0x22>
 800256c:	1a21      	subs	r1, r4, r0
 800256e:	4628      	mov	r0, r5
 8002570:	f000 f89a 	bl	80026a8 <_sbrk_r>
 8002574:	3001      	adds	r0, #1
 8002576:	d1f2      	bne.n	800255e <sbrk_aligned+0x22>
 8002578:	e7ef      	b.n	800255a <sbrk_aligned+0x1e>
 800257a:	bf00      	nop
 800257c:	20000118 	.word	0x20000118

08002580 <_malloc_r>:
 8002580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002584:	1ccd      	adds	r5, r1, #3
 8002586:	f025 0503 	bic.w	r5, r5, #3
 800258a:	3508      	adds	r5, #8
 800258c:	2d0c      	cmp	r5, #12
 800258e:	bf38      	it	cc
 8002590:	250c      	movcc	r5, #12
 8002592:	2d00      	cmp	r5, #0
 8002594:	4606      	mov	r6, r0
 8002596:	db01      	blt.n	800259c <_malloc_r+0x1c>
 8002598:	42a9      	cmp	r1, r5
 800259a:	d904      	bls.n	80025a6 <_malloc_r+0x26>
 800259c:	230c      	movs	r3, #12
 800259e:	6033      	str	r3, [r6, #0]
 80025a0:	2000      	movs	r0, #0
 80025a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800267c <_malloc_r+0xfc>
 80025aa:	f000 f869 	bl	8002680 <__malloc_lock>
 80025ae:	f8d8 3000 	ldr.w	r3, [r8]
 80025b2:	461c      	mov	r4, r3
 80025b4:	bb44      	cbnz	r4, 8002608 <_malloc_r+0x88>
 80025b6:	4629      	mov	r1, r5
 80025b8:	4630      	mov	r0, r6
 80025ba:	f7ff ffbf 	bl	800253c <sbrk_aligned>
 80025be:	1c43      	adds	r3, r0, #1
 80025c0:	4604      	mov	r4, r0
 80025c2:	d158      	bne.n	8002676 <_malloc_r+0xf6>
 80025c4:	f8d8 4000 	ldr.w	r4, [r8]
 80025c8:	4627      	mov	r7, r4
 80025ca:	2f00      	cmp	r7, #0
 80025cc:	d143      	bne.n	8002656 <_malloc_r+0xd6>
 80025ce:	2c00      	cmp	r4, #0
 80025d0:	d04b      	beq.n	800266a <_malloc_r+0xea>
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	4639      	mov	r1, r7
 80025d6:	4630      	mov	r0, r6
 80025d8:	eb04 0903 	add.w	r9, r4, r3
 80025dc:	f000 f864 	bl	80026a8 <_sbrk_r>
 80025e0:	4581      	cmp	r9, r0
 80025e2:	d142      	bne.n	800266a <_malloc_r+0xea>
 80025e4:	6821      	ldr	r1, [r4, #0]
 80025e6:	4630      	mov	r0, r6
 80025e8:	1a6d      	subs	r5, r5, r1
 80025ea:	4629      	mov	r1, r5
 80025ec:	f7ff ffa6 	bl	800253c <sbrk_aligned>
 80025f0:	3001      	adds	r0, #1
 80025f2:	d03a      	beq.n	800266a <_malloc_r+0xea>
 80025f4:	6823      	ldr	r3, [r4, #0]
 80025f6:	442b      	add	r3, r5
 80025f8:	6023      	str	r3, [r4, #0]
 80025fa:	f8d8 3000 	ldr.w	r3, [r8]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	bb62      	cbnz	r2, 800265c <_malloc_r+0xdc>
 8002602:	f8c8 7000 	str.w	r7, [r8]
 8002606:	e00f      	b.n	8002628 <_malloc_r+0xa8>
 8002608:	6822      	ldr	r2, [r4, #0]
 800260a:	1b52      	subs	r2, r2, r5
 800260c:	d420      	bmi.n	8002650 <_malloc_r+0xd0>
 800260e:	2a0b      	cmp	r2, #11
 8002610:	d917      	bls.n	8002642 <_malloc_r+0xc2>
 8002612:	1961      	adds	r1, r4, r5
 8002614:	42a3      	cmp	r3, r4
 8002616:	6025      	str	r5, [r4, #0]
 8002618:	bf18      	it	ne
 800261a:	6059      	strne	r1, [r3, #4]
 800261c:	6863      	ldr	r3, [r4, #4]
 800261e:	bf08      	it	eq
 8002620:	f8c8 1000 	streq.w	r1, [r8]
 8002624:	5162      	str	r2, [r4, r5]
 8002626:	604b      	str	r3, [r1, #4]
 8002628:	4630      	mov	r0, r6
 800262a:	f000 f82f 	bl	800268c <__malloc_unlock>
 800262e:	f104 000b 	add.w	r0, r4, #11
 8002632:	1d23      	adds	r3, r4, #4
 8002634:	f020 0007 	bic.w	r0, r0, #7
 8002638:	1ac2      	subs	r2, r0, r3
 800263a:	bf1c      	itt	ne
 800263c:	1a1b      	subne	r3, r3, r0
 800263e:	50a3      	strne	r3, [r4, r2]
 8002640:	e7af      	b.n	80025a2 <_malloc_r+0x22>
 8002642:	6862      	ldr	r2, [r4, #4]
 8002644:	42a3      	cmp	r3, r4
 8002646:	bf0c      	ite	eq
 8002648:	f8c8 2000 	streq.w	r2, [r8]
 800264c:	605a      	strne	r2, [r3, #4]
 800264e:	e7eb      	b.n	8002628 <_malloc_r+0xa8>
 8002650:	4623      	mov	r3, r4
 8002652:	6864      	ldr	r4, [r4, #4]
 8002654:	e7ae      	b.n	80025b4 <_malloc_r+0x34>
 8002656:	463c      	mov	r4, r7
 8002658:	687f      	ldr	r7, [r7, #4]
 800265a:	e7b6      	b.n	80025ca <_malloc_r+0x4a>
 800265c:	461a      	mov	r2, r3
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	42a3      	cmp	r3, r4
 8002662:	d1fb      	bne.n	800265c <_malloc_r+0xdc>
 8002664:	2300      	movs	r3, #0
 8002666:	6053      	str	r3, [r2, #4]
 8002668:	e7de      	b.n	8002628 <_malloc_r+0xa8>
 800266a:	230c      	movs	r3, #12
 800266c:	4630      	mov	r0, r6
 800266e:	6033      	str	r3, [r6, #0]
 8002670:	f000 f80c 	bl	800268c <__malloc_unlock>
 8002674:	e794      	b.n	80025a0 <_malloc_r+0x20>
 8002676:	6005      	str	r5, [r0, #0]
 8002678:	e7d6      	b.n	8002628 <_malloc_r+0xa8>
 800267a:	bf00      	nop
 800267c:	2000011c 	.word	0x2000011c

08002680 <__malloc_lock>:
 8002680:	4801      	ldr	r0, [pc, #4]	@ (8002688 <__malloc_lock+0x8>)
 8002682:	f000 b84b 	b.w	800271c <__retarget_lock_acquire_recursive>
 8002686:	bf00      	nop
 8002688:	2000025c 	.word	0x2000025c

0800268c <__malloc_unlock>:
 800268c:	4801      	ldr	r0, [pc, #4]	@ (8002694 <__malloc_unlock+0x8>)
 800268e:	f000 b846 	b.w	800271e <__retarget_lock_release_recursive>
 8002692:	bf00      	nop
 8002694:	2000025c 	.word	0x2000025c

08002698 <memset>:
 8002698:	4603      	mov	r3, r0
 800269a:	4402      	add	r2, r0
 800269c:	4293      	cmp	r3, r2
 800269e:	d100      	bne.n	80026a2 <memset+0xa>
 80026a0:	4770      	bx	lr
 80026a2:	f803 1b01 	strb.w	r1, [r3], #1
 80026a6:	e7f9      	b.n	800269c <memset+0x4>

080026a8 <_sbrk_r>:
 80026a8:	b538      	push	{r3, r4, r5, lr}
 80026aa:	2300      	movs	r3, #0
 80026ac:	4d05      	ldr	r5, [pc, #20]	@ (80026c4 <_sbrk_r+0x1c>)
 80026ae:	4604      	mov	r4, r0
 80026b0:	4608      	mov	r0, r1
 80026b2:	602b      	str	r3, [r5, #0]
 80026b4:	f7fe fbd4 	bl	8000e60 <_sbrk>
 80026b8:	1c43      	adds	r3, r0, #1
 80026ba:	d102      	bne.n	80026c2 <_sbrk_r+0x1a>
 80026bc:	682b      	ldr	r3, [r5, #0]
 80026be:	b103      	cbz	r3, 80026c2 <_sbrk_r+0x1a>
 80026c0:	6023      	str	r3, [r4, #0]
 80026c2:	bd38      	pop	{r3, r4, r5, pc}
 80026c4:	20000258 	.word	0x20000258

080026c8 <__errno>:
 80026c8:	4b01      	ldr	r3, [pc, #4]	@ (80026d0 <__errno+0x8>)
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	2000000c 	.word	0x2000000c

080026d4 <__libc_init_array>:
 80026d4:	b570      	push	{r4, r5, r6, lr}
 80026d6:	2600      	movs	r6, #0
 80026d8:	4d0c      	ldr	r5, [pc, #48]	@ (800270c <__libc_init_array+0x38>)
 80026da:	4c0d      	ldr	r4, [pc, #52]	@ (8002710 <__libc_init_array+0x3c>)
 80026dc:	1b64      	subs	r4, r4, r5
 80026de:	10a4      	asrs	r4, r4, #2
 80026e0:	42a6      	cmp	r6, r4
 80026e2:	d109      	bne.n	80026f8 <__libc_init_array+0x24>
 80026e4:	f000 f864 	bl	80027b0 <_init>
 80026e8:	2600      	movs	r6, #0
 80026ea:	4d0a      	ldr	r5, [pc, #40]	@ (8002714 <__libc_init_array+0x40>)
 80026ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002718 <__libc_init_array+0x44>)
 80026ee:	1b64      	subs	r4, r4, r5
 80026f0:	10a4      	asrs	r4, r4, #2
 80026f2:	42a6      	cmp	r6, r4
 80026f4:	d105      	bne.n	8002702 <__libc_init_array+0x2e>
 80026f6:	bd70      	pop	{r4, r5, r6, pc}
 80026f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026fc:	4798      	blx	r3
 80026fe:	3601      	adds	r6, #1
 8002700:	e7ee      	b.n	80026e0 <__libc_init_array+0xc>
 8002702:	f855 3b04 	ldr.w	r3, [r5], #4
 8002706:	4798      	blx	r3
 8002708:	3601      	adds	r6, #1
 800270a:	e7f2      	b.n	80026f2 <__libc_init_array+0x1e>
 800270c:	080027fc 	.word	0x080027fc
 8002710:	080027fc 	.word	0x080027fc
 8002714:	080027fc 	.word	0x080027fc
 8002718:	08002800 	.word	0x08002800

0800271c <__retarget_lock_acquire_recursive>:
 800271c:	4770      	bx	lr

0800271e <__retarget_lock_release_recursive>:
 800271e:	4770      	bx	lr

08002720 <_free_r>:
 8002720:	b538      	push	{r3, r4, r5, lr}
 8002722:	4605      	mov	r5, r0
 8002724:	2900      	cmp	r1, #0
 8002726:	d040      	beq.n	80027aa <_free_r+0x8a>
 8002728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800272c:	1f0c      	subs	r4, r1, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	bfb8      	it	lt
 8002732:	18e4      	addlt	r4, r4, r3
 8002734:	f7ff ffa4 	bl	8002680 <__malloc_lock>
 8002738:	4a1c      	ldr	r2, [pc, #112]	@ (80027ac <_free_r+0x8c>)
 800273a:	6813      	ldr	r3, [r2, #0]
 800273c:	b933      	cbnz	r3, 800274c <_free_r+0x2c>
 800273e:	6063      	str	r3, [r4, #4]
 8002740:	6014      	str	r4, [r2, #0]
 8002742:	4628      	mov	r0, r5
 8002744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002748:	f7ff bfa0 	b.w	800268c <__malloc_unlock>
 800274c:	42a3      	cmp	r3, r4
 800274e:	d908      	bls.n	8002762 <_free_r+0x42>
 8002750:	6820      	ldr	r0, [r4, #0]
 8002752:	1821      	adds	r1, r4, r0
 8002754:	428b      	cmp	r3, r1
 8002756:	bf01      	itttt	eq
 8002758:	6819      	ldreq	r1, [r3, #0]
 800275a:	685b      	ldreq	r3, [r3, #4]
 800275c:	1809      	addeq	r1, r1, r0
 800275e:	6021      	streq	r1, [r4, #0]
 8002760:	e7ed      	b.n	800273e <_free_r+0x1e>
 8002762:	461a      	mov	r2, r3
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	b10b      	cbz	r3, 800276c <_free_r+0x4c>
 8002768:	42a3      	cmp	r3, r4
 800276a:	d9fa      	bls.n	8002762 <_free_r+0x42>
 800276c:	6811      	ldr	r1, [r2, #0]
 800276e:	1850      	adds	r0, r2, r1
 8002770:	42a0      	cmp	r0, r4
 8002772:	d10b      	bne.n	800278c <_free_r+0x6c>
 8002774:	6820      	ldr	r0, [r4, #0]
 8002776:	4401      	add	r1, r0
 8002778:	1850      	adds	r0, r2, r1
 800277a:	4283      	cmp	r3, r0
 800277c:	6011      	str	r1, [r2, #0]
 800277e:	d1e0      	bne.n	8002742 <_free_r+0x22>
 8002780:	6818      	ldr	r0, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	4408      	add	r0, r1
 8002786:	6010      	str	r0, [r2, #0]
 8002788:	6053      	str	r3, [r2, #4]
 800278a:	e7da      	b.n	8002742 <_free_r+0x22>
 800278c:	d902      	bls.n	8002794 <_free_r+0x74>
 800278e:	230c      	movs	r3, #12
 8002790:	602b      	str	r3, [r5, #0]
 8002792:	e7d6      	b.n	8002742 <_free_r+0x22>
 8002794:	6820      	ldr	r0, [r4, #0]
 8002796:	1821      	adds	r1, r4, r0
 8002798:	428b      	cmp	r3, r1
 800279a:	bf01      	itttt	eq
 800279c:	6819      	ldreq	r1, [r3, #0]
 800279e:	685b      	ldreq	r3, [r3, #4]
 80027a0:	1809      	addeq	r1, r1, r0
 80027a2:	6021      	streq	r1, [r4, #0]
 80027a4:	6063      	str	r3, [r4, #4]
 80027a6:	6054      	str	r4, [r2, #4]
 80027a8:	e7cb      	b.n	8002742 <_free_r+0x22>
 80027aa:	bd38      	pop	{r3, r4, r5, pc}
 80027ac:	2000011c 	.word	0x2000011c

080027b0 <_init>:
 80027b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b2:	bf00      	nop
 80027b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b6:	bc08      	pop	{r3}
 80027b8:	469e      	mov	lr, r3
 80027ba:	4770      	bx	lr

080027bc <_fini>:
 80027bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027be:	bf00      	nop
 80027c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027c2:	bc08      	pop	{r3}
 80027c4:	469e      	mov	lr, r3
 80027c6:	4770      	bx	lr
